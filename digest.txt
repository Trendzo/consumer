# Repository Analysis

## Summary

Directory: home/yatharth/Documents/AIB/trendzo/consumer-frontend
Files analyzed: 72

Estimated tokens: 99.1k

## Directory Structure

Directory structure:
└── consumer-frontend/
    ├── README.md
    ├── eslint.config.mjs
    ├── jsconfig.json
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.mjs
    ├── project-structure
    ├── tailwind.config.js
    ├── public/
    │   ├── images/
    │   └── videos/
    └── src/
        ├── app/
        │   ├── globals.css
        │   ├── layout.js
        │   ├── page.js
        │   ├── cart/
        │   │   ├── loading.js
        │   │   └── page.js
        │   ├── product/
        │   │   └── [productId]/
        │   │       ├── loading.js
        │   │       └── page.js
        │   ├── products/
        │   │   └── page.js
        │   ├── profile/
        │   │   ├── loading.js
        │   │   ├── page.js
        │   │   ├── edit/
        │   │   │   └── page.js
        │   │   └── settings/
        │   │       └── page.js
        │   ├── reels/
        │   │   ├── layout.js
        │   │   ├── loading.js
        │   │   └── page.js
        │   └── trending/
        │       ├── loading.js
        │       └── page.js
        ├── components/
        │   ├── cart/
        │   │   ├── CartHeader.js
        │   │   ├── CartItemCard.js
        │   │   ├── CartItems.js
        │   │   ├── CartSummary.js
        │   │   ├── DeliveryOptions.js
        │   │   ├── PromoCodeInput.js
        │   │   ├── RecommendedItems.js
        │   │   └── WishlistSection.js
        │   ├── home/
        │   │   ├── CategoryNav.js
        │   │   ├── HeroSection.js
        │   │   ├── ProductCard.js
        │   │   ├── ProductVideoSlider.js
        │   │   ├── ProductsGrid.js
        │   │   ├── PromoBar.js
        │   │   ├── ReelSection.js
        │   │   ├── StoreSlider.js
        │   │   └── TrendingNow.js
        │   ├── layout/
        │   │   ├── Container.js
        │   │   ├── Footer.js
        │   │   ├── GlassPanels.js
        │   │   └── Header.js
        │   ├── profile/
        │   │   ├── AddressesPanel.js
        │   │   ├── OrdersPanel.js
        │   │   ├── PaymentMethodsPanel.js
        │   │   ├── ProfileContent.js
        │   │   ├── ProfileHeader.js
        │   │   ├── ProfileStats.js
        │   │   ├── ProfileTabs.js
        │   │   ├── SettingsPage.js
        │   │   └── WishlistPanel.js
        │   ├── reels/
        │   │   ├── ReelCard.js
        │   │   ├── ReelStore.js
        │   │   ├── ReelsCategories.js
        │   │   ├── ReelsViewer.js
        │   │   └── WishlistDrawer.js
        │   ├── search/
        │   │   └── SearchOverlay.jsx
        │   ├── trending/
        │   │   ├── TrendingCategories.js
        │   │   ├── TrendingGrid.js
        │   │   ├── TrendingHashtags.js
        │   │   ├── TrendingHeader.js
        │   │   └── TrendingItem.js
        │   └── ui/
        │       ├── Badge.js
        │       ├── Button.js
        │       ├── Card.js
        │       ├── SearchBar.js
        │       └── ThemeToggle.js
        └── context/
            └── ThemeProvider.js


## Files Content

================================================
File: README.md
================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.



================================================
File: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [...compat.extends("next/core-web-vitals")];

export default eslintConfig;



================================================
File: jsconfig.json
================================================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}



================================================
File: next.config.mjs
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



================================================
File: package.json
================================================
{
  "name": "consumer",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "framer-motion": "^12.6.5",
    "next": "15.2.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-swipeable": "^7.0.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "tailwindcss": "^4"
  }
}



================================================
File: postcss.config.mjs
================================================
const config = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};

export default config;



================================================
File: project-structure
================================================
trendzo-ecommerce/
├── app/
│   ├── page.js                 # Homepage
│   ├── layout.js               # Root layout
│   ├── globals.css             # Global styles
│   ├── trending/               # New trending page directory
│   │   ├── page.js             # Trending page component
│   │   └── loading.js          # Trending page loading state
├── components/
│   ├── ui/
│   │   ├── Button.js           # Custom button component
│   │   ├── Card.js             # Glassmorphism card component
│   │   ├── SearchBar.js        # Search functionality
│   │   ├── Badge.js            # Notification/count badges
│   ├── layout/
│   │   ├── Header.js           # Top header with logo & search
│   │   ├── Footer.js           # Bottom navigation bar (updated with navigation)
│   │   ├── Container.js        # Page container with proper padding
│   │   ├── GlassPanels.js      # Glassmorphism background panels
│   ├── home/
│   │   ├── HeroSection.js      # Main hero section with promotions
│   │   ├── StoreSlider.js      # Popular stores slider
│   │   ├── ProductsGrid.js     # Product grid layout (Zara/H&M style)
│   │   ├── ProductCard.js      # Individual product card
│   │   ├── CategoryNav.js      # Categories navigation
│   │   ├── ReelSection.js      # Instagram/Pinterest style reels
│   │   ├── PromoBar.js         # Zepto-style coupon display
│   │   ├── TrendingNow.js      # Trending products section
│   ├── trending/               # New trending components directory
│   │   ├── TrendingHeader.js   # Trending page header with filters
│   │   ├── TrendingGrid.js     # Main grid layout for trending items
│   │   ├── TrendingItem.js     # Individual trending item card
│   │   ├── TrendingCategories.js # Trending categories section
│   │   └── TrendingHashtags.js # Trending hashtags component
├── public/
│   ├── images/
│   │   ├── logo.svg
│   │   ├── hero-bg.jpg
│   │   ├── demo-products/
│   │   ├── store-logos/
│   │   ├── icons/
├── tailwind.config.js          # Tailwind configuration
├── package.json
└── next.config.js


================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      './src/app/**/*.{js,jsx}',
      './src/components/**/*.{js,jsx}',
      './src/pages/**/*.{js,jsx}',
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }




================================================
File: src/app/globals.css
================================================
@import "tailwindcss";

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --color-bg-dark: #0f0f1a;
  --color-bg-light: #f5f7fb;
  --color-purple: #8c5cf2;
  --color-teal: #36c2cf;
  --color-pink: #ff3d71;
}

@layer base {
  body {
    @apply text-gray-700 min-h-screen relative overflow-x-hidden transition-colors duration-300;
  }
  
  .dark body {
    @apply bg-gray-950 text-white;
    background: linear-gradient(135deg, #0f0f1a 0%, #121225 100%);
  }
  
  .light body {
    @apply bg-gray-50;
    background: linear-gradient(135deg, #f5f7fb 0%, #e9ecf6 100%);
  }
  
  /* Animated background gradients */
  .dark body::before {
    content: '';
    @apply fixed inset-0 -z-10 opacity-70;
    background: 
      radial-gradient(circle at 20% 20%, rgba(140, 92, 242, 0.15) 0%, transparent 40%),
      radial-gradient(circle at 80% 30%, rgba(54, 194, 207, 0.15) 0%, transparent 40%),
      radial-gradient(circle at 50% 70%, rgba(255, 61, 113, 0.15) 0%, transparent 40%);
    animation: pulse-slow 8s ease-in-out infinite alternate;
  }
  
  .light body::before {
    content: '';
    @apply fixed inset-0 -z-10 opacity-60;
    background: 
      radial-gradient(circle at 20% 20%, rgba(140, 92, 242, 0.1) 0%, transparent 40%),
      radial-gradient(circle at 80% 30%, rgba(54, 194, 207, 0.1) 0%, transparent 40%),
      radial-gradient(circle at 50% 70%, rgba(255, 61, 113, 0.1) 0%, transparent 40%);
    animation: pulse-slow 8s ease-in-out infinite alternate;
  }
  
  @keyframes pulse-slow {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(1.1);
    }
  }
}

@layer components {
  /* Glassmorphism */
  .glass {
    @apply backdrop-blur-md border shadow-lg transition-colors duration-300;
  }
  
  .dark .glass {
    @apply bg-gray-900/60 border-white/10;
  }
  
  .light .glass {
    @apply bg-white/70 border-gray-200;
  }
  
  /* Neumorphism */
  .neomorph {
    @apply rounded-xl shadow-xl transition-colors duration-300;
  }
  
  .dark .neomorph {
    @apply bg-gray-950;
  }
  
  .light .neomorph {
    @apply bg-gray-50;
  }
  
  /* Custom scrollbar */
  .scrollbar-none {
    scrollbar-width: none;
  }
  
  .scrollbar-none::-webkit-scrollbar {
    display: none;
  }
  
  /* Instagram style bottom navigation */
  .bottom-nav-item {
    @apply flex flex-col items-center justify-center p-2 transition-colors duration-300;
  }
  
  .dark .bottom-nav-item {
    @apply text-gray-400;
  }
  
  .light .bottom-nav-item {
    @apply text-gray-500;
  }
  
  .bottom-nav-item.active {
    @apply text-purple-500;
  }
  
  /* Swipe animation (Snitch style) */
  .swipe-area {
    @apply relative overflow-hidden;
  }
  
  .swipe-indicator {
    @apply absolute bottom-5 left-0 right-0 flex justify-center space-x-1;
  }
  
  .swipe-dot {
    @apply w-2 h-2 rounded-full;
  }
  
  .dark .swipe-dot {
    @apply bg-gray-400/50;
  }
  
  .light .swipe-dot {
    @apply bg-gray-500/50;
  }
  
  .swipe-dot.active {
    @apply bg-purple-500 w-4;
  }
  
  /* Add to bag animation (Knot style) */
  .add-to-bag {
    @apply relative overflow-hidden;
  }
  
  .add-to-bag-btn {
    @apply flex items-center justify-center rounded-full w-10 h-10 bg-purple-500 text-white;
    transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }
  
  .add-to-bag-btn:hover {
    @apply bg-purple-600;
    transform: scale(1.1);
  }
  
  .add-to-bag-btn:active {
    transform: scale(0.9);
  }
  
  /* Zepto style coupons */
  .coupon-card {
    @apply relative overflow-hidden rounded-lg p-4 flex items-center justify-between transition-colors duration-300;
  }
  
  .dark .coupon-card {
    background: linear-gradient(45deg, #2d2942 0%, #1a1a2e 100%);
  }
  
  .light .coupon-card {
    background: linear-gradient(45deg, #eff1fa 0%, #e5e7f5 100%);
  }
  
  .coupon-dashed {
    @apply border-dashed border-l h-16 mx-4 transition-colors duration-300;
  }
  
  .dark .coupon-dashed {
    @apply border-white/20;
  }
  
  .light .coupon-dashed {
    @apply border-gray-300;
  }
  
  /* Add floating gradient orbs */
  .gradient-orb {
    @apply absolute rounded-full blur-2xl transition-opacity duration-300;
    animation: float 15s ease-in-out infinite alternate;
  }
  
  .dark .gradient-orb {
    @apply opacity-30;
  }
  
  .light .gradient-orb {
    @apply opacity-20;
  }
  
  @keyframes float {
    0% {
      transform: translate(0, 0) scale(1);
    }
    50% {
      transform: translate(10px, -30px) scale(1.05);
    }
    100% {
      transform: translate(-20px, 15px) scale(0.95);
    }
  }
}

/* Add these to your globals.css */

/* Fade in and out animation for instructions */
@keyframes fadeInOut {
  0% {
    opacity: 0;
  }
  20% {
    opacity: 0.8;
  }
  80% {
    opacity: 0.8;
  }
  100% {
    opacity: 0;
  }
}

.animate-fadeInOut {
  animation: fadeInOut 3s ease-in-out forwards;
}

/* Swipe animation for cards */
@keyframes swipeRight {
  0% {
    transform: translateX(0) rotate(0);
  }
  100% {
    transform: translateX(150%) rotate(30deg);
  }
}

@keyframes swipeLeft {
  0% {
    transform: translateX(0) rotate(0);
  }
  100% {
    transform: translateX(-150%) rotate(-30deg);
  }
}

.animate-swipe-right {
  animation: swipeRight 0.5s ease-out forwards;
}

.animate-swipe-left {
  animation: swipeLeft 0.5s ease-out forwards;
}

/* Like/Reject button pulse effect */
@keyframes likePulse {
  0% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
  }
  70% {
    transform: scale(1.1);
    box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
  }
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
  }
}

@keyframes rejectPulse {
  0% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
  }
  70% {
    transform: scale(1.1);
    box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
  }
  100% {
    transform: scale(1);
    box-shadow: 0 0 0 0 rgba(239, 68, 68, 0);
  }
}

.animate-like-pulse {
  animation: likePulse 0.5s 1;
}

.animate-reject-pulse {
  animation: rejectPulse 0.5s 1;
}

/* Floating heart animation */
@keyframes floatUp {
  0% {
    transform: translateY(0) scale(1);
    opacity: 1;
  }
  100% {
    transform: translateY(-100px) scale(1.5);
    opacity: 0;
  }
}

.animate-float-up {
  animation: floatUp 1s ease-out forwards;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

.animate-shimmer {
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes ping {
  75%, 100% {
    transform: scale(2);
    opacity: 0;
  }
}

.animate-ping {
  animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
}

/* Search backdrop animation */
@keyframes searchBackdropIn {
  0% {
    opacity: 0;
    transform: scale(0.9);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}

.search-backdrop-in {
  animation: searchBackdropIn 0.2s ease-out forwards;
}

/* Search results dropdown animation */
@keyframes searchResultsIn {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.search-results-in {
  animation: searchResultsIn 0.3s ease-out forwards;
}

/* Recent search pill hover effect */
.recent-search-pill {
  transition: all 0.2s ease;
}

.recent-search-pill:hover {
  background: linear-gradient(90deg, rgba(140, 92, 242, 0.1) 0%, rgba(54, 194, 207, 0.1) 100%);
}

/* Search input focus ring animation */
@keyframes focusRingPulse {
  0% {
    box-shadow: 0 0 0 0 rgba(140, 92, 242, 0.4);
  }
  70% {
    box-shadow: 0 0 0 4px rgba(140, 92, 242, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(140, 92, 242, 0);
  }
}

.search-input-focus {
  animation: focusRingPulse 1.5s infinite;
}

/* Add a subtle shadow for search suggestions on hover */
.search-suggestion:hover {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

/* Add these animation keyframes to your globals.css file */

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

.animate-shimmer {
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.animate-pulse {
  animation: pulse 1.5s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

/* Add this to your globals.css file */

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* Mobile search transition */
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.2s ease-out forwards;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}


================================================
File: src/app/layout.js
================================================
import './globals.css';
import { Poppins, Manrope } from 'next/font/google';
import Footer from '@/components/layout/Footer';
import { ThemeProvider } from '@/context/ThemeProvider';

const poppins = Poppins({
  subsets: ['latin'],
  weight: ['300', '400', '500', '600', '700'],
  variable: '--font-poppins',
  display: 'swap',
});

const manrope = Manrope({
  subsets: ['latin'],
  weight: ['500', '600', '700', '800'],
  variable: '--font-manrope',
  display: 'swap',
});

export const metadata = {
  title: 'Trendzo - Fashion Delivered in 60 Minutes',
  description: 'Your local fashion marketplace with 60-minute delivery from your favorite stores.',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={`${poppins.variable} ${manrope.variable} font-sans`}>
        <ThemeProvider>
          <div className="min-h-screen flex flex-col">
            <main className="flex-grow pb-20">
              {children}
            </main>
            <Footer />
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}


================================================
File: src/app/page.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import HeroSection from '@/components/home/HeroSection';
import CategoryNav from '@/components/home/CategoryNav';
import StoreSlider from '@/components/home/StoreSlider';
import ProductVideoSlider from '@/components/home/ProductVideoSlider';
import ProductsGrid from '@/components/home/ProductsGrid';
import ReelSection from '@/components/home/ReelSection';
import PromoBar from '@/components/home/PromoBar';
import TrendingNow from '@/components/home/TrendingNow';

export default function Home() {
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container>
        <HeroSection />
        
        <CategoryNav />
        
        <section className="my-8">
          <h2 className="text-2xl font-display font-bold mb-4">Popular Stores</h2>
          <StoreSlider />
        </section>
        
        <ProductVideoSlider />
        
        <PromoBar />
        
        <section className="my-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-display font-bold">New Arrivals</h2>
            <a href="/products" className="text-primary text-sm font-medium">View All</a>
          </div>
          <ProductsGrid products={products} />
        </section>
        
        <section className="my-8">
          <h2 className="text-2xl font-display font-bold mb-4">Style Inspiration</h2>
          <ReelSection />
        </section>
        
        <section className="my-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-display font-bold">#TrendingNow</h2>
            <a href="/trending" className="text-primary text-sm font-medium">Explore</a>
          </div>
          <TrendingNow />
        </section>
      </Container>
    </>
  );
}

  // Mock data
  const products = [
    {
      id: 1,
      name: "Oversized Cotton T-shirt",
      price: 1299,
      originalPrice: 1999,
      store: "Zara",
      deliveryTime: "25 min",
      rating: 4.7,
      isNew: true,
      images: ["/images/2.jpg", "/images/3.jpg"],
    },
    {
      id: 2,
      name: "High Rise Skinny Jeans",
      price: 2499,
      store: "H&M",
      deliveryTime: "30 min",
      rating: 4.3,
      isNew: false,
      images: ["/images/4.jpg", "/images/5.jpg"],
    },
    {
      id: 3,
      name: "Floral Print Maxi Dress",
      price: 3599,
      originalPrice: 4999,
      store: "Mango",
      deliveryTime: "45 min",
      rating: 4.5,
      isNew: true,
      images: ["/images/6.jpg", "/images/7.jpg"],
    },
    {
      id: 4,
      name: "Air Max Sneakers",
      price: 7999,
      store: "Nike",
      deliveryTime: "35 min",
      rating: 4.8,
      isNew: false,
      images: ["/images/8.jpg", "/images/9.jpg"],
    },
  ];


================================================
File: src/app/cart/loading.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import Card from '@/components/ui/Card';

export default function Loading() {
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        {/* Header skeleton */}
        <div className="my-6">
          <div className="h-10 w-52 glass animate-pulse rounded-lg mb-2"></div>
          <div className="h-5 w-64 glass animate-pulse rounded-lg"></div>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6">
          {/* Main cart section - takes 2/3 on large screens */}
          <div className="lg:col-span-2 space-y-6">
            {/* Cart items skeleton */}
            <Card variant="glass" className="p-4">
              {/* Cart items header */}
              <div className="flex justify-between items-center mb-6">
                <div className="h-6 w-32 glass animate-pulse rounded-lg"></div>
                <div className="h-6 w-24 glass animate-pulse rounded-lg"></div>
              </div>
              
              {/* Cart items */}
              {Array.from({ length: 3 }).map((_, index) => (
                <div key={index} className="flex py-4 border-b border-white/10 last:border-0">
                  <div className="h-24 w-24 glass animate-pulse rounded-xl"></div>
                  
                  <div className="flex-1 ml-4">
                    <div className="h-5 w-32 glass animate-pulse rounded-lg mb-2"></div>
                    <div className="h-4 w-24 glass animate-pulse rounded-lg mb-2"></div>
                    <div className="h-4 w-16 glass animate-pulse rounded-lg"></div>
                  </div>
                  
                  <div className="ml-4">
                    <div className="h-6 w-20 glass animate-pulse rounded-lg"></div>
                  </div>
                </div>
              ))}
            </Card>
            
            {/* Promo code skeleton */}
            <Card variant="glass" className="p-4">
              <div className="h-6 w-40 glass animate-pulse rounded-lg mb-4"></div>
              <div className="h-12 w-full glass animate-pulse rounded-full"></div>
            </Card>
            
            {/* Delivery options skeleton */}
            <Card variant="glass" className="p-4">
              <div className="h-6 w-40 glass animate-pulse rounded-lg mb-4"></div>
              <div className="grid grid-cols-3 gap-4">
                {Array.from({ length: 3 }).map((_, index) => (
                  <div key={index} className="h-24 glass animate-pulse rounded-xl"></div>
                ))}
              </div>
            </Card>
            
            {/* Wishlist skeleton (mobile) */}
            <div className="lg:hidden">
              <Card variant="glass" className="p-4">
                <div className="h-6 w-40 glass animate-pulse rounded-lg mb-4"></div>
                <div className="h-32 w-full glass animate-pulse rounded-xl"></div>
              </Card>
            </div>
            
            {/* Wishlist skeleton */}
            <Card variant="glass" className="p-4">
              <div className="h-6 w-40 glass animate-pulse rounded-lg mb-4"></div>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {Array.from({ length: 3 }).map((_, index) => (
                  <div key={index} className="h-48 glass animate-pulse rounded-xl"></div>
                ))}
              </div>
            </Card>
          </div>
          
          {/* Cart summary skeleton */}
          <div className="hidden lg:block">
            <Card variant="glass" className="p-4">
              <div className="h-6 w-40 glass animate-pulse rounded-lg mb-6"></div>
              
              {Array.from({ length: 4 }).map((_, index) => (
                <div key={index} className="flex justify-between items-center mb-4">
                  <div className="h-4 w-32 glass animate-pulse rounded-lg"></div>
                  <div className="h-4 w-16 glass animate-pulse rounded-lg"></div>
                </div>
              ))}
              
              <div className="my-4 border-t border-white/10 pt-4">
                <div className="flex justify-between items-center">
                  <div className="h-6 w-32 glass animate-pulse rounded-lg"></div>
                  <div className="h-6 w-24 glass animate-pulse rounded-lg"></div>
                </div>
              </div>
              
              <div className="mt-6">
                <div className="h-12 w-full glass animate-pulse rounded-lg"></div>
              </div>
            </Card>
          </div>
        </div>
        
        {/* Recommended items skeleton */}
        <div className="my-12">
          <div className="h-8 w-64 glass animate-pulse rounded-lg mb-6"></div>
          
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {Array.from({ length: 4 }).map((_, index) => (
              <div key={index} className="h-64 glass animate-pulse rounded-xl"></div>
            ))}
          </div>
        </div>
      </Container>
    </>
  );
}


================================================
File: src/app/cart/page.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import CartHeader from '@/components/cart/CartHeader';
import CartItems from '@/components/cart/CartItems';
import CartSummary from '@/components/cart/CartSummary';
import WishlistSection from '@/components/cart/WishlistSection';
import PromoCodeInput from '@/components/cart/PromoCodeInput';
import DeliveryOptions from '@/components/cart/DeliveryOptions';
import RecommendedItems from '@/components/cart/RecommendedItems';

export const metadata = {
  title: 'Your Cart | Trendzo - Fashion Delivered in 60 Minutes',
  description: 'View your cart and checkout with 60-minute delivery from your favorite stores.',
};

export default function CartPage() {
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        <CartHeader />
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6">
          {/* Main cart section - takes 2/3 on large screens */}
          <div className="lg:col-span-2 space-y-6">
            <CartItems />
            
            <PromoCodeInput />
            
            <DeliveryOptions />
            
            {/* Only show on mobile */}
            <div className="lg:hidden">
              <CartSummary />
            </div>
            
            <WishlistSection />
          </div>
          
          {/* Cart summary - takes 1/3 on large screens */}
          <div className="hidden lg:block">
            <CartSummary />
          </div>
        </div>
        
        <section className="my-12">
          <h2 className="text-2xl font-display font-bold mb-6">Recommended For You</h2>
          <RecommendedItems />
        </section>
      </Container>
    </>
  );
}


================================================
File: src/app/product/[productId]/loading.js
================================================
import Header from "@/components/layout/Header";
import Container from "@/components/layout/Container";
import GlassPanels from "@/components/layout/GlassPanels";
import Card from "@/components/ui/Card";

export default function Loading() {
  return (
    <>
      <GlassPanels />
      <Header />

      <Container className="pb-20 pt-2">
        {/* Product Header Skeleton */}
        <div className="my-6">
          <div className="h-10 w-64 glass animate-pulse rounded-lg mb-2"></div>
          <div className="h-5 w-48 glass animate-pulse rounded-lg"></div>
        </div>

        {/* Product Content Skeleton */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Product Image Skeleton */}
          <div className="h-[400px] glass animate-pulse rounded-xl"></div>

          {/* Product Details Skeleton */}
          <div className="space-y-6">
            <Card variant="glass" className="p-4">
              <div className="flex justify-between items-center mb-4">
                <div className="flex items-center gap-2">
                  <div className="h-8 w-24 glass animate-pulse rounded-lg"></div>
                  <div className="h-5 w-16 glass animate-pulse rounded-lg"></div>
                  <div className="h-5 w-12 glass animate-pulse rounded-lg"></div>
                </div>
                <div className="h-5 w-20 glass animate-pulse rounded-lg"></div>
              </div>

              <div className="mb-4">
                <div className="h-5 w-20 glass animate-pulse rounded-lg mb-2"></div>
                <div className="flex gap-2">
                  {Array.from({ length: 3 }).map((_, index) => (
                    <div
                      key={index}
                      className="h-8 w-8 glass animate-pulse rounded-full"
                    ></div>
                  ))}
                </div>
              </div>

              <div className="mb-4">
                <div className="h-5 w-20 glass animate-pulse rounded-lg mb-2"></div>
                <div className="flex gap-2">
                  {Array.from({ length: 4 }).map((_, index) => (
                    <div
                      key={index}
                      className="h-8 w-12 glass animate-pulse rounded-full"
                    ></div>
                  ))}
                </div>
              </div>

              <div className="mb-4">
                <div className="h-5 w-20 glass animate-pulse rounded-lg mb-2"></div>
                <div className="flex items-center glass rounded-full w-24 h-8 animate-pulse"></div>
              </div>

              <div className="h-12 w-full glass animate-pulse rounded-lg"></div>
            </Card>

            <Card variant="glass" className="p-4">
              <div className="h-6 w-40 glass animate-pulse rounded-lg mb-2"></div>
              <div className="h-16 w-full glass animate-pulse rounded-lg"></div>
            </Card>
          </div>
        </div>

        {/* Related Products Skeleton */}
        <div className="my-12">
          <div className="h-8 w-64 glass animate-pulse rounded-lg mb-6"></div>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {Array.from({ length: 4 }).map((_, index) => (
              <div
                key={index}
                className="h-64 glass animate-pulse rounded-xl"
              ></div>
            ))}
          </div>
        </div>
      </Container>
    </>
  );
}



================================================
File: src/app/product/[productId]/page.js
================================================
"use client";
import { use, useState, useEffect } from "react";
import Header from "@/components/layout/Header";
import Container from "@/components/layout/Container";
import GlassPanels from "@/components/layout/GlassPanels";
import Button from "@/components/ui/Button";
import ProductsGrid from "@/components/home/ProductsGrid";
import Card from "@/components/ui/Card";
import Badge from "@/components/ui/Badge";

export default function ProductDetailPage({ params: paramsPromise }) {
  const params = use(paramsPromise);
  const [selectedColor, setSelectedColor] = useState("White");
  const [selectedSize, setSelectedSize] = useState("M");
  const [quantity, setQuantity] = useState(1);

  // Mock product data
  const product = {
    id: params.productId,
    name: "Oversized Cotton T-shirt",
    price: 1299,
    originalPrice: 1999,
    store: "Zara",
    deliveryTime: "25 min",
    rating: 4.5,
    reviews: 128,
    colors: ["White", "Black", "Navy"],
    sizes: ["S", "M", "L", "XL"],
    images: [
      "/images/2.jpg",
      "/images/3.jpg",
      "/images/4.jpg",
      "/images/5.jpg",
      "/images/6.jpg",
      "/images/7.jpg",
    ],
    description:
      "A stylish oversized cotton T-shirt perfect for casual wear. Made with 100% organic cotton, this T-shirt offers comfort and durability.",
  };

  // Calculate discount percentage
  const discountPercent = product.originalPrice
    ? Math.round(
        ((product.originalPrice - product.price) / product.originalPrice) * 100
      )
    : null;

  // Handle add to cart
  const handleAddToCart = () => {
    // Mock add to cart logic
    console.log(
      `Added ${quantity} ${product.name} (Color: ${selectedColor}, Size: ${selectedSize}) to cart`
    );
  };

  return (
    <>
      <GlassPanels />
      <Header />

      <Container className="pb-20 pt-2">
        {/* Product Header */}
        <div className="my-6">
          <h1 className="text-3xl font-display font-bold mb-1">
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
              {product.name}
            </span>
          </h1>
          <p className="text-text-secondary">
            From {product.store} • Delivered in {product.deliveryTime}
          </p>
        </div>

        {/* Product Content */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Product Images */}
          <div className="swipe-area">
            <div className="relative glass rounded-xl overflow-hidden">
              <div
                className="w-full h-[400px] bg-cover bg-center"
                style={{ backgroundImage: `url(${product.images[0]})` }}
              />
              <div className="swipe-indicator">
                {product.images.map((_, index) => (
                  <div
                    key={index}
                    className={`swipe-dot ${index === 0 ? "active" : ""}`}
                  />
                ))}
              </div>
            </div>
          </div>

          {/* Product Details */}
          <div className="space-y-6">
            <Card variant="glass" className="p-4">
              {/* Pricing and Rating */}
              <div className="flex justify-between items-center mb-4">
                <div className="flex items-center gap-2">
                  <span className="text-2xl font-bold text-primary">
                    ₹{product.price.toFixed(2)}
                  </span>
                  {product.originalPrice && (
                    <span className="text-sm text-text-secondary line-through">
                      ₹{product.originalPrice.toFixed(2)}
                    </span>
                  )}
                  {discountPercent && (
                    <Badge variant="accent" size="sm">
                      {discountPercent}% OFF
                    </Badge>
                  )}
                </div>
                <div className="flex items-center gap-1 text-sm">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5 text-yellow-400"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  <span>
                    {product.rating} ({product.reviews} reviews)
                  </span>
                </div>
              </div>

              {/* Color Selection */}
              <div className="mb-4">
                <h3 className="font-medium mb-2">Color: {selectedColor}</h3>
                <div className="flex gap-2">
                  {product.colors.map((color) => (
                    <button
                      key={color}
                      className={`w-8 h-8 rounded-full border-2 ${
                        selectedColor === color
                          ? "border-purple-500"
                          : "border-white/10 dark:border-gray-200/20"
                      } neomorph`}
                      style={{ backgroundColor: color.toLowerCase() }}
                      onClick={() => setSelectedColor(color)}
                    />
                  ))}
                </div>
              </div>

              {/* Size Selection */}
              <div className="mb-4">
                <h3 className="font-medium mb-2">Size: {selectedSize}</h3>
                <div className="flex gap-2">
                  {product.sizes.map((size) => (
                    <button
                      key={size}
                      className={`px-4 py-2 rounded-full neomorph ${
                        selectedSize === size
                          ? "bg-purple-500 text-white"
                          : "glass hover:bg-purple-500/10"
                      }`}
                      onClick={() => setSelectedSize(size)}
                    >
                      {size}
                    </button>
                  ))}
                </div>
              </div>

              {/* Quantity Selection */}
              <div className="mb-4">
                <h3 className="font-medium mb-2">Quantity</h3>
                <div className="flex items-center glass rounded-full overflow-hidden w-fit">
                  <button
                    className="w-8 h-8 flex items-center justify-center hover:bg-white/10"
                    onClick={() => setQuantity(quantity > 1 ? quantity - 1 : 1)}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-5 w-5"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fillRule="evenodd"
                        d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </button>
                  <div className="w-8 text-center font-medium">{quantity}</div>
                  <button
                    className="w-8 h-8 flex items-center justify-center hover:bg-white/10"
                    onClick={() => setQuantity(quantity + 1)}
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-5 w-5"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fillRule="evenodd"
                        d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </button>
                </div>
              </div>

              {/* Add to Cart Button */}
              <Button
                variant="primary"
                size="lg"
                fullWidth
                className="add-to-bag-btn bg-gradient-to-r from-purple-500 to-cyan-400 hover:from-purple-600 hover:to-cyan-500"
                onClick={handleAddToCart}
              >
                Add to Cart
              </Button>
            </Card>

            {/* Product Description */}
            <Card variant="glass" className="p-4">
              <h3 className="text-lg font-display font-bold mb-2">
                Product Details
              </h3>
              <p className="text-text-secondary">{product.description}</p>
            </Card>
          </div>
        </div>

        {/* Related Products */}
        <section className="my-12">
          <h2 className="text-2xl font-display font-bold mb-6">
            Related Products
          </h2>
          {/* <ProductsGrid products={products} /> */}
        </section>
      </Container>
    </>
  );
}



================================================
File: src/app/products/page.js
================================================
"use client";

import Header from "@/components/layout/Header";
import Container from "@/components/layout/Container";
import GlassPanels from "@/components/layout/GlassPanels";
import ProductsGrid from "@/components/home/ProductsGrid";
import SearchBar from "@/components/ui/SearchBar";
import Button from "@/components/ui/Button";
import { useState } from "react";

export default function Products() {
  const [sortOption, setSortOption] = useState("relevance");
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  // Mock sort options
  const sortOptions = [
    { id: "relevance", name: "Relevance" },
    { id: "price-low", name: "Price: Low to High" },
    { id: "price-high", name: "Price: High to Low" },
    { id: "newest", name: "Newest First" },
    { id: "rating", name: "Customer Rating" },
  ];

  // Mock filter options
  const filters = [
    {
      id: "price",
      name: "Price Range",
      options: [
        { id: "0-1000", name: "Under ₹1000" },
        { id: "1000-2000", name: "₹1000 - ₹2000" },
        { id: "2000-5000", name: "₹2000 - ₹5000" },
        { id: "5000+", name: "₹5000 & Above" },
      ],
    },
    {
      id: "brand",
      name: "Brand",
      options: [
        { id: "zara", name: "Zara" },
        { id: "hnm", name: "H&M" },
        { id: "nike", name: "Nike" },
        { id: "adidas", name: "Adidas" },
      ],
    },
    {
      id: "rating",
      name: "Customer Rating",
      options: [
        { id: "4", name: "4★ & Above" },
        { id: "3", name: "3★ & Above" },
        { id: "2", name: "2★ & Above" },
      ],
    },
  ];

  return (
    <>
      <GlassPanels />
      <Header />

      <Container className="pb-20 pt-2">
        {/* Search Bar Section */}
        <div className="my-6">
          <SearchBar
            placeholder="Search products, brands, and more..."
            // className="w-full glass rounded-full px-6 py-3 text-gray-700 dark:text-white focusring-2 focusring-purple-500"

            className="w-full"
            variant="glass"
          />
        </div>

        {/* Page Header with Sort and Filter */}
        <div className="my-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <h1 className="text-3xl font-display font-bold">
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
              All Products
            </span>
          </h1>
          <div className="flex gap-4">
            <div className="relative">
              <select
                className="glass rounded-lg  bg-purple-500 hover:bg-purple-600 text-white neomorph px-4 py-2 pr-8 focus:outline-none bordernone appearance-none  cursor-pointer"
                value={sortOption}
                onChange={(e) => setSortOption(e.target.value)}
              >
                {sortOptions.map((option) => (
                  <option
                    key={option.id}
                    value={option.id}
                    className="bg-gray-50 dark:bg-gray-900 text-gray-700 dark:text-white"
                  >
                    {option.name}
                  </option>
                ))}
              </select>
              <svg
                className="absolute right-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-700 dark:text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M19 9l-7 7-7-7"
                />
              </svg>
            </div>
            <Button
              variant="primary"
              className="rounded-full bg-purple-500 hover:bg-purple-600 text-white neomorph"
              onClick={() => setIsFilterOpen(!isFilterOpen)}
            >
              {isFilterOpen ? "Hide Filters" : "Show Filters"}
            </Button>
          </div>
        </div>

        {/* Filters Section */}
        {isFilterOpen && (
          <div className="mb-6 glass rounded-lg p-4 animate-fade-in-up">
            <h3 className="text-lg font-display font-bold mb-4 text-gray-700 dark:text-white">
              Filters
            </h3>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
              {filters.map((filter) => (
                <div key={filter.id}>
                  <h4 className="font-medium mb-2 text-gray-700 dark:text-white">
                    {filter.name}
                  </h4>
                  <div className="space-y-2">
                    {filter.options.map((option) => (
                      <label
                        key={option.id}
                        className="flex items-center gap-2"
                      >
                        <input
                          type="checkbox"
                          className="w-4 h-4 accent-purple-500 rounded focus:ring-2 focus:ring-purple-500 bg-gray-50 dark:bg-gray-900"
                        />
                        <span className="text-sm text-gray-700 dark:text-white">
                          {option.name}
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Products Grid */}
        <section className="my-8">
          <ProductsGrid products={products} />
        </section>
      </Container>
    </>
  );
}

const products = [
  {
    id: 1,
    name: "Oversized Cotton T-shirt",
    price: 1299,
    originalPrice: 1999,
    store: "Zara",
    deliveryTime: "25 min",
    rating: 4.7,
    isNew: true,
    images: ["/images/2.jpg", "/images/3.jpg"],
  },
  {
    id: 2,
    name: "High Rise Skinny Jeans",
    price: 2499,
    store: "H&M",
    deliveryTime: "30 min",
    rating: 4.3,
    isNew: false,
    images: ["/images/4.jpg", "/images/5.jpg"],
  },
  {
    id: 3,
    name: "Floral Print Maxi Dress",
    price: 3599,
    originalPrice: 4999,
    store: "Mango",
    deliveryTime: "45 min",
    rating: 4.5,
    isNew: true,
    images: ["/images/6.jpg", "/images/7.jpg"],
  },
  {
    id: 4,
    name: "Air Max Sneakers",
    price: 7999,
    store: "Nike",
    deliveryTime: "35 min",
    rating: 4.8,
    isNew: false,
    images: ["/images/8.jpg", "/images/9.jpg"],
  },
  {
    id: 5,
    name: "Oversized Cotton T-shirt",
    price: 1299,
    originalPrice: 1999,
    store: "Zara",
    deliveryTime: "25 min",
    rating: 4.7,
    isNew: true,
    images: ["/images/17.jpg", "/images/10.jpg"],
  },
  {
    id: 6,
    name: "High Rise Skinny Jeans",
    price: 2499,
    store: "H&M",
    deliveryTime: "30 min",
    rating: 4.3,
    isNew: false,
    images: ["/images/11.jpg", "/images/12.jpg"],
  },
  {
    id: 7,
    name: "Floral Print Maxi Dress",
    price: 3599,
    originalPrice: 4999,
    store: "Mango",
    deliveryTime: "45 min",
    rating: 4.5,
    isNew: true,
    images: ["/images/13.jpg", "/images/14.jpg"],
  },
  {
    id: 8,
    name: "Air Max Sneakers",
    price: 7999,
    store: "Nike",
    deliveryTime: "35 min",
    rating: 4.8,
    isNew: false,
    images: ["/images/15.jpg", "/images/16.jpg"],
  },
];



================================================
File: src/app/profile/loading.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import Card from '@/components/ui/Card';

export default function Loading() {
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        {/* Profile header skeleton */}
        <Card variant="glass" className="relative mt-4 rounded-3xl overflow-hidden p-6 pt-16">
          <div className="absolute -top-10 left-1/2 transform -translate-x-1/2">
            <div className="w-24 h-24 glass animate-pulse rounded-full"></div>
          </div>
          
          <div className="text-center mt-10">
            <div className="h-6 w-40 mx-auto glass animate-pulse rounded-lg mb-2"></div>
            <div className="h-4 w-32 mx-auto glass animate-pulse rounded-lg"></div>
          </div>
          
          <div className="mt-6 flex justify-center gap-4">
            <div className="h-10 w-24 glass animate-pulse rounded-full"></div>
            <div className="h-10 w-24 glass animate-pulse rounded-full"></div>
          </div>
        </Card>
        
        {/* Stats skeleton */}
        <div className="mt-8 grid grid-cols-3 gap-4">
          {Array.from({ length: 3 }).map((_, index) => (
            <Card 
              key={index}
              variant="glass" 
              className="p-4 text-center animate-pulse"
            >
              <div className="h-10 w-10 mx-auto glass rounded-full mb-3"></div>
              <div className="h-5 w-16 mx-auto glass rounded-lg mb-2"></div>
              <div className="h-4 w-24 mx-auto glass rounded-lg"></div>
            </Card>
          ))}
        </div>
        
        {/* Tabs skeleton */}
        <div className="mt-8">
          <div className="flex items-center overflow-x-auto scrollbar-none mb-6">
            <div className="glass rounded-full px-1 py-1 flex items-center">
              {Array.from({ length: 4 }).map((_, index) => (
                <div key={index} className="h-10 w-24 mx-1 animate-pulse glass rounded-full"></div>
              ))}
            </div>
          </div>
          
          {/* Orders skeleton */}
          <div className="space-y-4">
            {Array.from({ length: 3 }).map((_, index) => (
              <Card key={index} variant="glass" className="p-4">
                <div className="flex justify-between items-center mb-4">
                  <div className="h-5 w-32 glass animate-pulse rounded-lg"></div>
                  <div className="h-5 w-24 glass animate-pulse rounded-lg"></div>
                </div>
                
                <div className="flex gap-4">
                  <div className="h-20 w-20 glass animate-pulse rounded-xl"></div>
                  <div className="flex-1">
                    <div className="h-5 w-40 glass animate-pulse rounded-lg mb-2"></div>
                    <div className="h-4 w-32 glass animate-pulse rounded-lg mb-2"></div>
                    <div className="h-4 w-24 glass animate-pulse rounded-lg"></div>
                  </div>
                </div>
                
                <div className="mt-4 flex justify-between">
                  <div className="h-8 w-24 glass animate-pulse rounded-lg"></div>
                  <div className="h-8 w-24 glass animate-pulse rounded-lg"></div>
                </div>
              </Card>
            ))}
          </div>
        </div>
      </Container>
    </>
  );
}


================================================
File: src/app/profile/page.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import ProfileHeader from '@/components/profile/ProfileHeader';
import ProfileStats from '@/components/profile/ProfileStats';
import ProfileTabs, { ProfileTabProvider } from '@/components/profile/ProfileTabs';
import ProfileContent from '@/components/profile/ProfileContent';

export const metadata = {
  title: 'Your Profile | Trendzo - Fashion Delivered in 60 Minutes',
  description: 'Manage your profile, orders, and preferences with 60-minute delivery from your favorite stores.',
};

export default function ProfilePage() {
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        {/* Profile curved card with avatar and basic info */}
        <ProfileHeader />
        
        {/* Stats showcase */}
        <ProfileStats />
        
        {/* Content tabs with provider for shared state */}
        <div className="mt-8">
          <ProfileTabProvider>
            <ProfileTabs />
            <ProfileContent />
          </ProfileTabProvider>
        </div>
      </Container>
    </>
  );
}


================================================
File: src/app/profile/edit/page.js
================================================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';

export default function EditProfilePage() {
  const router = useRouter();
  
  // Mock user data - would be fetched from API in real app
  const [formData, setFormData] = useState({
    name: 'Sarah Johnson',
    email: 'sarah.j@example.com',
    phone: '+91 98765 43210',
    avatar: '/api/placeholder/400/400',
    dateOfBirth: '1992-05-15',
    gender: 'female',
    bio: 'Fashion enthusiast with a love for sustainable clothing and minimalist styles.'
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Handle form input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };
  
  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    // Simulate API call
    setTimeout(() => {
      setIsSubmitting(false);
      // Navigate back to profile page
      router.push('/profile');
    }, 1000);
  };
  
  // Handle cancel and return to profile
  const handleCancel = () => {
    router.push('/profile');
  };

  // Handle back button
  const handleBack = () => {
    router.push('/profile');
  };
  
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        <div className="my-6">
          {/* Back button */}
          <button 
            onClick={handleBack}
            className="flex items-center text-text-secondary hover:text-white mb-4 transition-colors"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
            Back to Profile
          </button>

          <h1 className="text-3xl font-display font-bold mb-1">
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
              Edit Profile
            </span>
          </h1>
          <p className="text-text-secondary">
            Update your personal information
          </p>
        </div>
        
        <Card variant="glass" className="p-6">
          {/* Form content remains the same */}
          <form onSubmit={handleSubmit}>
            <div className="flex flex-col md:flex-row gap-8 mb-8">
              {/* Avatar section */}
              <div className="flex flex-col items-center">
                <div className="w-32 h-32 rounded-full overflow-hidden glass mb-4">
                  <div 
                    className="w-full h-full bg-cover bg-center"
                    style={{ backgroundImage: `url(${formData.avatar})` }}
                  />
                </div>
                
                <Button variant="glass" size="sm">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  Change Photo
                </Button>
              </div>
              
              {/* Form fields */}
              <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Full Name</label>
                  <input 
                    type="text" 
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Email Address</label>
                  <input 
                    type="email" 
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Phone Number</label>
                  <input 
                    type="tel" 
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Date of Birth</label>
                  <input 
                    type="date" 
                    name="dateOfBirth"
                    value={formData.dateOfBirth}
                    onChange={handleChange}
                    className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Gender</label>
                  <select 
                    name="gender"
                    value={formData.gender}
                    onChange={handleChange}
                    className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  >
                    <option value="male">Male</option>
                    <option value="female">Female</option>
                    <option value="other">Other</option>
                    <option value="prefer-not-to-say">Prefer not to say</option>
                  </select>
                </div>
                
                <div className="md:col-span-2">
                  <label className="block text-sm font-medium mb-1">Bio</label>
                  <textarea 
                    name="bio"
                    value={formData.bio}
                    onChange={handleChange}
                    rows="4"
                    className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500 resize-none"
                  />
                </div>
              </div>
            </div>
            
            <div className="flex justify-end gap-4">
              <Button 
                type="button" 
                variant="glass"
                onClick={handleCancel}
              >
                Cancel
              </Button>
              
              <Button 
                type="submit" 
                variant="primary"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <div className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Saving...
                  </div>
                ) : 'Save Changes'}
              </Button>
            </div>
          </form>
        </Card>
      </Container>
    </>
  );
}


================================================
File: src/app/profile/settings/page.js
================================================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Badge from '@/components/ui/Badge';

export default function SettingsPage() {
  const router = useRouter();
  
  // Settings state
  const [settings, setSettings] = useState({
    notifications: {
      orderUpdates: true,
      promotions: true,
      deliveryAlerts: true,
      newArrivals: false,
      recommendations: true
    },
    privacy: {
      profileVisibility: 'public',
      activitySharing: true,
      dataCollection: 'limited'
    },
    appearance: {
      theme: 'dark',
      fontSize: 'medium',
      animationsEnabled: true
    }
  });
  
  // Handle toggle changes
  const handleToggleChange = (category, setting) => {
    setSettings({
      ...settings,
      [category]: {
        ...settings[category],
        [setting]: !settings[category][setting]
      }
    });
  };
  
  // Handle select changes
  const handleSelectChange = (category, setting, value) => {
    setSettings({
      ...settings,
      [category]: {
        ...settings[category],
        [setting]: value
      }
    });
  };
  
  // Handle form submission
  const handleSave = () => {
    // Simulate API call to save settings
    setTimeout(() => {
      // Navigate back to profile page
      router.push('/profile');
    }, 500);
  };
  
  // Handle cancel and return to profile
  const handleCancel = () => {
    router.push('/profile');
  };

  // Handle back button
  const handleBack = () => {
    router.push('/profile');
  };
  
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        <div className="my-6">
          {/* Back button */}
          <button 
            onClick={handleBack}
            className="flex items-center text-text-secondary hover:text-white mb-4 transition-colors"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
            Back to Profile
          </button>

          <h1 className="text-3xl font-display font-bold mb-1">
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
              Settings
            </span>
          </h1>
          <p className="text-text-secondary">
            Manage your account preferences
          </p>
        </div>
        
        <div className="space-y-6">
          {/* Notifications Settings */}
          <Card variant="glass" className="p-6">
            <h2 className="text-xl font-display font-bold mb-4">Notifications</h2>
            
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Order Updates</h3>
                  <p className="text-sm text-text-secondary">Get notified about status changes to your orders</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.orderUpdates} 
                    onChange={() => handleToggleChange('notifications', 'orderUpdates')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Promotions & Discounts</h3>
                  <p className="text-sm text-text-secondary">Receive notifications about deals and offers</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.promotions} 
                    onChange={() => handleToggleChange('notifications', 'promotions')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Delivery Alerts</h3>
                  <p className="text-sm text-text-secondary">Get real-time updates about your delivery status</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.deliveryAlerts} 
                    onChange={() => handleToggleChange('notifications', 'deliveryAlerts')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">New Arrivals</h3>
                  <p className="text-sm text-text-secondary">Stay updated on new products and collections</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.newArrivals} 
                    onChange={() => handleToggleChange('notifications', 'newArrivals')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Personalized Recommendations</h3>
                  <p className="text-sm text-text-secondary">Get product suggestions based on your preferences</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.recommendations} 
                    onChange={() => handleToggleChange('notifications', 'recommendations')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
            </div>
          </Card>
          
          {/* Privacy Settings */}
          <Card variant="glass" className="p-6">
            <h2 className="text-xl font-display font-bold mb-4">Privacy</h2>
            
            <div className="space-y-4">
              <div>
                <h3 className="font-medium mb-2">Profile Visibility</h3>
                <p className="text-sm text-text-secondary mb-3">Control who can see your profile information</p>
                
                <div className="flex gap-2">
                  <Button
                    variant={settings.privacy.profileVisibility === 'public' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'profileVisibility', 'public')}
                  >
                    Public
                  </Button>
                  <Button
                    variant={settings.privacy.profileVisibility === 'friends' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'profileVisibility', 'friends')}
                  >
                    Friends Only
                  </Button>
                  <Button
                    variant={settings.privacy.profileVisibility === 'private' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'profileVisibility', 'private')}
                  >
                    Private
                  </Button>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Activity Sharing</h3>
                  <p className="text-sm text-text-secondary">Share your shopping activity and reviews</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.privacy.activitySharing} 
                    onChange={() => handleToggleChange('privacy', 'activitySharing')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Data Collection</h3>
                <p className="text-sm text-text-secondary mb-3">Manage how we collect data to personalize your experience</p>
                
                <div className="flex gap-2">
                  <Button
                    variant={settings.privacy.dataCollection === 'full' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'dataCollection', 'full')}
                  >
                    Full Access
                  </Button>
                  <Button
                    variant={settings.privacy.dataCollection === 'limited' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'dataCollection', 'limited')}
                  >
                    Limited
                  </Button>
                  <Button
                    variant={settings.privacy.dataCollection === 'minimal' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'dataCollection', 'minimal')}
                  >
                    Minimal
                  </Button>
                </div>
              </div>
            </div>
          </Card>
          
          {/* Appearance Settings */}
          <Card variant="glass" className="p-6">
            <h2 className="text-xl font-display font-bold mb-4">Appearance</h2>
            
            <div className="space-y-4">
              <div>
                <h3 className="font-medium mb-2">Theme</h3>
                <div className="flex gap-2">
                  <Button
                    variant={settings.appearance.theme === 'light' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'theme', 'light')}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                    </svg>
                    Light
                  </Button>
                  <Button
                    variant={settings.appearance.theme === 'dark' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'theme', 'dark')}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                    </svg>
                    Dark
                  </Button>
                  <Button
                    variant={settings.appearance.theme === 'system' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'theme', 'system')}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                    System
                  </Button>
                </div>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Font Size</h3>
                <div className="flex gap-2">
                  <Button
                    variant={settings.appearance.fontSize === 'small' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'fontSize', 'small')}
                  >
                    Small
                  </Button>
                  <Button
                    variant={settings.appearance.fontSize === 'medium' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'fontSize', 'medium')}
                  >
                    Medium
                  </Button>
                  <Button
                    variant={settings.appearance.fontSize === 'large' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'fontSize', 'large')}
                  >
                    Large
                  </Button>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Enable Animations</h3>
                  <p className="text-sm text-text-secondary">Toggle UI animations and transitions</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.appearance.animationsEnabled} 
                    onChange={() => handleToggleChange('appearance', 'animationsEnabled')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
            </div>
          </Card>
          
          {/* Account Settings */}
          <Card variant="glass" className="p-6">
            <h2 className="text-xl font-display font-bold mb-4">Account</h2>
            
            <div className="space-y-4">
              <div>
                <Button 
                  variant="glass" 
                  className="w-full md:w-auto flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  Change Password
                </Button>
              </div>
              
              <div>
                <Button 
                  variant="glass" 
                  className="w-full md:w-auto flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                  Two-Factor Authentication
                </Button>
              </div>
              
              <div>
                <Button 
                  variant="glass" 
                  className="w-full md:w-auto text-red-500 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                  Delete Account
                </Button>
              </div>
            </div>
          </Card>
        </div>
        
        <div className="flex justify-end gap-4 mt-6">
          <Button 
            variant="glass"
            onClick={handleCancel}
          >
            Cancel
          </Button>
          
          <Button 
            variant="primary"
            onClick={handleSave}
          >
            Save Changes
          </Button>
        </div>
      </Container>
    </>
  );
}


================================================
File: src/app/reels/layout.js
================================================
import { ReelStoreProvider } from '@/components/reels/ReelStore';

export default function ReelsLayout({ children }) {
  return (
    <ReelStoreProvider>
      {children}
    </ReelStoreProvider>
  );
}


================================================
File: src/app/reels/loading.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import Card from '@/components/ui/Card';

export default function Loading() {
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        <div className="my-4 mb-6">
          <div className="h-10 w-52 glass animate-pulse rounded-lg mb-2"></div>
          <div className="h-5 w-64 glass animate-pulse rounded-lg"></div>
        </div>
        
        {/* Reels loading skeleton */}
        <div className="flex flex-col items-center">
          <Card variant="glass" className="w-full max-w-md h-[80vh] rounded-2xl overflow-hidden relative animate-pulse">
            <div className="absolute bottom-0 left-0 right-0 glass p-4">
              <div className="h-6 w-48 glass animate-pulse rounded-lg mb-3"></div>
              <div className="h-4 w-24 glass animate-pulse rounded-lg mb-3"></div>
              <div className="h-4 w-36 glass animate-pulse rounded-lg mb-2"></div>
              
              <div className="flex flex-wrap gap-2 mt-4">
                <div className="h-6 w-16 glass animate-pulse rounded-full"></div>
                <div className="h-6 w-24 glass animate-pulse rounded-full"></div>
                <div className="h-6 w-20 glass animate-pulse rounded-full"></div>
              </div>
            </div>
            
            {/* Floating action buttons */}
            <div className="absolute top-1/2 left-4 transform -translate-y-1/2">
              <div className="w-12 h-12 glass animate-pulse rounded-full"></div>
            </div>
            
            <div className="absolute top-1/2 right-4 transform -translate-y-1/2">
              <div className="w-12 h-12 glass animate-pulse rounded-full"></div>
            </div>
          </Card>
          
          <div className="mt-6 w-full max-w-md">
            <div className="flex justify-between">
              <div className="h-10 w-24 glass animate-pulse rounded-full"></div>
              <div className="h-10 w-24 glass animate-pulse rounded-full"></div>
            </div>
          </div>
        </div>
      </Container>
    </>
  );
}


================================================
File: src/app/reels/page.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import ReelsViewer from '@/components/reels/ReelsViewer';
import ReelsCategories from '@/components/reels/ReelsCategories';

export const metadata = {
  title: 'Fashion Reels | Trendzo - Fashion Delivered in 60 Minutes',
  description: 'Explore fashion reels and get inspired with 60-minute delivery from your favorite stores.',
};

export default function ReelsPage() {
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        <div className="my-4 mb-6">
          <h1 className="text-3xl font-display font-bold">
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
              Fashion Reels
            </span>
          </h1>
          <p className="text-text-secondary mt-1">
            Swipe through fashion inspiration and shop the look
          </p>
        </div>
        
        <ReelsCategories />
        
        <ReelsViewer />
      </Container>
    </>
  );
}


================================================
File: src/app/trending/loading.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import Card from '@/components/ui/Card';

export default function Loading() {
  // Create an array of 8 elements for the loading skeleton
  const skeletonItems = Array.from({ length: 8 }, (_, i) => i);
  
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-16">
        {/* Header skeleton */}
        <div className="my-6">
          <div className="h-10 w-64 glass animate-pulse rounded-lg mb-6"></div>
          
          <div className="w-full h-12 glass animate-pulse rounded-full mb-6"></div>
          
          <div className="flex items-center overflow-x-auto scrollbar-none pb-2">
            <div className="glass rounded-full px-1 py-1 flex items-center">
              {Array.from({ length: 4 }).map((_, index) => (
                <div key={index} className="h-10 w-24 mx-1 animate-pulse glass rounded-full"></div>
              ))}
            </div>
          </div>
          
          <div className="flex justify-between items-center mt-6 mb-2">
            <div className="h-6 w-48 glass animate-pulse rounded-lg"></div>
            
            <div className="h-10 w-36 glass animate-pulse rounded-full"></div>
          </div>
        </div>
        
        {/* Categories skeleton */}
        <div className="relative my-6">
          <div className="flex items-center gap-3 overflow-x-auto pb-1">
            {Array.from({ length: 6 }).map((_, index) => (
              <div 
                key={index}
                className="glass rounded-xl py-3 px-4 w-32 h-20 animate-pulse flex-shrink-0"
              ></div>
            ))}
          </div>
        </div>
        
        {/* Hashtags skeleton */}
        <div className="relative my-6">
          <div className="h-8 w-48 glass animate-pulse rounded-lg mb-4"></div>
          
          <div className="flex items-center gap-3 overflow-x-auto pb-1">
            {Array.from({ length: 5 }).map((_, index) => (
              <div 
                key={index}
                className="glass rounded-xl py-2 px-4 w-40 h-16 animate-pulse flex-shrink-0"
              ></div>
            ))}
          </div>
        </div>
        
        {/* Items grid skeleton */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-6">
          {skeletonItems.map((index) => (
            <Card 
              key={index}
              variant="glass" 
              className="overflow-hidden"
            >
              <div className="h-64 animate-pulse"></div>
              <div className="p-4">
                <div className="flex justify-between mb-2">
                  <div className="h-4 w-16 glass animate-pulse rounded-full"></div>
                  <div className="h-4 w-16 glass animate-pulse rounded-full"></div>
                </div>
                <div className="h-6 w-full glass animate-pulse rounded-lg mb-3"></div>
                <div className="h-6 w-24 glass animate-pulse rounded-lg"></div>
                
                <div className="flex flex-wrap gap-2 mt-3">
                  <div className="h-6 w-16 glass animate-pulse rounded-full"></div>
                  <div className="h-6 w-24 glass animate-pulse rounded-full"></div>
                </div>
              </div>
            </Card>
          ))}
        </div>
      </Container>
    </>
  );
}


================================================
File: src/app/trending/page.js
================================================
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import TrendingHeader from '@/components/trending/TrendingHeader';
import TrendingGrid from '@/components/trending/TrendingGrid';
import TrendingCategories from '@/components/trending/TrendingCategories';
import TrendingHashtags from '@/components/trending/TrendingHashtags';

export const metadata = {
  title: 'Trending Now | Trendzo - Fashion Delivered in 60 Minutes',
  description: 'Discover trending fashion items with 60-minute delivery from your favorite stores.',
};

export default function TrendingPage() {
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-16">
        <TrendingHeader />
        
        <TrendingCategories />
        
        {/* <TrendingHashtags /> */}
        
        <section className="mt-6">
          <TrendingGrid />
        </section>
      </Container>
    </>
  );
}


================================================
File: src/components/cart/CartHeader.js
================================================
'use client';

import { useState } from 'react';
import Button from '@/components/ui/Button';

const CartHeader = () => {
  return (
    <div className="my-6">
      <h1 className="text-3xl font-display font-bold mb-1">
        <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
          Your Cart
        </span>
      </h1>
      <p className="text-text-secondary">
        Complete your purchase and get it delivered in 60 minutes
      </p>
      
      <div className="flex justify-between items-center mt-6">
        <div className="text-sm text-text-secondary">
          
        </div>
        
        <Button
          variant="ghost"
          size="sm"
          className="flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
          </svg>
          Clear Cart
        </Button>
      </div>
    </div>
  );
};

export default CartHeader;


================================================
File: src/components/cart/CartItemCard.js
================================================
'use client';

import { useState } from 'react';
import Badge from '@/components/ui/Badge';

const CartItemCard = ({ item, updateQuantity, removeItem }) => {
  const [showActions, setShowActions] = useState(false);
  
  // Calculate discounted percentage if available
  const calculateDiscount = () => {
    if (!item.originalPrice) return null;
    const discount = ((item.originalPrice - item.price) / item.originalPrice) * 100;
    return Math.round(discount);
  };
  
  const discountPercent = calculateDiscount();
  
  return (
    <div 
      className="py-4 flex relative"
      onMouseEnter={() => setShowActions(true)}
      onMouseLeave={() => setShowActions(false)}
    >
      {/* Item image */}
      <div className="relative w-24 h-24 rounded-xl overflow-hidden glass">
        <div 
          className="absolute inset-0 bg-cover bg-center"
          style={{ backgroundImage: `url(${item.image})` }}
        />
        
        {discountPercent && (
          <div className="absolute top-1 left-1">
            <Badge variant="accent" size="sm">{discountPercent}% OFF</Badge>
          </div>
        )}
      </div>
      
      {/* Item details */}
      <div className="ml-4 flex-1">
        <div className="flex justify-between">
          <div>
            <h3 className="font-medium line-clamp-1">{item.name}</h3>
            <div className="text-xs text-text-secondary mt-1">{item.store} • {item.deliveryTime}</div>
            
            <div className="flex items-center mt-2 text-xs text-text-secondary">
              <div className="mr-3">Color: {item.color}</div>
              <div>Size: {item.size}</div>
            </div>
          </div>
          
          <div className="flex flex-col items-end">
            <div className="font-bold text-primary">₹{item.price.toFixed(2)}</div>
            {item.originalPrice && (
              <div className="text-xs text-text-secondary line-through">
                ₹{item.originalPrice.toFixed(2)}
              </div>
            )}
          </div>
        </div>
        
        <div className="flex items-center justify-between mt-3">
          {/* Quantity controls */}
          <div className="flex items-center glass rounded-full overflow-hidden">
            <button 
              className="w-8 h-8 flex items-center justify-center hover:bg-white/10"
              onClick={() => updateQuantity(item.id, item.quantity - 1)}
              disabled={item.quantity <= 1}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clipRule="evenodd" />
              </svg>
            </button>
            
            <div className="w-8 text-center font-medium">
              {item.quantity}
            </div>
            
            <button 
              className="w-8 h-8 flex items-center justify-center hover:bg-white/10"
              onClick={() => updateQuantity(item.id, item.quantity + 1)}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
              </svg>
            </button>
          </div>
          
          {/* Item total */}
          <div className="text-sm">
            Item total: <span className="font-bold">₹{(item.price * item.quantity).toFixed(2)}</span>
          </div>
        </div>
      </div>
      
      {/* Action buttons (visible on hover) */}
      <div 
        className={`absolute right-0 top-4 transition-opacity duration-200 ${
          showActions ? 'opacity-100' : 'opacity-0'
        }`}
      >
        <button 
          className="w-8 h-8 glass rounded-full flex items-center justify-center hover:bg-white/10"
          onClick={() => removeItem(item.id)}
          title="Remove item"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
          </svg>
        </button>
      </div>
    </div>
  );
};

export default CartItemCard;



================================================
File: src/components/cart/CartItems.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import CartItemCard from './CartItemCard';

const CartItems = () => {
  // Mock cart data
  const [cartItems, setCartItems] = useState([
    {
      id: 1,
      name: 'Oversized Cotton T-shirt',
      price: 1299,
      originalPrice: 1999,
      quantity: 1,
      store: 'Zara',
      deliveryTime: '25 min',
      color: 'White',
      size: 'M',
      image: '/api/placeholder/400/320',
    },
    {
      id: 2,
      name: 'High Rise Skinny Jeans',
      price: 2499,
      quantity: 1,
      store: 'H&M',
      deliveryTime: '30 min',
      color: 'Blue',
      size: '30',
      image: '/api/placeholder/400/320',
    },
    {
      id: 3,
      name: 'Air Max Sneakers',
      price: 7999,
      quantity: 1,
      store: 'Nike',
      deliveryTime: '35 min',
      color: 'Black/White',
      size: 'UK 9',
      image: '/api/placeholder/400/320',
    }
  ]);
  
  // Calculate totals
  const itemCount = cartItems.reduce((total, item) => total + item.quantity, 0);
  const subtotal = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);
  
  // Handle quantity change
  const updateQuantity = (itemId, newQuantity) => {
    if (newQuantity < 1) return;
    
    setCartItems(cartItems.map(item => 
      item.id === itemId ? { ...item, quantity: newQuantity } : item
    ));
  };
  
  // Handle remove item
  const removeItem = (itemId) => {
    setCartItems(cartItems.filter(item => item.id !== itemId));
  };
  
  return (
    <Card variant="glass" className="overflow-hidden">
      <div className="p-4">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-lg font-display font-bold">Cart Items ({itemCount})</h2>
          
          <div className="text-text-secondary text-sm">
            Total: ₹{subtotal.toFixed(2)}
          </div>
        </div>
        
        <div className="divide-y divide-white/10">
          {cartItems.length > 0 ? (
            cartItems.map(item => (
              <CartItemCard 
                key={item.id}
                item={item}
                updateQuantity={updateQuantity}
                removeItem={removeItem}
              />
            ))
          ) : (
            <div className="py-12 text-center">
              <div className="mb-4 mx-auto w-16 h-16 glass rounded-full flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-text-secondary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
              </div>
              <h3 className="text-lg font-bold mb-2">Your cart is empty</h3>
              <p className="text-text-secondary mb-6">Add items to your cart to see them here</p>
              <Button variant="primary">
                Continue Shopping
              </Button>
            </div>
          )}
        </div>
      </div>
    </Card>
  );
};

export default CartItems;



================================================
File: src/components/cart/CartSummary.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';

const CartSummary = () => {
  // Mock data
  const [summary, setSummary] = useState({
    subtotal: 11797, // Product cost sum
    delivery: 40,    // Delivery fee
    tax: 215,        // Taxes
    discount: 700,   // Discount applied
    total: 11352     // Final amount
  });
  
  // Format currency
  const formatPrice = (price) => {
    return `₹${price.toFixed(2)}`;
  };
  
  return (
    <Card variant="glass" className="sticky top-4">
      <div className="p-4">
        <h2 className="text-lg font-display font-bold mb-6">Order Summary</h2>
        
        <div className="space-y-3">
          <div className="flex justify-between">
            <span className="text-text-secondary">Subtotal</span>
            <span>{formatPrice(summary.subtotal)}</span>
          </div>
          
          <div className="flex justify-between">
            <span className="text-text-secondary">Delivery</span>
            <span>{formatPrice(summary.delivery)}</span>
          </div>
          
          <div className="flex justify-between">
            <span className="text-text-secondary">Taxes</span>
            <span>{formatPrice(summary.tax)}</span>
          </div>
          
          {summary.discount > 0 && (
            <div className="flex justify-between">
              <span className="text-accent">Discount</span>
              <span className="text-accent">-{formatPrice(summary.discount)}</span>
            </div>
          )}
        </div>
        
        <div className="my-4 pt-4 border-t border-white/10">
          <div className="flex justify-between text-lg">
            <span className="font-display font-bold">Total</span>
            <span className="font-bold">{formatPrice(summary.total)}</span>
          </div>
          
          <div className="text-xs text-text-secondary mt-1">
            Inclusive of all taxes
          </div>
        </div>
        
        <div className="mt-6">
          <Button 
            variant="primary" 
            size="lg" 
            fullWidth
            className="bg-gradient-to-r from-purple-500 to-cyan-400 hover:from-purple-600 hover:to-cyan-500"
          >
            Proceed to Checkout
          </Button>
          
          <div className="flex items-center justify-center mt-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-success mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
            </svg>
            <span className="text-xs text-text-secondary">
              100% Secure Checkout
            </span>
          </div>
          
          <div className="flex items-center justify-center space-x-2 mt-3">
            <div className="glass rounded-md px-2 py-1">
              <svg className="h-5 w-8" viewBox="0 0 48 30" fill="none">
                <rect width="48" height="30" rx="4" fill="#2C2C2C"/>
                <path d="M18.5 19.5C21.5376 19.5 24 17.0376 24 14C24 10.9624 21.5376 8.5 18.5 8.5C15.4624 8.5 13 10.9624 13 14C13 17.0376 15.4624 19.5 18.5 19.5Z" fill="#EB001B"/>
                <path d="M29.5 19.5C32.5376 19.5 35 17.0376 35 14C35 10.9624 32.5376 8.5 29.5 8.5C26.4624 8.5 24 10.9624 24 14C24 17.0376 26.4624 19.5 29.5 19.5Z" fill="#F79E1B"/>
                <path d="M24 10.2539C25.0819 11.1937 25.7628 12.5254 25.7628 14.0004C25.7628 15.4754 25.0819 16.8071 24 17.7469C22.9181 16.8071 22.2372 15.4754 22.2372 14.0004C22.2372 12.5254 22.9181 11.1937 24 10.2539Z" fill="#FF5F00"/>
              </svg>
            </div>
            <div className="glass rounded-md px-2 py-1">
              <svg className="h-5 w-8" viewBox="0 0 48 30" fill="none">
                <rect width="48" height="30" rx="4" fill="#2C2C2C"/>
                <path d="M17 19.2143H14.1429V10.7857H17V19.2143ZM15.5714 9.57143C14.6429 9.57143 13.8571 8.78571 13.8571 7.85714C13.8571 6.92857 14.6429 6.14286 15.5714 6.14286C16.5 6.14286 17.2857 6.92857 17.2857 7.85714C17.2857 8.78571 16.5 9.57143 15.5714 9.57143ZM24.7143 19.2143H21.8571V15C21.8571 13.7857 21.8571 12.2857 20.2143 12.2857C18.5714 12.2857 18.2857 13.5714 18.2857 14.8571V19.2143H15.4286V10.7857H18.1429V12C18.7143 11.1429 19.7143 10.5 21.2143 10.5C24.1429 10.5 24.7143 12.5714 24.7143 15.2857V19.2143Z" fill="white"/>
                <path d="M32.2857 13C34.1429 13 35.7143 11.4286 35.7143 9.57143C35.7143 7.71429 34.1429 6.14286 32.2857 6.14286C30.4286 6.14286 28.8571 7.71429 28.8571 9.57143C28.8571 11.4286 30.4286 13 32.2857 13ZM32.2857 7.57143C33.2857 7.57143 34.1429 8.42857 34.1429 9.42857C34.1429 10.4286 33.2857 11.2857 32.2857 11.2857C31.2857 11.2857 30.4286 10.4286 30.4286 9.42857C30.4286 8.42857 31.2857 7.57143 32.2857 7.57143Z" fill="#00A1DF"/>
                <path d="M34.7143 23.8571H29.8571C28.5714 23.8571 27.8571 23.1429 27.8571 21.8571V14.7143H29.4286V21.8571C29.4286 22.2857 29.5714 22.4286 30 22.4286H34.5714C35 22.4286 35.1429 22.2857 35.1429 21.8571V14.7143H36.7143V21.8571C36.7143 23.1429 36 23.8571 34.7143 23.8571Z" fill="#00A1DF"/>
                <path d="M32.2857 19.8571C31.7143 19.8571 31.1429 19.7143 30.7143 19.4286L31.2857 18.1429C31.5714 18.2857 31.8571 18.4286 32.2857 18.4286C33 18.4286 33.4286 17.8571 33.4286 17V14.7143H35V17C35 18.7143 33.8571 19.8571 32.2857 19.8571Z" fill="#00A1DF"/>
                <path d="M34.5714 17H30V15.5714H34.5714V17Z" fill="#00A1DF"/>
              </svg>
            </div>
            <div className="glass rounded-md px-2 py-1">
              <svg className="h-5 w-8" viewBox="0 0 48 30" fill="none">
                <rect width="48" height="30" rx="4" fill="#2C2C2C"/>
                <path d="M18.9 13.1H16V20H18.9C21.4 20 23 18.2 23 16.5C23.1 14.8 21.4 13.1 18.9 13.1ZM18.9 18.1H18.2V15H18.9C20.1 15 20.8 15.8 20.8 16.5C20.8 17.3 20.1 18.1 18.9 18.1Z" fill="#0079BE"/>
                <path d="M24.1 20H26.3V16.7H28.9L30.2 13.1H26.3V13.9C26.3 14.5 26.8 14.9 27.4 14.9H28.1V13.1H27.8C26 13.1 24.2 14.5 24.2 16.1V20H24.1Z" fill="#0079BE"/>
                <path d="M32.0001 13.0996V15.8996C31.3001 15.2996 30.0001 15.0996 30.0001 15.0996L30.8001 17.4996C30.8001 17.4996 31.6001 17.3996 32.0001 17.8996C32.2001 18.1996 32.2001 18.4996 32.0001 18.7996C31.8001 19.0996 31.5001 19.1996 31.1001 19.1996C30.7001 19.1996 30.3001 19.0996 30.0001 18.8996L29.6001 19.9996C29.6001 19.9996 30.4001 20.3996 31.4001 20.1996C32.5001 19.9996 33.1001 18.9996 33.0001 17.9996C33.0001 15.9996 32.0001 13.0996 32.0001 13.0996Z" fill="#0079BE"/>
              </svg>
            </div>
            <div className="glass rounded-md px-2 py-1">
              <svg className="h-5 w-8" viewBox="0 0 48 30" fill="none">
                <rect width="48" height="30" rx="4" fill="#2C2C2C"/>
                <path d="M19.4445 13.7773H17V19.9996H19.4445V13.7773Z" fill="#3C58BF"/>
                <path d="M19.4445 13.7773H17V19.9996H19.4445V13.7773Z" fill="#293688"/>
                <path d="M28.1111 14.0001L27.7778 14.0001C27.4444 14.1112 26.8889 14.3334 26.5556 14.8889C26.5556 14.8889 25.3333 15.6667 24.5556 16.5556C24.3333 16.7778 24.1111 17.1112 24 17.3334V14.0001H21.5556V20.0001H24V18.4445C24 18.1112 24.2222 17.7778 24.5556 17.7778H25.7778C26.1111 17.7778 26.3333 18.0001 26.3333 18.4445V20.0001H28.7778V17.8889C28.7778 17.4445 28.6667 17.1112 28.4444 16.8889C28.7778 16.5556 29.2222 16.0001 29.2222 15.3334C29.3333 14.5556 28.7778 14.2223 28.1111 14.0001Z" fill="#3C58BF"/>
                <path d="M28.1111 14.0001L27.7778 14.0001C27.4444 14.1112 26.8889 14.3334 26.5556 14.8889C26.5556 14.8889 25.3333 15.6667 24.5556 16.5556C24.3333 16.7778 24.1111 17.1112 24 17.3334V14.0001H21.5556V20.0001H24V18.4445C24 18.1112 24.2222 17.7778 24.5556 17.7778H25.7778C26.1111 17.7778 26.3333 18.0001 26.3333 18.4445V20.0001H28.7778V17.8889C28.7778 17.4445 28.6667 17.1112 28.4444 16.8889C28.7778 16.5556 29.2222 16.0001 29.2222 15.3334C29.3333 14.5556 28.7778 14.2223 28.1111 14.0001Z" fill="#293688"/>
                <path d="M20.3333 10.1112C19.1111 10.1112 18.1111 10.7778 18.1111 10.7778V13.3334L19.4444 13.7778V12.4445C19.4444 12.1112 19.7778 11.7778 20.1111 11.7778C20.4444 11.7778 20.7778 12.0001 20.7778 12.3334V13.7778L22.1111 13.3334V11.8889C22.3333 10.8889 21.3333 10.1112 20.3333 10.1112Z" fill="#3C58BF"/>
                <path d="M20.3333 10.1112C19.1111 10.1112 18.1111 10.7778 18.1111 10.7778V13.3334L19.4444 13.7778V12.4445C19.4444 12.1112 19.7778 11.7778 20.1111 11.7778C20.4444 11.7778 20.7778 12.0001 20.7778 12.3334V13.7778L22.1111 13.3334V11.8889C22.3333 10.8889 21.3333 10.1112 20.3333 10.1112Z" fill="#293688"/>
                <path d="M27.3333 10.2223C26.1111 10.2223 25.4444 11.1112 25.3333 12.1112V13.3334L26.6667 13.7778V12.5556C26.6667 12.2223 26.8889 11.8889 27.2222 11.8889C27.5556 11.8889 27.7778 12.1112 27.7778 12.4445V13.7778L29.1111 13.3334V11.8889C29.3333 10.8889 28.4444 10.2223 27.3333 10.2223Z" fill="#3C58BF"/>
                <path d="M27.3333 10.2223C26.1111 10.2223 25.4444 11.1112 25.3333 12.1112V13.3334L26.6667 13.7778V12.5556C26.6667 12.2223 26.8889 11.8889 27.2222 11.8889C27.5556 11.8889 27.7778 12.1112 27.7778 12.4445V13.7778L29.1111 13.3334V11.8889C29.3333 10.8889 28.4444 10.2223 27.3333 10.2223Z" fill="#293688"/>
                <path d="M31.5556 13.1112C31 12.1112 30.4444 11.2223 29.3333 10.2223C28.4444 9.33341 27.1111 9.00008 25.4444 9.00008H23.2222C22.7778 9.00008 22.3333 9.11119 21.8889 9.33341C22.5556 9.22231 23.3333 9.11119 24.3333 9.11119C25.4444 9.11119 27 9.44453 28.2222 10.7778C29.1111 11.6667 29.8889 13.0001 30.1111 13.8889L31.5556 13.1112Z" fill="#FFBC00"/>
                <path d="M25.1111 9.00008C23.5556 9.00008 22 9.44453 20.7778 10.7778C19.7778 11.7778 19.2222 13.0001 19 13.8889L17.5556 13.2223C18.1111 12.2223 18.6667 11.2223 19.7778 10.2223C20.6667 9.33341 22 9.00008 23.6667 9.00008H25.8889C26.3333 9.00008 26.7778 9.11119 27.2222 9.33341C26.5556 9.11119 25.8889 9.00008 25.1111 9.00008Z" fill="#F7981D"/>
                <path d="M18.6667 16.7779C18.6667 14.7779 19.6667 13.0001 21.2222 12.0001C20.4444 11.7779 19.5556 12.0001 19 12.4445C18.2222 13.1112 17.4444 14.0001 17 14.8889H17.4444C18.2222 15.5556 18.6667 16.2223 18.6667 16.7779Z" fill="#293688"/>
                <path d="M30.8889 14.1112C30.4444 13.8889 30 13.7778 29.5556 13.6667C29.3333 13.6667 29.1111 13.5556 29 13.5556C28.7778 13.5556 28.5556 13.5556 28.3333 13.6667C26.2222 14.3334 24.5556 16.1112 24.1111 18.3334C24.6667 18.7778 25.4444 19.0001 26.3333 18.7778C27.2222 18.5556 27.7778 17.8889 28.1111 17.3334C28.2222 17.1112 28.3333 16.8889 28.4444 16.7778C28.6667 17.1112 28.7778 17.4445 28.7778 17.8889V20.0001H31.1111V16.1112C31.3333 15.1112 31.1111 14.4445 30.8889 14.1112Z" fill="#3C58BF"/>
                <path d="M30.6667 14.0001C30.3333 13.7778 29.7778 13.6667 29.3333 13.5556C29.1111 13.5556 28.8889 13.4445 28.6667 13.4445C28.4444 13.4445 28.2222 13.4445 28 13.5556C25.8889 14.2223 24.3333 16.0001 23.8889 18.2223C24.4444 18.6667 25.1111 18.8889 26 18.6667C26.8889 18.4445 27.5556 17.7778 27.8889 17.2223C28 17.0001 28.1111 16.7778 28.2222 16.6667C28.4444 17.0001 28.5556 17.3334 28.5556 17.7778V19.8889H31V16.0001C31.1111 15.1112 30.8889 14.3334 30.6667 14.0001Z" fill="#293688"/>
              </svg>
            </div>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default CartSummary;


================================================
File: src/components/cart/DeliveryOptions.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';

const DeliveryOptions = () => {
  const [selectedOption, setSelectedOption] = useState('express');
  
  // Delivery options
  const options = [
    {
      id: 'express',
      title: 'Express Delivery',
      time: '60 min',
      price: 40,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
      )
    },
    {
      id: 'standard',
      title: 'Standard Delivery',
      time: '3-4 hours',
      price: 20,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
        </svg>
      )
    },
    {
      id: 'scheduled',
      title: 'Scheduled Delivery',
      time: 'Choose time',
      price: 30,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      )
    }
  ];
  
  return (
    <Card variant="glass">
      <div className="p-4">
        <h3 className="text-lg font-display font-bold mb-4">Delivery Options</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {options.map((option) => (
            <div 
              key={option.id}
              className={`relative rounded-xl overflow-hidden transition-all duration-300 cursor-pointer ${
                selectedOption === option.id 
                  ? 'border-2 border-purple-500 bg-purple-500/10'
                  : 'glass hover:-translate-y-1'
              }`}
              onClick={() => setSelectedOption(option.id)}
            >
              <div className="p-4">
                <div className="flex items-center mb-2">
                  <div className={`${selectedOption === option.id ? 'text-purple-500' : 'text-text-secondary'}`}>
                    {option.icon}
                  </div>
                  
                  {selectedOption === option.id && (
                    <div className="absolute top-2 right-2 w-5 h-5 bg-purple-500 rounded-full flex items-center justify-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 text-white" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    </div>
                  )}
                </div>
                
                <h4 className="font-bold">{option.title}</h4>
                <div className="text-sm text-text-secondary">{option.time}</div>
                <div className="mt-2 font-medium">₹{option.price.toFixed(2)}</div>
              </div>
            </div>
          ))}
        </div>
        
        {selectedOption === 'scheduled' && (
          <div className="mt-4 glass p-3 rounded-lg">
            <label className="text-sm font-medium mb-2 block">Choose Delivery Time</label>
            <div className="grid grid-cols-2 gap-3">
              <select className="glass rounded-lg bg-transparent px-3 py-2 focus:outline-none border-none">
                <option>Today</option>
                <option>Tomorrow</option>
                <option>Day after tomorrow</option>
              </select>
              
              <select className="glass rounded-lg bg-transparent px-3 py-2 focus:outline-none border-none">
                <option>10:00 AM - 12:00 PM</option>
                <option>12:00 PM - 02:00 PM</option>
                <option>02:00 PM - 04:00 PM</option>
                <option>04:00 PM - 06:00 PM</option>
                <option>06:00 PM - 08:00 PM</option>
              </select>
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};

export default DeliveryOptions;


================================================
File: src/components/cart/PromoCodeInput.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';

const PromoCodeInput = () => {
  const [promoCode, setPromoCode] = useState('');
  const [appliedPromo, setAppliedPromo] = useState(null);
  const [isApplying, setIsApplying] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  
  // Handle input change
  const handleChange = (e) => {
    setPromoCode(e.target.value.toUpperCase());
    setErrorMessage('');
  };
  
  // Apply promo code
  const applyPromoCode = () => {
    if (!promoCode) {
      setErrorMessage('Please enter a promo code');
      return;
    }
    
    setIsApplying(true);
    
    // Simulate API call
    setTimeout(() => {
      // Check if it's a valid code (mocked)
      if (promoCode === 'WELCOME50' || promoCode === 'TRENDZO20') {
        const discount = promoCode === 'WELCOME50' ? 
          { code: 'WELCOME50', discount: '50% off up to ₹200', value: 200 } : 
          { code: 'TRENDZO20', discount: '20% off up to ₹100', value: 100 };
          
        setAppliedPromo(discount);
        setPromoCode('');
      } else {
        setErrorMessage('Invalid or expired promo code');
      }
      
      setIsApplying(false);
    }, 800);
  };
  
  // Remove applied promo
  const removePromo = () => {
    setAppliedPromo(null);
  };
  
  return (
    <Card variant="glass">
      <div className="p-4">
        <h3 className="text-lg font-display font-bold mb-4">Apply Promo Code</h3>
        
        {appliedPromo ? (
          <div className="glass p-3 rounded-lg">
            <div className="flex justify-between items-center">
              <div className="flex items-center">
                <div className="bg-gradient-to-r from-purple-500 to-cyan-400 w-8 h-8 rounded-lg flex items-center justify-center mr-3">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                </div>
                <div>
                  <div className="font-bold">{appliedPromo.code}</div>
                  <div className="text-xs text-text-secondary">{appliedPromo.discount}</div>
                </div>
              </div>
              
              <button 
                className="text-red-400 hover:text-red-300 text-sm"
                onClick={removePromo}
              >
                Remove
              </button>
            </div>
          </div>
        ) : (
          <>
            <div className="flex">
              <div className="relative flex-grow">
                <input
                  type="text"
                  value={promoCode}
                  onChange={handleChange}
                  placeholder="Enter promo code"
                  className="w-full glass rounded-l-full px-4 py-3 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                />
                {errorMessage && (
                  <div className="absolute -bottom-6 left-0 text-xs text-red-400">
                    {errorMessage}
                  </div>
                )}
              </div>
              
              <Button
                variant="primary"
                className="rounded-r-full px-6"
                onClick={applyPromoCode}
                disabled={isApplying}
              >
                {isApplying ? (
                  <div className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Applying
                  </div>
                ) : (
                  "Apply"
                )}
              </Button>
            </div>
            
            <div className="mt-4">
              <div className="text-sm font-medium mb-2">Available Coupons</div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                <div className="coupon-card">
                  <div className="flex-1">
                    <div className="text-lg font-bold mb-1">WELCOME50</div>
                    <div className="text-xs text-text-secondary">50% off up to ₹200 on first order</div>
                  </div>
                  
                  <div className="coupon-dashed"></div>
                  
                  <button 
                    className="text-sm text-primary font-medium"
                    onClick={() => {
                      setPromoCode('WELCOME50');
                      applyPromoCode();
                    }}
                  >
                    Apply
                  </button>
                </div>
                
                <div className="coupon-card">
                  <div className="flex-1">
                    <div className="text-lg font-bold mb-1">TRENDZO20</div>
                    <div className="text-xs text-text-secondary">20% off up to ₹100 on all orders</div>
                  </div>
                  
                  <div className="coupon-dashed"></div>
                  
                  <button 
                    className="text-sm text-primary font-medium"
                    onClick={() => {
                      setPromoCode('TRENDZO20');
                      applyPromoCode();
                    }}
                  >
                    Apply
                  </button>
                </div>
              </div>
            </div>
          </>
        )}
      </div>
    </Card>
  );
};

export default PromoCodeInput;


================================================
File: src/components/cart/RecommendedItems.js
================================================
'use client';

import { useRef } from 'react';
import ProductCard from '@/components/home/ProductCard';

const RecommendedItems = () => {
  const scrollRef = useRef(null);
  
  // Mock recommended products data
  const products = [
    {
      id: 1,
      name: 'Tie-Dye Sweatshirt',
      price: 1899,
      store: 'Zara',
      deliveryTime: '25 min',
      rating: 4.5,
      isNew: true,
      images: [
        '/api/placeholder/400/320',
        '/api/placeholder/400/320',
      ],
    },
    {
      id: 2,
      name: 'Leather Cross-body Bag',
      price: 2499,
      originalPrice: 3499,
      store: 'Mango',
      deliveryTime: '45 min',
      rating: 4.8,
      isNew: false,
      images: [
        '/api/placeholder/400/320',
        '/api/placeholder/400/320',
      ],
    },
    {
      id: 3,
      name: 'Wide Leg Trousers',
      price: 2799,
      store: 'Uniqlo',
      deliveryTime: '40 min',
      rating: 4.6,
      isNew: false,
      images: [
        '/api/placeholder/400/320',
        '/api/placeholder/400/320',
      ],
    },
    {
      id: 4,
      name: 'Canvas Slip-on Shoes',
      price: 3999,
      store: 'Vans',
      deliveryTime: '35 min',
      rating: 4.7,
      isNew: true,
      images: [
        '/api/placeholder/400/320',
        '/api/placeholder/400/320',
      ],
    },
    {
      id: 5,
      name: 'Printed Kimono',
      price: 1899,
      originalPrice: 2499,
      store: 'FabIndia',
      deliveryTime: '50 min',
      rating: 4.4,
      isNew: false,
      images: [
        '/api/placeholder/400/320',
        '/api/placeholder/400/320',
      ],
    },
  ];
  
  // Handle horizontal scrolling with buttons
  const scroll = (direction) => {
    if (scrollRef.current) {
      const { current } = scrollRef;
      const scrollAmount = direction === 'left' ? -300 : 300;
      current.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };
  
  return (
    <div className="relative">
      <div 
        className="flex items-stretch gap-4 overflow-x-auto py-2 scrollbar-none" 
        ref={scrollRef}
      >
        {products.map((product) => (
          <div key={product.id} className="w-64 flex-shrink-0">
            <ProductCard product={product} />
          </div>
        ))}
      </div>
      
      <button 
        className="absolute left-0 top-1/2 -translate-y-1/2 w-8 h-8 neomorph rounded-full flex items-center justify-center z-10"
        onClick={() => scroll('left')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
        </svg>
      </button>
      
      <button 
        className="absolute right-0 top-1/2 -translate-y-1/2 w-8 h-8 neomorph rounded-full flex items-center justify-center z-10"
        onClick={() => scroll('right')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
        </svg>
      </button>
    </div>
  );
};

export default RecommendedItems;


================================================
File: src/components/cart/WishlistSection.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Badge from '@/components/ui/Badge';
import Button from '@/components/ui/Button';

const WishlistSection = () => {
  // Mock wishlist data
  const [wishlistItems, setWishlistItems] = useState([
    {
      id: 1,
      name: 'Floral Print Maxi Dress',
      price: 3599,
      originalPrice: 4999,
      store: 'Mango',
      deliveryTime: '45 min',
      image: '/api/placeholder/400/320',
    },
    {
      id: 2,
      name: 'Chunky Platform Sneakers',
      price: 4999,
      store: 'Nike',
      deliveryTime: '35 min',
      image: '/api/placeholder/400/320',
    },
    {
      id: 3,
      name: 'Oversized Denim Jacket',
      price: 2999,
      originalPrice: 3999,
      store: 'Zara',
      deliveryTime: '25 min',
      image: '/api/placeholder/400/320',
    }
  ]);
  
  // Handle remove from wishlist
  const removeFromWishlist = (itemId) => {
    setWishlistItems(wishlistItems.filter(item => item.id !== itemId));
  };
  
  // Format currency
  const formatPrice = (price) => {
    return `₹${price.toFixed(2)}`;
  };
  
  // Calculate discount percentage
  const calculateDiscount = (item) => {
    if (!item.originalPrice) return null;
    const discount = ((item.originalPrice - item.price) / item.originalPrice) * 100;
    return Math.round(discount);
  };
  
  return (
    <Card variant="glass">
      <div className="p-4">
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-display font-bold">Your Wishlist</h3>
          
          <Button 
            variant="ghost" 
            size="sm"
            className="text-primary"
          >
            View All
          </Button>
        </div>
        
        {wishlistItems.length === 0 ? (
          <div className="text-center py-6">
            <div className="mb-4 mx-auto w-16 h-16 glass rounded-full flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-text-secondary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
            </div>
            <h4 className="text-lg font-bold mb-2">Your wishlist is empty</h4>
            <p className="text-text-secondary mb-4">Save items you like to your wishlist</p>
            <Button variant="primary" size="sm">
              Browse Products
            </Button>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {wishlistItems.map((item) => {
              const discountPercent = calculateDiscount(item);
              
              return (
                <Card 
                  key={item.id}
                  variant="glass" 
                  className="overflow-hidden transition-all duration-300 hover:-translate-y-1"
                >
                  <div className="relative">
                    <div className="relative h-40 bg-cover bg-center" style={{ backgroundImage: `url(${item.image})` }}>
                      {discountPercent && (
                        <div className="absolute top-2 right-2">
                          <Badge variant="accent" size="sm">{discountPercent}% OFF</Badge>
                        </div>
                      )}
                      
                      <div className="absolute bottom-0 left-0 right-0 glass px-2 py-1 flex justify-between items-center text-xs">
                        <span>{item.store}</span>
                        <span>{item.deliveryTime}</span>
                      </div>
                    </div>
                    
                    <div className="p-3">
                      <h4 className="font-medium text-sm line-clamp-1">{item.name}</h4>
                      
                      <div className="flex justify-between items-center mt-2">
                        <div>
                          <span className="font-bold text-sm text-primary">{formatPrice(item.price)}</span>
                          {item.originalPrice && (
                            <span className="text-xs text-text-secondary line-through ml-1">
                              {formatPrice(item.originalPrice)}
                            </span>
                          )}
                        </div>
                        
                        <div className="flex">
                          <button 
                            className="w-7 h-7 glass rounded-full flex items-center justify-center hover:bg-white/10 mr-1"
                            onClick={() => removeFromWishlist(item.id)}
                            title="Remove from wishlist"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                              <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
                            </svg>
                          </button>
                          
                          <button 
                            className="w-7 h-7 bg-purple-500 rounded-full flex items-center justify-center"
                            title="Add to cart"
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                            </svg>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </Card>
              );
            })}
          </div>
        )}
      </div>
    </Card>
  );
};

export default WishlistSection;


================================================
File: src/components/home/CategoryNav.js
================================================
'use client';

import Card from '@/components/ui/Card';

const CategoryNav = () => {
  // Visual category tiles matching the image
  const categoryTiles = [
    {
      id: 'deal',
      label: 'UP TO 40% OFF',
      subtext: 'selected products',
      tag: 'Online Exclusive',
      image: '/api/placeholder/400/320',
      bgColor: 'bg-gradient-to-br from-blue-500 to-indigo-600',
      textColor: 'text-white',
      textSize: 'text-2xl md:text-3xl',
      highlight: true,
    },
    {
      id: 'summer-shirts',
      label: 'SUMMER SHIRTS',
      image: 'https://tse3.mm.bing.net/th?id=OIP.zHVzhVe4pTzhGgkaf8JLjwAAAA&w=448&h=448&c=7',
      bgColor: 'bg-orange-50',
      textColor: 'text-white',
      textSize: 'text-xl md:text-2xl',
    },
    {
      id: 'check-shirts',
      label: 'CHECK SHIRTS',
      image: 'https://tse3.mm.bing.net/th?id=OIP.3TS7k42yqMRMA1DGWLx3eAHaJh&w=474&h=474&c=7',
      bgColor: 'bg-blue-50',
      textColor: 'text-white',
      textSize: 'text-xl md:text-2xl',
    },
    {
      id: 'trousers',
      label: 'TROUSERS',
      image: 'https://www.simonjersey.com/images/contemporary-womens-straight-leg-trouser-unhemmed-length-grey-p2026-243588_image.jpg',
      bgColor: 'bg-green-50',
      textColor: 'text-white',
      textSize: 'text-xl md:text-2xl',
    },
    {
      id: 'jeans',
      label: 'JEANS',
      image: 'https://tse3.mm.bing.net/th?id=OIP.ka1D1JNPLTIgTQBFRfRHggHaJ4&w=474&h=474&c=7',
      bgColor: 'bg-purple-50',
      textColor: 'text-white',
      textSize: 'text-xl md:text-2xl',
    },
    {
      id: 'tshirts',
      label: 'BASIC T-SHIRTS',
      image: 'https://tse4.mm.bing.net/th?id=OIP.ZYHzmXkieClq6dQxU54uuQAAAA&w=474&h=474&c=7',
      bgColor: 'bg-yellow-50',
      textColor: 'text-white',
      textSize: 'text-xl md:text-2xl',
    },
  ];
  
  return (
    <div className="my-6">
      {/* Section header with "See all categories" button */}
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-display font-bold">Categories</h2>
        <button className="text-primary text-sm font-medium">See all categories</button>
      </div>
      
      {/* Category visual grid - 2 items per row on mobile, 3 on larger screens */}
      <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
        {categoryTiles.map((tile) => (
          <Card 
            key={tile.id}
            variant="glass" 
            hover 
            className="relative overflow-hidden h-40 md:h-56 cursor-pointer"
          >
            <div 
              className="absolute inset-0 bg-cover bg-center"
              style={{
                backgroundImage: `url(${tile.image})`,
              }}
            />
            
            {/* Gradient overlay */}
            <div className={`absolute inset-0 ${
              tile.highlight 
                ? tile.bgColor 
                : 'bg-gradient-to-t from-black/70 to-transparent'
            }`} />
            
            {/* Content */}
            <div className="absolute inset-0 p-3 md:p-4 flex flex-col">
              {tile.tag && (
                <div className="text-xs md:text-sm mb-1 mt-auto">
                  {tile.tag}
                </div>
              )}
              
              <div className={`${tile.textSize} font-display font-bold ${tile.highlight ? tile.textColor : 'text-white'}`}>
                {tile.label}
              </div>
              
              {tile.subtext && (
                <div className="text-sm md:text-base mt-1">
                  {tile.subtext}
                </div>
              )}
              
              {tile.highlight && (
                <div className="absolute top-2 left-2 md:top-3 md:left-3">
                  <div className="bg-red-500 text-white text-xs md:text-sm font-bold px-2 py-1 rounded-lg shadow-lg transform rotate-0 scale-100 animate-pulse">
                    SNATCH DEAL
                  </div>
                </div>
              )}
            </div>
          </Card>
        ))}
      </div>
    </div>
  );
};

export default CategoryNav;


================================================
File: src/components/home/HeroSection.js
================================================
'use client';

import { useState, useEffect } from 'react';
import Button from '@/components/ui/Button';

const HeroSection = () => {
  const [activeTab, setActiveTab] = useState('trendzo');
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  
  const tabs = [
    { id: 'trendzo', label: 'TRENDZO' },
    { id: 'local', label: 'LOCAL' },
    { id: 'all', label: 'ALL BRANDS' }
  ];
  
  // Track mouse movement for parallax effect
  useEffect(() => {
    const handleMouseMove = (e) => {
      setMousePosition({
        x: e.clientX / window.innerWidth,
        y: e.clientY / window.innerHeight
      });
    };
    
    window.addEventListener('mousemove', handleMouseMove);
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);
  
  return (
    <section className="relative -mt-6 overflow-hidden">
      {/* Creative animated background */}
      <div className="glass rounded-2xl overflow-hidden mt-12">
        <div className="relative h-[75vh] min-h-[560px]">
          {/* Dynamic background with animated shapes and gradients */}
          <div className="absolute inset-0 bg-gradient-to-br from-indigo-900 via-purple-900 to-violet-950">
            {/* Animated shape 1 - Large circle with glow */}
            <div 
              className="absolute rounded-full w-96 h-96 bg-gradient-to-r from-pink-500 to-indigo-500 blur-3xl opacity-20 animate-pulse"
              style={{ 
                left: `calc(20% + ${mousePosition.x * 40}px)`, 
                top: `calc(30% + ${mousePosition.y * 40}px)` 
              }}
            ></div>
            
            {/* Animated shape 2 - Smaller circle with different color */}
            <div 
              className="absolute rounded-full w-64 h-64 bg-gradient-to-r from-blue-400 to-teal-400 blur-3xl opacity-20 animate-pulse"
              style={{ 
                right: `calc(25% + ${mousePosition.x * -30}px)`, 
                bottom: `calc(20% + ${mousePosition.y * -30}px)`,
                animationDelay: '0.5s' 
              }}
            ></div>
            
            {/* Animated shape 3 - Ellipse with different color */}
            <div 
              className="absolute rounded-full w-80 h-80 bg-gradient-to-r from-amber-400 to-rose-400 blur-3xl opacity-20 animate-pulse"
              style={{ 
                left: `calc(60% + ${mousePosition.x * 20}px)`, 
                top: `calc(60% + ${mousePosition.y * 20}px)`,
                animationDelay: '1s' 
              }}
            ></div>
            
            {/* Fashion-themed pattern overlay */}
            <div className="absolute inset-0 opacity-10" 
              style={{
                backgroundImage: 'url("data:image/svg+xml,%3Csvg width=\'60\' height=\'60\' viewBox=\'0 0 60 60\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cg fill=\'none\' fill-rule=\'evenodd\'%3E%3Cg fill=\'%23ffffff\' fill-opacity=\'0.2\'%3E%3Cpath d=\'M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z\'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")',
                backgroundSize: '30px 30px'
              }}
            ></div>
            
            {/* Light streaks effect */}
            <div className="absolute inset-0">
              <div className="absolute w-full h-1 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -rotate-30 top-1/4 left-0 blur-sm"></div>
              <div className="absolute w-full h-1 bg-gradient-to-r from-transparent via-white/15 to-transparent transform rotate-12 top-2/3 left-0 blur-sm"></div>
              <div className="absolute w-1 h-full bg-gradient-to-b from-transparent via-white/10 to-transparent transform left-1/4 top-0 blur-sm"></div>
            </div>
          </div>
          
          {/* Mesh gradient overlay */}
          <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent mix-blend-overlay"></div>
          
          {/* Content overlay */}
          <div className="absolute inset-0 z-10 flex flex-col items-center justify-center text-center p-6 pt-24">
            {/* Decorative elements */}
            <div className="absolute w-48 h-48 border border-white/10 rounded-full top-1/4 left-1/4 transform -translate-x-1/2 -translate-y-1/2"></div>
            <div className="absolute w-64 h-64 border border-white/10 rounded-full bottom-1/4 right-1/4 transform translate-x-1/2 translate-y-1/2"></div>
            
            {/* Floating fashion elements - would be actual SVGs in production */}
            <div className="absolute top-20 left-20 text-white/20 text-4xl font-thin transform rotate-12">
              ✦
            </div>
            <div className="absolute bottom-32 right-24 text-white/20 text-5xl font-thin transform -rotate-6">
              ✧
            </div>
            
            <h3 className="text-lg font-medium text-white mb-2">
              ONLINE EXCLUSIVE
            </h3>
            
            <h1 className="text-4xl md:text-6xl font-display font-bold mb-8 text-white">
              MID-SEASON OFFERS<br/>UP TO 30% OFF
            </h1>
            
            <div className="flex justify-center gap-4 mb-8">
              {/* FIXED BUTTON 1: Modified for better text visibility */}
              <button 
                className="bg-white hover:bg-white/90 text-gray-900 font-bold py-3 px-10 rounded-lg shadow-lg transition-all"
              >
                FOR HIM
              </button>
              
              {/* FIXED BUTTON 2: Modified for better text visibility */}
              <button 
                className="bg-white hover:bg-white/90 text-gray-900 font-bold py-3 px-10 rounded-lg shadow-lg transition-all"
              >
                FOR HER
              </button>
            </div>
            
            <p className="text-sm text-white/80">
              Valid until 13.04.2025
            </p>
          </div>
        </div>
      </div>
      
      {/* Tabs - styled to match the design in the image */}
      <div className="absolute top-2 left-0 w-full flex justify-center z-30">
        <div className="bg-gray-800/70 backdrop-blur-md rounded-full px-1 py-1 flex items-center mt-4 shadow-lg">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              className={`font-medium text-sm px-5 py-2 rounded-full transition-all ${
                activeTab === tab.id
                ? 'bg-white text-gray-900'
                : 'bg-transparent text-white hover:text-white/80'
              }`}
              onClick={() => setActiveTab(tab.id)}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>
      
      {/* Stats counters */}
      <div className="flex items-center justify-between py-6 px-4 border-b border-white/10">
        <div className="flex flex-col">
          <span className="text-xl md:text-2xl font-display font-bold">100+</span>
          <span className="text-sm text-text-secondary">Local Stores</span>
        </div>
        
        <div className="w-px h-10 bg-white/10"></div>
        
        <div className="flex flex-col">
          <span className="text-xl md:text-2xl font-display font-bold">10k+</span>
          <span className="text-sm text-text-secondary">Products</span>
        </div>
        
        <div className="w-px h-10 bg-white/10"></div>
        
        <div className="flex flex-col">
          <span className="text-xl md:text-2xl font-display font-bold">60min</span>
          <span className="text-sm text-text-secondary">Delivery</span>
        </div>
      </div>
    </section>
  );
};

export default HeroSection;


================================================
File: src/components/home/ProductCard.js
================================================
"use client";

import { useState } from "react";
import Card from "@/components/ui/Card";
import Badge from "@/components/ui/Badge";
import { useRouter } from "next/navigation";

const ProductCard = ({ product }) => {
  const router = useRouter();

  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isHovered, setIsHovered] = useState(false);

  const handleSwipe = (direction) => {
    if (direction === "next") {
      setCurrentImageIndex((prev) => (prev + 1) % product.images.length);
    } else {
      setCurrentImageIndex(
        (prev) => (prev - 1 + product.images.length) % product.images.length
      );
    }
  };

  return (
    <Card
      variant="neomorph"
      className="overflow-hidden"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="relative" onClick={() => router.push(`/product/${product.id}`)}>
        <div
          className="relative h-56 bg-background-darker swipe-area"
          style={{
            backgroundImage: `url(${product.images[currentImageIndex]})`,
            backgroundSize: "cover",
            backgroundPosition: "center",
          }}
        >
          {product.isNew && (
            <Badge variant="accent" className="absolute top-2 left-2">
              New
            </Badge>
          )}

          {isHovered && (
            <>
              <button
                className="absolute left-2 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center opacity-80 hover:opacity-100"
                onClick={() => handleSwipe("prev")}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                    clipRule="evenodd"
                  />
                </svg>
              </button>

              <button
                className="absolute right-2 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center opacity-80 hover:opacity-100"
                onClick={() => handleSwipe("next")}
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fillRule="evenodd"
                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                    clipRule="evenodd"
                  />
                </svg>
              </button>
            </>
          )}

          <div className="swipe-indicator">
            {product.images.map((_, index) => (
              <span
                key={index}
                className={`swipe-dot ${
                  index === currentImageIndex ? "active" : ""
                }`}
              />
            ))}
          </div>

          <div className="absolute bottom-2 right-2 add-to-bag">
            <button className="add-to-bag-btn">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M12 6v6m0 0v6m0-6h6m-6 0H6"
                />
              </svg>
            </button>
          </div>
        </div>

        <div className="p-4">
          <div className="flex items-center justify-between mb-1">
            <span className="text-xs text-text-secondary">{product.store}</span>
            <div className="flex items-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4 text-warning"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
              <span className="text-xs ml-1">{product.rating}</span>
            </div>
          </div>

          <h3 className="font-medium line-clamp-1">{product.name}</h3>

          <div className="flex items-end justify-between mt-2">
            <div>
              <span className="font-bold text-primary">
                ₹{product.price.toFixed(2)}
              </span>
              {product.originalPrice && (
                <span className="text-xs text-text-secondary line-through ml-2">
                  ₹{product.originalPrice.toFixed(2)}
                </span>
              )}
            </div>
            <span className="text-xs text-text-secondary">
              {product.deliveryTime}
            </span>
          </div>
        </div>
      </div>
    </Card>
  );
};

export default ProductCard;



================================================
File: src/components/home/ProductVideoSlider.js
================================================
'use client';

import { useRef } from 'react';
import Card from '@/components/ui/Card';

const ProductVideoSlider = () => {
  const scrollRef = useRef(null);
  
  // Mock data for videos (removed posterUrl)
  const videos = [
    {
      id: 1,
      videoUrl: '/videos/1.mp4',
    },
    {
      id: 2,
      videoUrl: '/videos/2.mp4',
    },
    {
      id: 3,
      videoUrl: '/videos/3.mp4',
    },
    {
      id: 4,
      videoUrl: '/videos/4.mp4',
    },
    {
      id: 5,
      videoUrl: '/videos/5.mp4',
    }
  ];
  
  // Handle horizontal scrolling with buttons
  const scroll = (direction) => {
    if (scrollRef.current) {
      const { current } = scrollRef;
      const scrollAmount = direction === 'left' ? -280 : 280;
      current.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };
  
  return (
    <section className="my-8 relative">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-display font-bold">Fashion Reels</h2>
        <a href="/videos" className="text-primary text-sm font-medium">View All</a>
      </div>
      
      <div className="relative">
        <div 
          className="flex items-stretch gap-4 overflow-x-auto pb-2 scrollbar-none" 
          ref={scrollRef}
        >
          {videos.map((video) => (
            <div key={video.id} className="w-64 flex-shrink-0">
              <Card variant="glass" className="h-96 overflow-hidden">
                <div className="relative h-full w-full">
                  {/* Video element with immediate autoplay, no poster */}
                  <video
                    className="h-full w-full object-cover"
                    autoPlay
                    loop
                    muted
                    playsInline
                    preload="auto"
                  >
                    <source src={video.videoUrl} type="video/mp4" />
                  </video>
                  
                  {/* Mute indicator */}
                  <div className="absolute top-3 right-3 w-6 h-6 rounded-full bg-black/40 flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-white" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM12.293 7.293a1 1 0 011.414 0L15 8.586l1.293-1.293a1 1 0 111.414 1.414L16.414 10l1.293 1.293a1 1 0 01-1.414 1.414L15 11.414l-1.293 1.293a1 1 0 01-1.414-1.414L13.586 10l-1.293-1.293a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </div>
                </div>
              </Card>
            </div>
          ))}
        </div>
        
        {/* Navigation buttons */}
        <button 
          className="absolute left-0 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center z-10"
          onClick={() => scroll('left')}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
          </svg>
        </button>
        
        <button 
          className="absolute right-0 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center z-10"
          onClick={() => scroll('right')}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
          </svg>
        </button>
      </div>
    </section>
  );
};

export default ProductVideoSlider;


================================================
File: src/components/home/ProductsGrid.js
================================================
import ProductCard from "./ProductCard";

const ProductsGrid = ({products}) => {
  // Mock data

  return (
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
      {products.map((product) => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  );
};

export default ProductsGrid;



================================================
File: src/components/home/PromoBar.js
================================================
'use client';

import { useState, useRef, useEffect } from 'react';

const PromoBar = () => {
  const scrollRef = useRef(null);
  const [showLeftArrow, setShowLeftArrow] = useState(false);
  const [showRightArrow, setShowRightArrow] = useState(true);
  
  // Mock data with added color schemes
  const coupons = [
    {
      id: 1,
      code: 'WELCOME50',
      description: '50% off on your first order',
      maxDiscount: '₹200',
      minOrder: '₹399',
      expiresIn: '2 days',
      colorClass: 'bg-gradient-to-r from-purple-500 to-indigo-600',
      textColor: 'text-white',
      labelColor: 'bg-purple-300 text-purple-800'
    },
    {
      id: 2,
      code: 'FLASH30',
      description: '30% off on all shoes',
      maxDiscount: '₹500',
      minOrder: '₹999',
      expiresIn: '12 hours',
      colorClass: 'bg-gradient-to-r from-yellow-400 to-orange-500',
      textColor: 'text-white',
      labelColor: 'bg-yellow-200 text-yellow-800'
    },
    {
      id: 3,
      code: 'WEEKEND20',
      description: '20% off on weekend shopping',
      maxDiscount: '₹350',
      minOrder: '₹799',
      expiresIn: '3 days',
      colorClass: 'bg-gradient-to-r from-green-400 to-teal-500',
      textColor: 'text-white',
      labelColor: 'bg-green-200 text-green-800'
    },
  ];
  
  // Check scroll position to show/hide arrows
  useEffect(() => {
    const checkScrollPosition = () => {
      if (scrollRef.current) {
        const { scrollLeft, scrollWidth, clientWidth } = scrollRef.current;
        setShowLeftArrow(scrollLeft > 0);
        setShowRightArrow(scrollLeft < scrollWidth - clientWidth - 10); // 10px buffer
      }
    };
    
    const scrollContainer = scrollRef.current;
    if (scrollContainer) {
      scrollContainer.addEventListener('scroll', checkScrollPosition);
      // Initial check
      checkScrollPosition();
      
      return () => {
        scrollContainer.removeEventListener('scroll', checkScrollPosition);
      };
    }
  }, []);
  
  const scroll = (direction) => {
    if (scrollRef.current) {
      const { current } = scrollRef;
      const scrollAmount = direction === 'left' ? -300 : 300;
      current.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };
  
  return (
    <section className="my-8">
      <h2 className="text-2xl font-display font-bold mb-4">Available Coupons</h2>
      
      <div className="relative px-12"> {/* Add horizontal padding to make room for buttons */}
        <div 
          className="flex items-stretch gap-3 overflow-x-auto pb-4 scrollbar-none"
          ref={scrollRef}
        >
          {coupons.map((coupon) => (
            <div key={coupon.id} className="min-w-52 max-w-56 flex-shrink-0">
              <div className={`rounded-lg shadow-md overflow-hidden ${coupon.colorClass}`}>
                <div className="p-3 flex justify-between items-stretch">
                  <div className="flex-1">
                    <div className={`text-xs font-bold px-1.5 py-0.5 rounded-full inline-block mb-1 ${coupon.labelColor}`}>New</div>
                    <div className={`text-lg font-bold mb-0.5 ${coupon.textColor}`}>{coupon.code}</div>
                    <div className={`text-xs mb-1 ${coupon.textColor} opacity-90`}>{coupon.description}</div>
                    <div className={`text-xs ${coupon.textColor} opacity-80`}>
                      Max: {coupon.maxDiscount} | Min: {coupon.minOrder}
                    </div>
                  </div>
                  
                  <div className="relative ml-2">
                    {/* Dotted line separator */}
                    <div className="absolute left-0 top-0 bottom-0 border-l border-dashed border-white border-opacity-40"></div>
                    
                    <div className="pl-2 flex flex-col justify-between h-full">
                      <button className="bg-white hover:bg-opacity-90 text-gray-800 px-2 py-1 rounded-full text-xs font-bold transition-colors">
                        Apply
                      </button>
                      <div className={`text-xs ${coupon.textColor} opacity-90 mt-1`}>
                        Expires: {coupon.expiresIn}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        {/* Navigation buttons positioned outside the scroll area */}
        {showLeftArrow && (
          <button 
            className="absolute left-0 top-1/2 -translate-y-1/2 w-10 h-10 glass rounded-full flex items-center justify-center z-10 opacity-80 hover:opacity-100 shadow-lg"
            onClick={() => scroll('left')}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
          </button>
        )}
        
        {showRightArrow && (
          <button 
            className="absolute right-0 top-1/2 -translate-y-1/2 w-10 h-10 glass rounded-full flex items-center justify-center z-10 opacity-80 hover:opacity-100 shadow-lg"
            onClick={() => scroll('right')}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
            </svg>
          </button>
        )}
      </div>
    </section>
  );
};

export default PromoBar;


================================================
File: src/components/home/ReelSection.js
================================================
'use client';

import { useRef } from 'react';
import Card from '@/components/ui/Card';

const ReelSection = () => {
  const scrollRef = useRef(null);
  
  // Mock data with videos instead of images
  const reels = [
    {
      id: 1,
      title: 'Summer essentials you need',
      videoUrl: '/videos/3.mp4',
      likes: 423,
      user: { name: 'FashionDaily', avatar: '/images/demo-products/avatar-1.jpg' }
    },
    {
      id: 2,
      title: 'Street style lookbook 2025',
      videoUrl: '/videos/6.mp4',
      likes: 892,
      user: { name: 'StyleCraze', avatar: '/images/demo-products/avatar-2.jpg' }
    },
    {
      id: 3,
      title: 'Office wear inspiration',
      videoUrl: '/videos/7.mp4',
      likes: 512,
      user: { name: 'WorkChic', avatar: '/images/demo-products/avatar-3.jpg' }
    },
    {
      id: 4,
      title: 'Weekend casual outfits',
      videoUrl: '/videos/8.mp4',
      likes: 743,
      user: { name: 'TrendHunter', avatar: '/images/demo-products/avatar-4.jpg' }
    },
    {
      id: 5,
      title: 'Accessorize like a pro',
      videoUrl: '/videos/9.mp4',
      likes: 651,
      user: { name: 'GlamGuide', avatar: '/images/demo-products/avatar-5.jpg' }
    }
  ];
  
  const scroll = (direction) => {
    if (scrollRef.current) {
      const { current } = scrollRef;
      const scrollAmount = direction === 'left' ? -300 : 300;
      current.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };
  
  return (
    <div className="relative">
      <div 
        className="flex items-stretch gap-4 overflow-x-auto py-2 scrollbar-none"
        ref={scrollRef}
      >
        {reels.map((reel) => (
          <div key={reel.id} className="w-40 flex-shrink-0">
            <Card variant="glass" hover className="h-64">
              <div className="relative h-full w-full overflow-hidden">
                {/* Video element instead of background image */}
                <video
                  className="absolute inset-0 w-full h-full object-cover"
                  autoPlay
                  loop
                  muted
                  playsInline
                  preload="auto"
                >
                  <source src={reel.videoUrl} type="video/mp4" />
                </video>
                
                {/* Gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent" />
                
                {/* User avatar */}
                <div className="absolute top-3 left-3 flex items-center">
                  <div className="w-8 h-8 rounded-full overflow-hidden border-2 border-purple-500">
                    <div className="w-full h-full bg-gradient-to-br from-purple-500 to-cyan-400 flex items-center justify-center text-white font-bold">
                      {reel.user.name.charAt(0)}
                    </div>
                  </div>
                </div>
                
                {/* Content overlay */}
                <div className="absolute bottom-0 left-0 right-0 p-3">
                  <h3 className="text-white font-medium text-sm line-clamp-2 mb-1">
                    {reel.title}
                  </h3>
                  
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-400">
                      {reel.user.name}
                    </span>
                    
                    <div className="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-pink-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                      <span className="text-xs text-gray-400 ml-1">
                        {reel.likes}
                      </span>
                    </div>
                  </div>
                </div>
                
                {/* Volume indicator */}
                <div className="absolute top-3 right-3 w-6 h-6 rounded-full bg-black/40 flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 text-white" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM12.293 7.293a1 1 0 011.414 0L15 8.586l1.293-1.293a1 1 0 111.414 1.414L16.414 10l1.293 1.293a1 1 0 01-1.414 1.414L15 11.414l-1.293 1.293a1 1 0 01-1.414-1.414L13.586 10l-1.293-1.293a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </div>
              </div>
            </Card>
          </div>
        ))}
      </div>
      
      <button 
        className="absolute left-0 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center z-10"
        onClick={() => scroll('left')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
        </svg>
      </button>
      
      <button 
        className="absolute right-0 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center z-10"
        onClick={() => scroll('right')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
        </svg>
      </button>
    </div>
  );
};

export default ReelSection;


================================================
File: src/components/home/StoreSlider.js
================================================
'use client';

import { useRef } from 'react';
import Card from '@/components/ui/Card';

const StoreSlider = () => {
  const scrollRef = useRef(null);
  
  const stores = [
    { id: 1, name: 'Zara', deliveryTime: '25 min', logo: 'https://thumbs.dreamstime.com/b/zara-logo-editorial-illustrative-white-background-logo-icon-vector-logos-icons-set-social-media-flat-banner-vectors-svg-eps-jpg-210444071.jpg' },
    { id: 2, name: 'H&M', deliveryTime: '30 min', logo: 'https://seeklogo.com/images/H/h-m-logo-89DCA36A67-seeklogo.com.png' },
    { id: 3, name: 'Mango', deliveryTime: '45 min', logo: 'https://img.businessoffashion.com/resizer/v2/https%3A%2F%2Fprod-bof-media.s3.eu-west-1.amazonaws.com%2Fimport%2Ffilestack%2Favatar%2Fmango.png?auth=fcba6bce04c1b43197dc013664037f736c42528f190b68822b21e2f7d15ef7cc&width=480' },
    { id: 4, name: 'Uniqlo', deliveryTime: '40 min', logo: 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/92/UNIQLO_logo.svg/2058px-UNIQLO_logo.svg.png' },
    { id: 5, name: 'Nike', deliveryTime: '35 min', logo: 'https://thumbs.dreamstime.com/b/nike-sport-clothing-brand-logo-editorial-image-vinnitsia-ukraine-june-nike-sport-clothing-brand-logo-editorial-image-222082882.jpg' },
    { id: 6, name: 'Adidas', deliveryTime: '35 min', logo: 'https://thumbs.dreamstime.com/b/adidas-logo-editorial-illustrative-white-background-adidas-logo-editorial-illustrative-white-background-eps-download-vector-208329055.jpg' },
    { id: 7, name: 'Levi\'s', deliveryTime: '30 min', logo: 'https://static.vecteezy.com/system/resources/previews/023/871/675/non_2x/levis-logo-brand-symbol-design-clothes-fashion-illustration-free-vector.jpg' },
    { id: 8, name: 'FabIndia', deliveryTime: '50 min', logo: 'https://content.jdmagicbox.com/comp/haldwani/i6/9999p5946.5946.171122124842.u4i6/catalogue/fabindia-haldwani-ho-haldwani-fabindia-0kspefljn4.jpg' },
  ];
  
  const scroll = (direction) => {
    if (scrollRef.current) {
      const { current } = scrollRef;
      const scrollAmount = direction === 'left' ? -300 : 300;
      current.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };
  
  return (
    <div className="relative">
      <div 
        className="flex items-center overflow-x-auto py-2 scrollbar-none" 
        ref={scrollRef}
      >
        {stores.map((store) => (
          <div key={store.id} className="px-2 w-40 flex-shrink-0">
            <Card variant="neomorph" hover className="p-4 h-36 flex flex-col items-center justify-center">
              <div className="w-16 h-16 rounded-full neomorph flex items-center justify-center mb-4">
                <div className="w-12 h-12 rounded-full flex items-center justify-center overflow-hidden">
                  <img 
                    src={store.logo} 
                    alt={`${store.name} logo`} 
                    className="w-full h-full object-contain"
                  />
                </div>
              </div>
              <h3 className="font-medium text-center">{store.name}</h3>
              <p className="text-xs text-text-secondary">{store.deliveryTime}</p>
            </Card>
          </div>
        ))}
      </div>
      
      <button 
        className="absolute left-0 top-1/2 -translate-y-1/2 w-8 h-8 neomorph rounded-full flex items-center justify-center z-10"
        onClick={() => scroll('left')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
        </svg>
      </button>
      
      <button 
        className="absolute right-0 top-1/2 -translate-y-1/2 w-8 h-8 neomorph rounded-full flex items-center justify-center z-10"
        onClick={() => scroll('right')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
        </svg>
      </button>
    </div>
  );
};

export default StoreSlider;


================================================
File: src/components/home/TrendingNow.js
================================================
import Card from '@/components/ui/Card';
import Badge from '@/components/ui/Badge';

const TrendingNow = () => {
  // Mock data
  const trendingItems = [
    {
      id: 1,
      name: 'Cargo Pants',
      count: '4.2k searches',
      image: '/images/demo-products/trend-1.jpg',
    },
    {
      id: 2,
      name: 'Chunky Sneakers',
      count: '3.8k searches',
      image: '/images/demo-products/trend-2.jpg',
    },
    {
      id: 3,
      name: 'Maxi Dresses',
      count: '3.5k searches',
      image: '/images/demo-products/trend-3.jpg',
    },
    {
      id: 4,
      name: 'Oversized Tees',
      count: '3.1k searches',
      image: '/images/demo-products/trend-4.jpg',
    },
  ];
  
  return (
    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
      {trendingItems.map((item, index) => (
        <Card
          key={item.id}
          variant="glass"
          hover
          className="relative h-36 overflow-hidden"
        >
          <div 
            className="absolute inset-0 bg-cover bg-center"
            style={{ backgroundImage: `url(${item.image})` }}
          />
          <div className="absolute inset-0 bg-gradient-to-t from-background-darker/90 to-transparent" />
          
          <div className="absolute left-3 top-3">
            <Badge variant="primary" size="sm">#{index + 1}</Badge>
          </div>
          
          <div className="absolute left-0 right-0 bottom-0 p-3">
            <h3 className="font-bold text-white">{item.name}</h3>
            <p className="text-xs text-text-secondary">{item.count}</p>
          </div>
        </Card>
      ))}
    </div>
  );
};

export default TrendingNow;


================================================
File: src/components/layout/Container.js
================================================
const Container = ({ children, className = '', ...props }) => {
    return (
      <div className={`container mx-auto px-4 ${className}`} {...props}>
        {children}
      </div>
    );
  };
  
  export default Container;


================================================
File: src/components/layout/Footer.js
================================================
'use client';

import { useState, useEffect } from 'react';
import { useRouter, usePathname } from 'next/navigation';

const Footer = () => {
  const router = useRouter();
  const pathname = usePathname();
  const [activeTab, setActiveTab] = useState('home');
  const [isNavigating, setIsNavigating] = useState(false);
  
  // Set the active tab based on the current path
  useEffect(() => {
    if (pathname === '/') {
      setActiveTab('home');
    } else if (pathname === '/trending') {
      setActiveTab('trending');
    } else if (pathname === '/reels') {
      setActiveTab('reels');
    } else if (pathname === '/cart') {
      setActiveTab('cart');
    } else if (pathname === '/profile') {
      setActiveTab('profile');
    }
    
    // When pathname changes, navigation is complete
    setIsNavigating(false);
  }, [pathname]);
  
  // Handle tab click with navigation
  const handleTabClick = (tabId) => {
    if (activeTab === tabId) return; // Don't navigate if already on that tab
    
    setIsNavigating(true); // Start loading state
    
    // Navigate based on tab id
    if (tabId === 'home') {
      router.push('/');
    } else if (tabId === 'trending') {
      router.push('/trending');
    } else if (tabId === 'reels') {
      router.push('/reels');
    } else if (tabId === 'cart') {
      router.push('/cart');
    } else if (tabId === 'profile') {
      router.push('/profile');
    }
    
    // Note: The loading state will be cleared when the pathname changes in the useEffect above
  };
  
  const tabs = [
    { 
      id: 'home', 
      label: 'Home',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
        </svg>
      ) 
    },
    { 
      id: 'trending', 
      label: 'Trending',
      icon: (
        <div className="relative">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 18.657A8 8 0 016.343 7.343S7 9 9 10c0-2 .5-5 2.986-7C14 5 16.09 5.777 17.656 7.343A7.975 7.975 0 0120 13a7.975 7.975 0 01-2.343 5.657z" />
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.879 16.121A3 3 0 1012.015 11L11 14H9c0 .768.293 1.536.879 2.121z" />
          </svg>
          <span className="absolute -top-1 -right-1 flex h-3 w-3">
            <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-orange-400 opacity-75"></span>
            <span className="relative inline-flex rounded-full h-3 w-3 bg-orange-500"></span>
          </span>
        </div>
      ) 
    },
    { 
      id: 'reels', 
      label: 'Reels',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 4v16M17 4v16M3 8h4m10 0h4M3 12h18M3 16h4m10 0h4M4 20h16a1 1 0 001-1V5a1 1 0 00-1-1H4a1 1 0 00-1 1v14a1 1 0 001 1z" />
        </svg>
      ) 
    },
    { 
      id: 'cart', 
      label: 'Cart',
      icon: (
        <div className="relative">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
          </svg>
          <div className="absolute -top-2 -right-2 text-pink-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
            </svg>
          </div>
        </div>
      ) 
    },
    { 
      id: 'profile', 
      label: 'Profile',
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
        </svg>
      ) 
    },
  ];
  
  return (
    <>
      {/* Global loading indicator - shows when navigating between pages */}
      {isNavigating && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/50 backdrop-blur-sm">
          <div className="glass p-6 rounded-2xl flex flex-col items-center">
            <div className="relative w-16 h-16 mb-4">
              <div className="absolute top-0 left-0 w-full h-full rounded-full border-4 border-t-purple-500 border-r-cyan-400 border-b-pink-500 border-l-indigo-500 animate-spin"></div>
              <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 text-2xl font-display font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
                T
              </div>
            </div>
            <p className="text-white font-medium">Loading...</p>
          </div>
        </div>
      )}

      <footer className="fixed bottom-0 left-0 right-0 z-40">
        <div className="glass border-t border-white/10">
          {/* Indicator line for active tab - positioned above the navbar */}
          <div className="container mx-auto relative">
            <div 
              className="absolute h-1 bg-gradient-to-r from-purple-500 to-cyan-400 transition-all duration-200 rounded-b w-12" 
              style={{
                left: `calc(${(tabs.findIndex(tab => tab.id === activeTab) * 20) + 10}% - 24px)`,
                top: '-1px',
              }}
            />
          </div>
          
          <div className="container mx-auto">
            <div className="grid grid-cols-5 h-16">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  className={`bottom-nav-item ${activeTab === tab.id ? 'active' : ''}`}
                  onClick={() => handleTabClick(tab.id)}
                  disabled={isNavigating}
                >
                  <div className={`${activeTab === tab.id ? 'text-purple-500' : 'text-gray-400'}`}>
                    {tab.icon}
                  </div>
                  <span className={`text-xs mt-1 ${activeTab === tab.id ? 'text-purple-500 font-medium' : 'text-gray-400'}`}>
                    {tab.label}
                  </span>
                </button>
              ))}
            </div>
          </div>
        </div>
      </footer>
    </>
  );
};

export default Footer;


================================================
File: src/components/layout/GlassPanels.js
================================================
const GlassPanels = () => {
    return (
      <div className="fixed inset-0 -z-10 overflow-hidden">
        {/* Top-left purple blob */}
        <div className="absolute -top-32 -left-32 w-96 h-96 rounded-full bg-primary/20 blur-3xl animate-pulse-slow" />
        
        {/* Bottom-right teal blob */}
        <div className="absolute -bottom-32 -right-32 w-96 h-96 rounded-full bg-secondary/20 blur-3xl animate-pulse-slow" />
        
        {/* Center accent blob */}
        <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 rounded-full bg-accent/10 blur-3xl animate-float" />
        
        {/* Additional decorative elements */}
        <div className="absolute top-1/4 right-1/4 w-32 h-32 rounded-full bg-primary/10 blur-xl animate-float" style={{ animationDelay: "-2s" }} />
        <div className="absolute bottom-1/4 left-1/5 w-24 h-24 rounded-full bg-secondary/10 blur-xl animate-float" style={{ animationDelay: "-4s" }} />
        
        {/* Overlay gradient */}
        <div className="absolute inset-0 bg-background-dark/50 backdrop-blur-sm" />
      </div>
    );
  };
  
  export default GlassPanels;


================================================
File: src/components/layout/Header.js
================================================
'use client';

import { useState, useEffect, useRef } from 'react';
import ThemeToggle from '@/components/ui/ThemeToggle';
import { useRouter } from 'next/navigation';

const Header = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [searchSuggestions, setSearchSuggestions] = useState([]);
  const searchContainerRef = useRef(null);
  const router = useRouter();
  
  // Popular searches to show as suggestions
  const popularSearches = [
    'Summer dresses', 'Sneakers', 'T-shirts', 'Jeans',
    'Accessories', 'Formal wear', 'Sportswear'
  ];
  
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 10) {
        setIsScrolled(true);
      } else {
        setIsScrolled(false);
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);
  
  // Add click outside listener to close search
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (searchContainerRef.current && !searchContainerRef.current.contains(event.target)) {
        setIsSearchOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  // Prevent body scroll when search is open on mobile
  useEffect(() => {
    if (isSearchOpen) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    
    return () => {
      document.body.style.overflow = '';
    };
  }, [isSearchOpen]);
  
  // Toggle search visibility
  const toggleSearch = () => {
    // Scroll to top when opening search (this is the only new addition)
    if (!isSearchOpen) {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      
      // Small delay to ensure scrolling has started
      setTimeout(() => {
        setIsSearchOpen(true);
        // Reset search when opening
        setSearchQuery('');
        setIsSearching(false);
        setSearchSuggestions([]);
      }, 100);
    } else {
      setIsSearchOpen(false);
    }
  };
  
  // Handle search input changes
  const handleSearchChange = (e) => {
    const value = e.target.value;
    setSearchQuery(value);
    
    // Show loading effect when typing
    if (value.length > 0) {
      setIsSearching(true);
      
      // Simulate search delay
      const timer = setTimeout(() => {
        // Generate search suggestions based on input
        const filteredSuggestions = popularSearches
          .filter(item => item.toLowerCase().includes(value.toLowerCase()))
          .slice(0, 5);
        
        // Add dynamic suggestions
        if (value.length >= 2) {
          filteredSuggestions.push(`${value} t-shirts`, `${value} shoes`);
        }
        
        setSearchSuggestions([...new Set(filteredSuggestions.slice(0, 5))]);
        setIsSearching(false);
      }, 300);
      
      return () => clearTimeout(timer);
    } else {
      setIsSearching(false);
      setSearchSuggestions([]);
    }
  };
  
  // Clear search input
  const clearSearch = () => {
    setSearchQuery('');
    setIsSearching(false);
    setSearchSuggestions([]);
  };
  
  // Handle search submission
  const handleSearchSubmit = (e) => {
    e.preventDefault();
    
    if (searchQuery.trim()) {
      // Navigate to search results page
      router.push(`/search?q=${encodeURIComponent(searchQuery.trim())}`);
      setIsSearchOpen(false);
    }
  };
  
  // Use suggested search term
  const useSearchTerm = (term) => {
    setSearchQuery(term);
    router.push(`/search?q=${encodeURIComponent(term)}`);
    setIsSearchOpen(false);
  };
  
  return (
    <header 
      className={`sticky top-0 z-50 py-4 transition-all duration-200 ${
        isScrolled ? 'glass backdrop-blur-md' : 'bg-transparent'
      }`}
    >
      <div className="container mx-auto px-4 flex items-center justify-between">
        <div className="flex items-center">
          <div className="mr-2 text-2xl font-display font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
            Trendzo
          </div>
        </div>
        
        <div className="flex items-center space-x-4">
          {/* Search Icon Button */}
          <div ref={searchContainerRef} className="relative">
            <button 
              className="relative neomorph p-2 rounded-full hover:bg-white/5 transition-all"
              onClick={toggleSearch}
              aria-label="Search"
            >
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className="h-6 w-6" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2} 
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" 
                />
              </svg>
            </button>
            
            {/* Search overlay - fixed to the top of viewport */}
            {isSearchOpen && (
              <>
                {/* Mobile full screen overlay */}
                <div className="fixed inset-0 z-50 md:hidden bg-gray-950/90 backdrop-blur-md">
                  <div className="flex flex-col w-full h-full">
                    {/* Close button for mobile */}
                    <div className="flex justify-end p-4">
                      <button 
                        onClick={() => setIsSearchOpen(false)}
                        className="rounded-full p-2 glass hover:bg-white/10"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    
                    {/* Mobile search content */}
                    <div className="flex-1 flex flex-col p-4 pt-0 overflow-auto">
                      <div className="glass rounded-xl overflow-hidden border border-white/10 shadow-lg">
                        <form onSubmit={handleSearchSubmit} className="relative">
                          <div className="relative flex items-center">
                            <div className="absolute left-4 text-text-secondary">
                              <svg
                                className={`h-5 w-5 ${isSearching ? 'text-purple-500 animate-pulse' : ''}`}
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                                />
                              </svg>
                            </div>
                            
                            <input
                              type="text"
                              placeholder="Search for products, brands, stores..."
                              className="w-full bg-transparent border-none px-12 py-4 focus:outline-none focus:ring-0 text-lg placeholder-text-secondary/70"
                              value={searchQuery}
                              onChange={handleSearchChange}
                              autoFocus
                            />
                            
                            {searchQuery && (
                              <button
                                type="button"
                                className="absolute right-4 text-text-secondary hover:text-white"
                                onClick={clearSearch}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                </svg>
                              </button>
                            )}
                            
                            {/* Loading shimmer effect */}
                            {isSearching && (
                              <div className="absolute top-0 left-0 right-0 h-0.5 overflow-hidden">
                                <div className="h-full w-full bg-gradient-to-r from-purple-600 via-cyan-400 to-purple-600" style={{ backgroundSize: '200% 100%', animation: 'shimmer 1.5s infinite linear' }}></div>
                              </div>
                            )}
                          </div>
                        </form>
                        
                        {/* Search suggestions */}
                        {searchSuggestions.length > 0 && !isSearching && (
                          <div className="max-h-96 overflow-y-auto border-t border-white/10">
                            {searchSuggestions.map((suggestion, index) => (
                              <div 
                                key={index}
                                className="px-4 py-3 hover:bg-white/5 cursor-pointer transition-all flex items-center"
                                onClick={() => useSearchTerm(suggestion)}
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-purple-500 mr-3 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                </svg>
                                <span>{suggestion}</span>
                              </div>
                            ))}
                          </div>
                        )}
                        
                        {/* Quick suggestions when no input yet */}
                        {!searchQuery && !isSearching && (
                          <div className="p-4 border-t border-white/10">
                            <div className="text-sm text-text-secondary mb-3">Popular Searches</div>
                            <div className="flex flex-wrap gap-2">
                              {popularSearches.map((term, index) => (
                                <div 
                                  key={index}
                                  className="glass px-3 py-1.5 rounded-full text-sm cursor-pointer hover:bg-purple-500/10 transition-all"
                                  onClick={() => useSearchTerm(term)}
                                >
                                  {term}
                                </div>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
                
                {/* Desktop dropdown */}
                <div className="hidden md:block absolute right-0 top-full mt-2 w-96 z-50">
                  <div className="neomorph rounded-xl overflow-hidden border border-white/10 shadow-xl">
                    <form onSubmit={handleSearchSubmit} className="relative">
                      <div className="relative flex items-center">
                        <div className="absolute left-4 text-text-secondary">
                          <svg
                            className={`h-5 w-5 ${isSearching ? 'text-purple-500 animate-pulse' : ''}`}
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                            />
                          </svg>
                        </div>
                        
                        <input
                          type="text"
                          placeholder="Search for products, brands, stores..."
                          className="w-full bg-transparent border-none px-12 py-3 focus:outline-none focus:ring-0 text-base placeholder-text-secondary/70"
                          value={searchQuery}
                          onChange={handleSearchChange}
                          autoFocus
                        />
                        
                        {searchQuery && (
                          <button
                            type="button"
                            className="absolute right-4 text-text-secondary hover:text-white"
                            onClick={clearSearch}
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        )}
                        
                        {/* Loading shimmer effect */}
                        {isSearching && (
                          <div className="absolute top-0 left-0 right-0 h-0.5 overflow-hidden">
                            <div className="h-full w-full bg-gradient-to-r from-purple-600 via-cyan-400 to-purple-600" style={{ backgroundSize: '200% 100%', animation: 'shimmer 1.5s infinite linear' }}></div>
                          </div>
                        )}
                      </div>
                    </form>
                    
                    {/* Search suggestions */}
                    {searchSuggestions.length > 0 && !isSearching && (
                      <div className="max-h-64 overflow-y-auto border-t border-white/10">
                        {searchSuggestions.map((suggestion, index) => (
                          <div 
                            key={index}
                            className="px-4 py-3 hover:bg-white/5 cursor-pointer transition-all flex items-center"
                            onClick={() => useSearchTerm(suggestion)}
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-purple-500 mr-3 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                            <span>{suggestion}</span>
                          </div>
                        ))}
                      </div>
                    )}
                    
                    {/* Quick suggestions when no input yet */}
                    {!searchQuery && !isSearching && (
                      <div className="p-4 border-t border-white/10">
                        <div className="text-sm text-text-secondary mb-3">Popular Searches</div>
                        <div className="flex flex-wrap gap-2">
                          {popularSearches.slice(0, 4).map((term, index) => (
                            <div 
                              key={index}
                              className="glass px-3 py-1.5 rounded-full text-sm cursor-pointer hover:bg-purple-500/10 transition-all"
                              onClick={() => useSearchTerm(term)}
                            >
                              {term}
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </>
            )}
          </div>
          
          <ThemeToggle />
          
          {/* Profile button has been removed */}
        </div>
      </div>
    </header>
  );
};

export default Header;


================================================
File: src/components/profile/AddressesPanel.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Badge from '@/components/ui/Badge';

const AddressesPanel = () => {
  // Mock addresses data
  const [addresses, setAddresses] = useState([
    {
      id: 1,
      name: 'Home',
      fullName: 'Sarah Johnson',
      addressLine1: '123 Main Street, Apartment 4B',
      addressLine2: 'Koramangala',
      city: 'Bangalore',
      state: 'Karnataka',
      pincode: '560034',
      phone: '+91 98765 43210',
      isDefault: true,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
        </svg>
      )
    },
    {
      id: 2,
      name: 'Office',
      fullName: 'Sarah Johnson',
      addressLine1: '456 Tech Park',
      addressLine2: 'Whitefield',
      city: 'Bangalore',
      state: 'Karnataka',
      pincode: '560066',
      phone: '+91 98765 43210',
      isDefault: false,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
        </svg>
      )
    },
    {
      id: 3,
      name: 'Parent\'s House',
      fullName: 'Mr. & Mrs. Johnson',
      addressLine1: '789 Garden View',
      addressLine2: 'Jayanagar',
      city: 'Bangalore',
      state: 'Karnataka',
      pincode: '560041',
      phone: '+91 97654 32109',
      isDefault: false,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      )
    },
  ]);
  
  // States to manage the new address form
  const [isAddingAddress, setIsAddingAddress] = useState(false);
  const [newAddress, setNewAddress] = useState({
    name: '',
    fullName: '',
    addressLine1: '',
    addressLine2: '',
    city: '',
    state: '',
    pincode: '',
    phone: '',
  });
  
  // Handle remove address
  const removeAddress = (addressId) => {
    setAddresses(addresses.filter(address => address.id !== addressId));
  };
  
  // Handle set as default
  const setAsDefault = (addressId) => {
    setAddresses(addresses.map(address => ({
      ...address,
      isDefault: address.id === addressId
    })));
  };
  
  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewAddress(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Handle add address submission
  const handleAddAddress = (e) => {
    e.preventDefault();
    
    // Create new address object
    const newAddressObj = {
      id: addresses.length + 1,
      ...newAddress,
      isDefault: addresses.length === 0,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
      )
    };
    
    // Add to addresses list
    setAddresses([...addresses, newAddressObj]);
    
    // Reset form and close it
    setNewAddress({
      name: '',
      fullName: '',
      addressLine1: '',
      addressLine2: '',
      city: '',
      state: '',
      pincode: '',
      phone: '',
    });
    setIsAddingAddress(false);
  };
  
  return (
    <div>
      <div className="mb-6 flex justify-between items-center">
        <h2 className="text-lg font-display font-bold">Saved Addresses</h2>
        
        <Button 
          variant="primary" 
          size="sm"
          className="flex items-center"
          onClick={() => setIsAddingAddress(!isAddingAddress)}
        >
          {isAddingAddress ? (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
              Cancel
            </>
          ) : (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              Add New Address
            </>
          )}
        </Button>
      </div>
      
      {/* Add New Address Form */}
      {isAddingAddress && (
        <Card variant="glass" className="p-4 mb-6">
          <h3 className="font-bold mb-4">Add New Address</h3>
          
          <form onSubmit={handleAddAddress}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Address Name</label>
                <input 
                  type="text" 
                  name="name"
                  placeholder="Home, Office, etc."
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newAddress.name}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Full Name</label>
                <input 
                  type="text" 
                  name="fullName"
                  placeholder="Full Name"
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newAddress.fullName}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-1">Address Line 1</label>
                <input 
                  type="text" 
                  name="addressLine1"
                  placeholder="House No., Building Name, Street"
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newAddress.addressLine1}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div className="md:col-span-2">
                <label className="block text-sm font-medium mb-1">Address Line 2</label>
                <input 
                  type="text" 
                  name="addressLine2"
                  placeholder="Area, Landmark"
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newAddress.addressLine2}
                  onChange={handleInputChange}
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">City</label>
                <input 
                  type="text" 
                  name="city"
                  placeholder="City"
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newAddress.city}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">State</label>
                <input 
                  type="text" 
                  name="state"
                  placeholder="State"
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newAddress.state}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Pincode</label>
                <input 
                  type="text" 
                  name="pincode"
                  placeholder="Pincode"
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newAddress.pincode}
                  onChange={handleInputChange}
                  required
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">Phone Number</label>
                <input 
                  type="text" 
                  name="phone"
                  placeholder="Phone Number"
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newAddress.phone}
                  onChange={handleInputChange}
                  required
                />
              </div>
            </div>
            
            <div className="flex justify-end mt-6">
              <Button 
                type="submit" 
                variant="primary"
              >
                Save Address
              </Button>
            </div>
          </form>
        </Card>
      )}
      
      {/* Address List */}
      {addresses.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {addresses.map((address) => (
            <Card 
              key={address.id}
              variant="glass" 
              className={`p-4 transition-all relative ${
                address.isDefault ? 'border-2 border-purple-500 bg-purple-500/10' : ''
              }`}
            >
              <div className="flex items-center mb-2">
                <div className={`w-8 h-8 glass rounded-full flex items-center justify-center mr-2 ${
                  address.isDefault ? 'text-purple-500' : ''
                }`}>
                  {address.icon}
                </div>
                <div className="font-medium flex-grow">{address.name}</div>
                {address.isDefault && (
                  <Badge variant="primary" size="sm">Default</Badge>
                )}
              </div>
              
              <div className="text-sm">
                <p className="font-medium">{address.fullName}</p>
                <p>{address.addressLine1}</p>
                <p>{address.addressLine2}</p>
                <p>{address.city}, {address.state}, {address.pincode}</p>
                <p className="mt-2">{address.phone}</p>
              </div>
              
              <div className="flex gap-2 mt-4">
                <Button
                  variant="glass"
                  size="sm"
                  className="flex-grow"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                  </svg>
                  Edit
                </Button>
                
                {!address.isDefault && (
                  <Button
                    variant="glass"
                    size="sm"
                    className="flex-grow"
                    onClick={() => setAsDefault(address.id)}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    Set as Default
                  </Button>
                )}
                
                {!address.isDefault && (
                  <Button
                    variant="glass"
                    size="sm"
                    className="flex-grow text-red-400"
                    onClick={() => removeAddress(address.id)}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                    Remove
                  </Button>
                )}
              </div>
            </Card>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="w-16 h-16 glass rounded-full flex items-center justify-center mx-auto mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-text-secondary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          </div>
          <h3 className="text-lg font-bold mb-2">No saved addresses</h3>
          <p className="text-text-secondary mb-6">Add an address to get faster checkout</p>
          <Button variant="primary" onClick={() => setIsAddingAddress(true)}>
            Add New Address
          </Button>
        </div>
      )}
    </div>
  );
};

export default AddressesPanel;


================================================
File: src/components/profile/OrdersPanel.js
================================================
// Find line 200 and look for an apostrophe that needs escaping
// The error is likely in the store name "Levi's" which should be "Levi&apos;s"

// Partial fix for OrdersPanel.js - focus on the error area, around line 200
// This is based on the error message without seeing the exact code

'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Badge from '@/components/ui/Badge';
import Button from '@/components/ui/Button';

const OrdersPanel = () => {
  // Mock orders data
  const [orders, setOrders] = useState([
    {
      id: 'ORD5678901',
      date: 'April 12, 2025',
      status: 'Out for Delivery',
      statusCode: 'delivery',
      items: [
        {
          id: 1,
          name: 'Oversized Cotton T-shirt',
          price: 1299,
          quantity: 1,
          store: 'Zara',
          image: '/api/placeholder/400/320'
        },
        {
          id: 2,
          name: 'High Rise Skinny Jeans',
          price: 2499,
          quantity: 1,
          store: 'H&M',
          image: '/api/placeholder/400/320'
        }
      ],
      total: 3798,
      deliveryTime: '25 min',
      tracking: {
        estimatedDelivery: '15 mins',
        currentLocation: 'Nearby your location'
      }
    },
    {
      id: 'ORD4567890',
      date: 'April 10, 2025',
      status: 'Delivered',
      statusCode: 'completed',
      items: [
        {
          id: 3,
          name: 'Air Max Sneakers',
          price: 7999,
          quantity: 1,
          store: 'Nike',
          image: '/api/placeholder/400/320'
        }
      ],
      total: 7999,
      deliveryTime: 'Delivered',
      tracking: null
    },
    {
      id: 'ORD3456789',
      date: 'April 5, 2025',
      status: 'Delivered',
      statusCode: 'completed',
      items: [
        {
          id: 4,
          name: 'Floral Print Maxi Dress',
          price: 3599,
          quantity: 1,
          store: 'Mango',
          image: '/api/placeholder/400/320'
        }
      ],
      total: 3599,
      deliveryTime: 'Delivered',
      tracking: null
    }
  ]);
  
  // Handle status badge color
  const getStatusColor = (statusCode) => {
    switch(statusCode) {
      case 'pending': return 'warning';
      case 'processing': return 'info';
      case 'delivery': return 'primary';
      case 'completed': return 'success';
      case 'cancelled': return 'accent';
      default: return 'secondary';
    }
  };
  
  // Format currency
  const formatPrice = (price) => {
    return `₹${price.toFixed(2)}`;
  };
  
  return (
    <div className="space-y-6">
      {orders.map((order) => (
        <Card key={order.id} variant="glass" className="overflow-hidden">
          <div className="p-4">
            {/* Order header */}
            <div className="flex flex-wrap justify-between items-center mb-4">
              <div>
                <div className="text-sm text-text-secondary">Order #{order.id}</div>
                <div className="font-medium">{order.date}</div>
              </div>
              
              <Badge variant={getStatusColor(order.statusCode)}>
                {order.status}
              </Badge>
            </div>
            
            {/* Live tracking for out for delivery orders */}
            {order.statusCode === 'delivery' && order.tracking && (
              <div className="glass p-3 rounded-lg mb-4 bg-gradient-to-r from-purple-500/10 to-cyan-400/10">
                <div className="flex items-center">
                  <div className="w-8 h-8 rounded-full bg-purple-500 text-white flex items-center justify-center animate-pulse mr-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <div className="text-sm font-medium">Live Tracking</div>
                    <div className="text-xs text-text-secondary">Arriving in {order.tracking.estimatedDelivery}</div>
                  </div>
                </div>
                
                {/* Progress bar */}
                <div className="mt-2 flex items-center gap-2">
                  <div className="flex-grow h-2 glass rounded-full overflow-hidden">
                    <div className="h-full bg-gradient-to-r from-purple-500 to-cyan-400 w-3/4"></div>
                  </div>
                  <span className="text-xs">75%</span>
                </div>
              </div>
            )}
            
            {/* Order items */}
            <div className="space-y-4">
              {order.items.map((item) => (
                <div key={item.id} className="flex gap-3">
                  <div className="w-16 h-16 glass rounded-lg overflow-hidden">
                    <div 
                      className="w-full h-full bg-cover bg-center"
                      style={{ backgroundImage: `url(${item.image})` }}
                    />
                  </div>
                  
                  <div className="flex-1">
                    <div className="font-medium line-clamp-1">{item.name}</div>
                    <div className="text-sm text-text-secondary">{item.store}</div>
                    <div className="flex justify-between mt-1">
                      <span>{formatPrice(item.price)} x {item.quantity}</span>
                      <span className="font-bold">{formatPrice(item.price * item.quantity)}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
            
            {/* Order summary */}
            <div className="flex justify-between items-center mt-4 pt-4 border-t border-white/10">
              <div>
                <div className="text-sm text-text-secondary">Total Amount</div>
                <div className="font-bold">{formatPrice(order.total)}</div>
              </div>
              
              <div className="flex gap-2">
                {order.statusCode === 'delivery' && (
                  <Button
                    variant="primary"
                    size="sm"
                  >
                    Track Order
                  </Button>
                )}
                
                <Button
                  variant="glass"
                  size="sm"
                >
                  Order Details
                </Button>
              </div>
            </div>
          </div>
        </Card>
      ))}
      
      {orders.length === 0 && (
        <div className="text-center py-12">
          <div className="w-16 h-16 glass rounded-full flex items-center justify-center mx-auto mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-text-secondary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
            </svg>
          </div>
          <h3 className="text-lg font-bold mb-2">No orders yet</h3>
          <p className="text-text-secondary mb-6">You haven&apos;t placed any orders yet</p>
          <Button variant="primary">
            Browse Products
          </Button>
        </div>
      )}
    </div>
  );
};

export default OrdersPanel;


================================================
File: src/components/profile/PaymentMethodsPanel.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Badge from '@/components/ui/Badge';

const PaymentMethodsPanel = () => {
  // Mock payment methods data
  const [paymentMethods, setPaymentMethods] = useState([
    {
      id: 1,
      type: 'credit',
      name: 'Visa Ending in 4242',
      cardNumber: '•••• •••• •••• 4242',
      expiryDate: '09/26',
      isDefault: true,
      icon: (
        <svg className="h-6 w-8" viewBox="0 0 48 30" fill="none">
          <rect width="48" height="30" rx="4" fill="#2C2C2C"/>
          <path d="M18.5 19.5C21.5376 19.5 24 17.0376 24 14C24 10.9624 21.5376 8.5 18.5 8.5C15.4624 8.5 13 10.9624 13 14C13 17.0376 15.4624 19.5 18.5 19.5Z" fill="#EB001B"/>
          <path d="M29.5 19.5C32.5376 19.5 35 17.0376 35 14C35 10.9624 32.5376 8.5 29.5 8.5C26.4624 8.5 24 10.9624 24 14C24 17.0376 26.4624 19.5 29.5 19.5Z" fill="#F79E1B"/>
          <path d="M24 10.2539C25.0819 11.1937 25.7628 12.5254 25.7628 14.0004C25.7628 15.4754 25.0819 16.8071 24 17.7469C22.9181 16.8071 22.2372 15.4754 22.2372 14.0004C22.2372 12.5254 22.9181 11.1937 24 10.2539Z" fill="#FF5F00"/>
        </svg>
      )
    },
    {
      id: 2,
      type: 'credit',
      name: 'Mastercard Ending in 5353',
      cardNumber: '•••• •••• •••• 5353',
      expiryDate: '12/25',
      isDefault: false,
      icon: (
        <svg className="h-6 w-8" viewBox="0 0 48 30" fill="none">
          <rect width="48" height="30" rx="4" fill="#2C2C2C"/>
          <path d="M18.5 19.5C21.5376 19.5 24 17.0376 24 14C24 10.9624 21.5376 8.5 18.5 8.5C15.4624 8.5 13 10.9624 13 14C13 17.0376 15.4624 19.5 18.5 19.5Z" fill="#EB001B"/>
          <path d="M29.5 19.5C32.5376 19.5 35 17.0376 35 14C35 10.9624 32.5376 8.5 29.5 8.5C26.4624 8.5 24 10.9624 24 14C24 17.0376 26.4624 19.5 29.5 19.5Z" fill="#F79E1B"/>
          <path d="M24 10.2539C25.0819 11.1937 25.7628 12.5254 25.7628 14.0004C25.7628 15.4754 25.0819 16.8071 24 17.7469C22.9181 16.8071 22.2372 15.4754 22.2372 14.0004C22.2372 12.5254 22.9181 11.1937 24 10.2539Z" fill="#FF5F00"/>
        </svg>
      )
    },
    {
      id: 3,
      type: 'upi',
      name: 'Google Pay',
      upiId: 'sarah@okbank',
      isDefault: false,
      icon: (
        <svg className="h-6 w-6" viewBox="0 0 24 24" fill="none">
          <path d="M4.20105 5.47595L11.5334 0.86545C11.8079 0.706447 12.1921 0.706447 12.4666 0.86545L19.7989 5.47595C20.0734 5.63495 20.0734 6.02145 19.7989 6.18045L12.4666 10.791C12.1921 10.95 11.8079 10.95 11.5334 10.791L4.20105 6.18045C3.92655 6.02145 3.92655 5.63495 4.20105 5.47595Z" fill="#EA4335"/>
          <path d="M3.77542 15.0451L9.41842 17.9986C9.69292 18.1576 9.86592 18.4711 9.86592 18.8186V23.1451C9.86592 23.5681 9.45142 23.8561 9.08342 23.6636L3.44042 20.7081C3.16592 20.5491 2.99292 20.2356 2.99292 19.8881V15.5631C2.99242 15.1416 3.40692 14.8521 3.77542 15.0451Z" fill="#FBBC04"/>
          <path d="M14.1366 18.8175V23.1455C14.1366 23.5681 14.5511 23.8561 14.9191 23.6636L20.5621 20.7096C20.8366 20.5506 21.0096 20.2371 21.0096 19.8896V15.5631C21.0096 15.1406 20.5951 14.8526 20.2271 15.0451L14.5841 17.9991C14.3091 18.1576 14.1366 18.4711 14.1366 18.8175Z" fill="#34A853"/>
          <path d="M19.7985 12.8401L14.1545 15.7941C13.8795 15.9531 13.5025 15.9531 13.2285 15.7941L7.58447 12.8401C7.21647 12.6471 7.21647 12.1106 7.58447 11.9176L13.2285 8.96362C13.5035 8.80462 13.8805 8.80462 14.1545 8.96362L19.7985 11.9176C20.1665 12.1111 20.1665 12.6471 19.7985 12.8401Z" fill="#4285F4"/>
        </svg>
      )
    }
  ]);

  // States to manage the new payment method form
  const [isAddingPayment, setIsAddingPayment] = useState(false);
  const [paymentType, setPaymentType] = useState('credit');
  const [newPayment, setNewPayment] = useState({
    cardNumber: '',
    name: '',
    expiryDate: '',
    cvv: '',
    upiId: ''
  });

  // Handle remove payment method
  const removePaymentMethod = (paymentId) => {
    setPaymentMethods(paymentMethods.filter(payment => payment.id !== paymentId));
  };

  // Handle set as default
  const setAsDefault = (paymentId) => {
    setPaymentMethods(paymentMethods.map(payment => ({
      ...payment,
      isDefault: payment.id === paymentId
    })));
  };

  // Handle form input changes
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewPayment(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Format card number with spaces
  const formatCardNumber = (value) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];

    for (let i = 0; i < match.length; i += 4) {
      parts.push(match.substring(i, i + 4));
    }

    if (parts.length) {
      return parts.join(' ');
    } else {
      return value;
    }
  };

  // Handle card number input with formatting
  const handleCardNumberChange = (e) => {
    const formattedValue = formatCardNumber(e.target.value);
    setNewPayment(prev => ({
      ...prev,
      cardNumber: formattedValue
    }));
  };

  // Handle add payment method submission
  const handleAddPayment = (e) => {
    e.preventDefault();
    
    // Create new payment method object based on type
    let newPaymentObj;
    
    if (paymentType === 'credit') {
      // Get last 4 digits of card
      const last4 = newPayment.cardNumber.replace(/\s/g, '').slice(-4);
      
      newPaymentObj = {
        id: paymentMethods.length + 1,
        type: 'credit',
        name: `Card Ending in ${last4}`,
        cardNumber: `•••• •••• •••• ${last4}`,
        expiryDate: newPayment.expiryDate,
        isDefault: paymentMethods.length === 0,
        icon: (
          <svg className="h-6 w-8" viewBox="0 0 48 30" fill="none">
            <rect width="48" height="30" rx="4" fill="#2C2C2C"/>
            <path d="M18.5 19.5C21.5376 19.5 24 17.0376 24 14C24 10.9624 21.5376 8.5 18.5 8.5C15.4624 8.5 13 10.9624 13 14C13 17.0376 15.4624 19.5 18.5 19.5Z" fill="#EB001B"/>
            <path d="M29.5 19.5C32.5376 19.5 35 17.0376 35 14C35 10.9624 32.5376 8.5 29.5 8.5C26.4624 8.5 24 10.9624 24 14C24 17.0376 26.4624 19.5 29.5 19.5Z" fill="#F79E1B"/>
            <path d="M24 10.2539C25.0819 11.1937 25.7628 12.5254 25.7628 14.0004C25.7628 15.4754 25.0819 16.8071 24 17.7469C22.9181 16.8071 22.2372 15.4754 22.2372 14.0004C22.2372 12.5254 22.9181 11.1937 24 10.2539Z" fill="#FF5F00"/>
          </svg>
        )
      };
    } else if (paymentType === 'upi') {
      newPaymentObj = {
        id: paymentMethods.length + 1,
        type: 'upi',
        name: 'UPI',
        upiId: newPayment.upiId,
        isDefault: paymentMethods.length === 0,
        icon: (
          <svg className="h-6 w-6" viewBox="0 0 24 24" fill="none">
            <path d="M4.20105 5.47595L11.5334 0.86545C11.8079 0.706447 12.1921 0.706447 12.4666 0.86545L19.7989 5.47595C20.0734 5.63495 20.0734 6.02145 19.7989 6.18045L12.4666 10.791C12.1921 10.95 11.8079 10.95 11.5334 10.791L4.20105 6.18045C3.92655 6.02145 3.92655 5.63495 4.20105 5.47595Z" fill="#EA4335"/>
            <path d="M3.77542 15.0451L9.41842 17.9986C9.69292 18.1576 9.86592 18.4711 9.86592 18.8186V23.1451C9.86592 23.5681 9.45142 23.8561 9.08342 23.6636L3.44042 20.7081C3.16592 20.5491 2.99292 20.2356 2.99292 19.8881V15.5631C2.99242 15.1416 3.40692 14.8521 3.77542 15.0451Z" fill="#FBBC04"/>
            <path d="M14.1366 18.8175V23.1455C14.1366 23.5681 14.5511 23.8561 14.9191 23.6636L20.5621 20.7096C20.8366 20.5506 21.0096 20.2371 21.0096 19.8896V15.5631C21.0096 15.1406 20.5951 14.8526 20.2271 15.0451L14.5841 17.9991C14.3091 18.1576 14.1366 18.4711 14.1366 18.8175Z" fill="#34A853"/>
            <path d="M19.7985 12.8401L14.1545 15.7941C13.8795 15.9531 13.5025 15.9531 13.2285 15.7941L7.58447 12.8401C7.21647 12.6471 7.21647 12.1106 7.58447 11.9176L13.2285 8.96362C13.5035 8.80462 13.8805 8.80462 14.1545 8.96362L19.7985 11.9176C20.1665 12.1111 20.1665 12.6471 19.7985 12.8401Z" fill="#4285F4"/>
          </svg>
        )
      };
    }
    
    // Add to payment methods list
    setPaymentMethods([...paymentMethods, newPaymentObj]);
    
    // Reset form and close it
    setNewPayment({
      cardNumber: '',
      name: '',
      expiryDate: '',
      cvv: '',
      upiId: ''
    });
    setIsAddingPayment(false);
  };

  return (
    <div>
      <div className="mb-6 flex justify-between items-center">
        <h2 className="text-lg font-display font-bold">Payment Methods</h2>
        
        <Button 
          variant="primary" 
          size="sm"
          className="flex items-center"
          onClick={() => setIsAddingPayment(!isAddingPayment)}
        >
          {isAddingPayment ? (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
              Cancel
            </>
          ) : (
            <>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              Add Payment Method
            </>
          )}
        </Button>
      </div>
      
      {/* Add New Payment Method Form */}
      {isAddingPayment && (
        <Card variant="glass" className="p-4 mb-6">
          <h3 className="font-bold mb-4">Add Payment Method</h3>
          
          {/* Payment Type Selector */}
          <div className="mb-4">
            <div className="flex p-1 glass rounded-full max-w-xs">
              <button
                className={`flex-1 py-2 px-4 rounded-full transition ${
                  paymentType === 'credit' 
                    ? 'bg-white/90 text-gray-900 dark:text-gray-900' 
                    : 'hover:bg-white/10'
                }`}
                onClick={() => setPaymentType('credit')}
              >
                Card
              </button>
              <button
                className={`flex-1 py-2 px-4 rounded-full transition ${
                  paymentType === 'upi' 
                    ? 'bg-white/90 text-gray-900 dark:text-gray-900' 
                    : 'hover:bg-white/10'
                }`}
                onClick={() => setPaymentType('upi')}
              >
                UPI
              </button>
            </div>
          </div>
          
          <form onSubmit={handleAddPayment}>
            {paymentType === 'credit' ? (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-1">Card Number</label>
                  <input 
                    type="text" 
                    name="cardNumber"
                    placeholder="1234 5678 9012 3456"
                    className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                    value={newPayment.cardNumber}
                    onChange={handleCardNumberChange}
                    maxLength="19"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-1">Cardholder Name</label>
                  <input 
                    type="text" 
                    name="name"
                    placeholder="Name on card"
                    className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                    value={newPayment.name}
                    onChange={handleInputChange}
                    required
                  />
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">Expiry Date</label>
                    <input 
                      type="text" 
                      name="expiryDate"
                      placeholder="MM/YY"
                      className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                      value={newPayment.expiryDate}
                      onChange={handleInputChange}
                      maxLength="5"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-1">CVV</label>
                    <input 
                      type="password" 
                      name="cvv"
                      placeholder="•••"
                      className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                      value={newPayment.cvv}
                      onChange={handleInputChange}
                      maxLength="4"
                      required
                    />
                  </div>
                </div>
              </div>
            ) : (
              <div>
                <label className="block text-sm font-medium mb-1">UPI ID</label>
                <input 
                  type="text" 
                  name="upiId"
                  placeholder="username@bankname"
                  className="w-full glass rounded-lg px-3 py-2 bg-transparent border-none placeholder-text-secondary/50 focus:outline-none focus:ring-1 focus:ring-purple-500"
                  value={newPayment.upiId}
                  onChange={handleInputChange}
                  required
                />
                
                <div className="flex flex-wrap gap-2 mt-4">
                  <Button type="button" variant="glass" className="p-2" onClick={() => setNewPayment(prev => ({ ...prev, upiId: 'username@okbank' }))}>
                    <svg className="h-6 w-6" viewBox="0 0 24 24" fill="none">
                      <path d="M4.20105 5.47595L11.5334 0.86545C11.8079 0.706447 12.1921 0.706447 12.4666 0.86545L19.7989 5.47595C20.0734 5.63495 20.0734 6.02145 19.7989 6.18045L12.4666 10.791C12.1921 10.95 11.8079 10.95 11.5334 10.791L4.20105 6.18045C3.92655 6.02145 3.92655 5.63495 4.20105 5.47595Z" fill="#EA4335"/>
                      <path d="M3.77542 15.0451L9.41842 17.9986C9.69292 18.1576 9.86592 18.4711 9.86592 18.8186V23.1451C9.86592 23.5681 9.45142 23.8561 9.08342 23.6636L3.44042 20.7081C3.16592 20.5491 2.99292 20.2356 2.99292 19.8881V15.5631C2.99242 15.1416 3.40692 14.8521 3.77542 15.0451Z" fill="#FBBC04"/>
                      <path d="M14.1366 18.8175V23.1455C14.1366 23.5681 14.5511 23.8561 14.9191 23.6636L20.5621 20.7096C20.8366 20.5506 21.0096 20.2371 21.0096 19.8896V15.5631C21.0096 15.1406 20.5951 14.8526 20.2271 15.0451L14.5841 17.9991C14.3091 18.1576 14.1366 18.4711 14.1366 18.8175Z" fill="#34A853"/>
                      <path d="M19.7985 12.8401L14.1545 15.7941C13.8795 15.9531 13.5025 15.9531 13.2285 15.7941L7.58447 12.8401C7.21647 12.6471 7.21647 12.1106 7.58447 11.9176L13.2285 8.96362C13.5035 8.80462 13.8805 8.80462 14.1545 8.96362L19.7985 11.9176C20.1665 12.1111 20.1665 12.6471 19.7985 12.8401Z" fill="#4285F4"/>
                    </svg>
                  </Button>
                  <Button type="button" variant="glass" className="p-2" onClick={() => setNewPayment(prev => ({ ...prev, upiId: 'username@paytm' }))}>
                    <svg className="h-6 w-6" viewBox="0 0 24 24" fill="none">
                      <rect width="24" height="24" rx="4" fill="#00BAF2"/>
                      <path d="M16.1169 8.12773H14.2966V15.8741H16.1169V8.12773Z" fill="white"/>
                      <path d="M12.7064 11.5117C12.7064 10.1553 11.7878 9.23665 10.4313 9.23665C9.07483 9.23665 8.15619 10.1553 8.15619 11.5117C8.15619 12.8682 9.07483 13.7868 10.4313 13.7868C11.7878 13.7868 12.7064 12.8682 12.7064 11.5117ZM10.4313 12.1921C10.0606 12.1921 9.75097 11.8825 9.75097 11.5117C9.75097 11.141 10.0606 10.8314 10.4313 10.8314C10.8021 10.8314 11.1117 11.141 11.1117 11.5117C11.1117 11.8825 10.8021 12.1921 10.4313 12.1921Z" fill="white"/>
                    </svg>
                  </Button>
                  <Button type="button" variant="glass" className="p-2" onClick={() => setNewPayment(prev => ({ ...prev, upiId: 'username@ybl' }))}>
                    <svg className="h-6 w-6" viewBox="0 0 24 24" fill="none">
                      <rect width="24" height="24" rx="4" fill="#6739B7"/>
                      <path d="M14.9205 7.74316L12.0012 10.6625L9.08183 7.74316H7.71826L12.0012 12.0261L16.284 7.74316H14.9205Z" fill="white"/>
                      <path d="M7.71826 16.2829H9.08183L12.0012 13.3636L14.9205 16.2829H16.284L12.0012 12L7.71826 16.2829Z" fill="white"/>
                    </svg>
                  </Button>
                </div>
              </div>
            )}
            
            <div className="flex justify-end mt-6">
              <Button 
                type="submit" 
                variant="primary"
              >
                Save Payment Method
              </Button>
            </div>
          </form>
        </Card>
      )}
      
      {/* Payment Methods List */}
      {paymentMethods.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {paymentMethods.map((payment) => (
            <Card 
              key={payment.id}
              variant="glass" 
              className={`p-4 transition-all relative ${
                payment.isDefault ? 'border-2 border-purple-500 bg-purple-500/10' : ''
              }`}
            >
              <div className="flex justify-between items-center mb-4">
                <div className="flex items-center">
                  <div className="mr-3">
                    {payment.icon}
                  </div>
                  <div>
                    <div className="font-medium">{payment.name}</div>
                    {payment.type === 'credit' ? (
                      <div className="text-sm text-text-secondary">
                        {payment.cardNumber} • Expires {payment.expiryDate}
                      </div>
                    ) : (
                      <div className="text-sm text-text-secondary">
                        {payment.upiId}
                      </div>
                    )}
                  </div>
                </div>
                
                {payment.isDefault && (
                  <Badge variant="primary" size="sm">Default</Badge>
                )}
              </div>
              
              <div className="flex flex-wrap gap-2">
                {!payment.isDefault && (
                  <Button
                    variant="glass"
                    size="sm"
                    onClick={() => setAsDefault(payment.id)}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    Set as Default
                  </Button>
                )}
                
                {!payment.isDefault && (
                  <Button
                    variant="glass"
                    size="sm"
                    className="text-red-400"
                    onClick={() => removePaymentMethod(payment.id)}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                    </svg>
                    Remove
                  </Button>
                )}
              </div>
            </Card>
          ))}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="w-16 h-16 glass rounded-full flex items-center justify-center mx-auto mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-text-secondary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
            </svg>
          </div>
          <h3 className="text-lg font-bold mb-2">No payment methods</h3>
          <p className="text-text-secondary mb-6">Add a payment method for faster checkout</p>
          <Button variant="primary" onClick={() => setIsAddingPayment(true)}>
            Add Payment Method
          </Button>
        </div>
      )}
      
      {/* Security Note */}
      <div className="mt-8 glass p-4 rounded-lg">
        <div className="flex items-start">
          <div className="glass rounded-full p-2 mr-3">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-teal-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
            </svg>
          </div>
          <div>
            <h4 className="font-medium">Payment Security</h4>
            <p className="text-sm text-text-secondary mt-1">
              Your payment information is securely stored using industry-standard encryption. We never store your full card details on our servers.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentMethodsPanel;


================================================
File: src/components/profile/ProfileContent.js
================================================
// ProfileContent.js
'use client';

import { AnimatePresence, motion } from 'framer-motion';
import OrdersPanel from './OrdersPanel';
import WishlistPanel from './WishlistPanel';
import AddressesPanel from './AddressesPanel';
import PaymentMethodsPanel from './PaymentMethodsPanel';
import { useTabContext } from './ProfileTabs'; // Import the context hook

const ProfileContent = () => {
  // Use the shared context instead of local state
  const { activeTab } = useTabContext();
  
  // List of tab panels
  const tabPanels = {
    orders: <OrdersPanel />,
    wishlist: <WishlistPanel />,
    addresses: <AddressesPanel />,
    payment: <PaymentMethodsPanel />
  };
  
  return (
    <AnimatePresence mode="wait">
      <motion.div
        key={activeTab}
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        exit={{ opacity: 0, y: -10 }}
        transition={{ duration: 0.2 }}
      >
        {tabPanels[activeTab]}
      </motion.div>
    </AnimatePresence>
  );
};

export default ProfileContent;


================================================
File: src/components/profile/ProfileHeader.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Badge from '@/components/ui/Badge';
import { useRouter } from 'next/navigation';

const ProfileHeader = () => {
  const router = useRouter();
  // Mock user data
  const [user, setUser] = useState({
    name: 'Sarah Johnson',
    email: 'sarah.j@example.com',
    phone: '+91 98765 43210',
    avatar: '/api/placeholder/400/400',
    level: 'Gold Member',
    points: 2456,
    tier: 2
  });
  
  // Function to handle navigation to edit profile
  const handleEditProfile = () => {
    router.push('/profile/edit');
  };
  
  // Function to handle navigation to settings
  const handleSettings = () => {
    router.push('/profile/settings');
  };
  
  return (
    <Card variant="glass" className="relative mt-4 rounded-3xl overflow-hidden pt-6">
      {/* Background pattern - simplified and less prominent */}
      <div className="absolute inset-0 opacity-10">
        <svg width="100%" height="100%" viewBox="0 0 100 100" preserveAspectRatio="none">
          <defs>
            <pattern id="pattern1" width="100" height="100" patternUnits="userSpaceOnUse">
              <circle cx="50" cy="50" r="40" fill="url(#grad1)" />
            </pattern>
            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor="var(--color-purple)" stopOpacity="0.3" />
              <stop offset="100%" stopColor="var(--color-teal)" stopOpacity="0.2" />
            </linearGradient>
          </defs>
          <rect width="100%" height="100%" fill="url(#pattern1)" />
        </svg>
      </div>
      
      {/* Badge for member level - Positioned at top with padding to prevent cutoff */}
      <div className="flex justify-center mb-4">
        <Badge 
          variant="glass" 
          size="md"
          className="bg-gradient-to-r from-yellow-300 to-amber-500 text-white font-bold px-4 py-2"
        >
          {user.level}
        </Badge>
      </div>
      
      {/* User info */}
      <div className="relative z-10 p-6 pt-0 flex flex-col items-center text-center">
        <h1 className="text-2xl font-display font-bold">
          {user.name}
        </h1>
        <p className="text-text-secondary mt-1">
          {user.email}
        </p>
        
        {/* Progress bar for next tier */}
        <div className="mt-6 w-full max-w-md">
          <div className="flex justify-between text-xs text-text-secondary mb-1">
            <span>{user.points} points</span>
            <span>Next tier: 5000 points</span>
          </div>
          <div className="h-2 w-full glass rounded-full overflow-hidden">
            <div 
              className="h-full bg-gradient-to-r from-purple-500 to-cyan-400" 
              style={{width: `${(user.points / 5000) * 100}%`}}
            ></div>
          </div>
        </div>
        
        {/* Action buttons */}
        <div className="mt-6 flex gap-4">
          <Button 
            variant="glass" 
            size="md"
            className="px-6"
            onClick={handleEditProfile}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
            </svg>
            Edit Profile
          </Button>
          
          <Button 
            variant="glass" 
            size="md"
            className="px-6"
            onClick={handleSettings}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            Settings
          </Button>
        </div>
      </div>
    </Card>
  );
};

export default ProfileHeader;



================================================
File: src/components/profile/ProfileStats.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';

const ProfileStats = () => {
  // Mock stats data
  const [stats, setStats] = useState([
    {
      id: 1,
      title: 'Orders',
      value: 24,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
        </svg>
      ),
      color: 'text-purple-500'
    },
    {
      id: 2,
      title: 'Wishlist',
      value: 16,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
        </svg>
      ),
      color: 'text-pink-500'
    },
    {
      id: 3,
      title: 'Saved Addresses',
      value: 3,
      icon: (
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
      ),
      color: 'text-teal-500'
    }
  ]);
  
  return (
    <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-4">
      {stats.map((stat) => (
        <Card 
          key={stat.id}
          variant="glass" 
          className="p-6 transition-transform duration-300 hover:-translate-y-1"
        >
          <div className="flex flex-col items-center text-center">
            <div className={`w-12 h-12 glass flex items-center justify-center rounded-full mb-3 ${stat.color}`}>
              {stat.icon}
            </div>
            <h3 className="text-2xl font-display font-bold mb-1">
              {stat.value}
            </h3>
            <p className="text-text-secondary">
              {stat.title}
            </p>
          </div>
        </Card>
      ))}
    </div>
  );
};

export default ProfileStats;


================================================
File: src/components/profile/ProfileTabs.js
================================================
'use client';

import { useState, useContext, createContext, useRef, useEffect } from 'react';

// Create a context for the active tab
const TabContext = createContext({
  activeTab: 'orders',
  setActiveTab: () => {},
});

// Custom hook to use the tab context
export const useTabContext = () => useContext(TabContext);

// Provider component to wrap both ProfileTabs and ProfileContent
export const ProfileTabProvider = ({ children }) => {
  const [activeTab, setActiveTab] = useState('orders');
  
  return (
    <TabContext.Provider value={{ activeTab, setActiveTab }}>
      {children}
    </TabContext.Provider>
  );
};

const ProfileTabs = () => {
  const { activeTab, setActiveTab } = useTabContext();
  const tabsRef = useRef({});
  const [indicatorStyle, setIndicatorStyle] = useState({});
  
  const tabs = [
    { id: 'orders', label: 'Orders', badge: 3 },
    { id: 'wishlist', label: 'Wishlist', badge: null },
    { id: 'addresses', label: 'Addresses', badge: null },
    { id: 'payment', label: 'Payment Methods', badge: null },
  ];

  // Update indicator position when active tab changes
  useEffect(() => {
    // Make sure the ref exists for the active tab
    if (tabsRef.current[activeTab]) {
      const tabElement = tabsRef.current[activeTab];
      const tabRect = tabElement.getBoundingClientRect();
      
      setIndicatorStyle({
        width: `${tabRect.width - 20}px`, // Slightly narrower than the tab
        left: `${tabElement.offsetLeft + tabRect.width / 2}px`,
        transform: 'translateX(-50%)'
      });
    }
  }, [activeTab]);
  
  return (
    <div className="relative mb-6">
      <div className="flex items-center overflow-x-auto scrollbar-none pb-2">
        <div className="glass rounded-full px-1 py-1 flex items-center">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              ref={el => tabsRef.current[tab.id] = el}
              className={`relative font-display font-bold text-sm px-5 py-2.5 rounded-full transition-all ${
                activeTab === tab.id
                ? 'bg-white/90 text-gray-900 dark:text-gray-900'
                : 'bg-transparent hover:text-white/80'
              }`}
              onClick={() => setActiveTab(tab.id)}
            >
              {tab.label}
              
              {tab.badge && (
                <span className="absolute -top-1 -right-1 inline-flex">
                  <span className="absolute inline-flex h-4 w-4 rounded-full bg-purple-500 opacity-50 animate-ping"></span>
                  <span className="relative flex items-center justify-center rounded-full h-4 w-4 bg-purple-500">
                    <span className="text-[10px] text-white font-bold">{tab.badge}</span>
                  </span>
                </span>
              )}
            </button>
          ))}
        </div>
      </div>
      
      {/* Animated highlight line that moves under the active tab - Now properly positioned */}
      <div 
        className="absolute bottom-0 h-0.5 bg-gradient-to-r from-purple-500 to-cyan-400 transition-all duration-300 rounded" 
        style={indicatorStyle}
      />
    </div>
  );
};

export default ProfileTabs;


================================================
File: src/components/profile/SettingsPage.js
================================================
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Header from '@/components/layout/Header';
import Container from '@/components/layout/Container';
import GlassPanels from '@/components/layout/GlassPanels';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Badge from '@/components/ui/Badge';

export default function SettingsPage() {
  const router = useRouter();
  
  // Settings state
  const [settings, setSettings] = useState({
    notifications: {
      orderUpdates: true,
      promotions: true,
      deliveryAlerts: true,
      newArrivals: false,
      recommendations: true
    },
    privacy: {
      profileVisibility: 'public',
      activitySharing: true,
      dataCollection: 'limited'
    },
    appearance: {
      theme: 'dark',
      fontSize: 'medium',
      animationsEnabled: true
    }
  });
  
  // Handle toggle changes
  const handleToggleChange = (category, setting) => {
    setSettings({
      ...settings,
      [category]: {
        ...settings[category],
        [setting]: !settings[category][setting]
      }
    });
  };
  
  // Handle select changes
  const handleSelectChange = (category, setting, value) => {
    setSettings({
      ...settings,
      [category]: {
        ...settings[category],
        [setting]: value
      }
    });
  };
  
  // Handle form submission
  const handleSave = () => {
    // Simulate API call to save settings
    setTimeout(() => {
      // Navigate back to profile page
      router.push('/profile');
    }, 500);
  };
  
  // Handle cancel and return to profile
  const handleCancel = () => {
    router.push('/profile');
  };
  
  return (
    <>
      <GlassPanels />
      
      <Header />
      
      <Container className="pb-20 pt-2">
        <div className="my-6">
          <h1 className="text-3xl font-display font-bold mb-1">
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
              Settings
            </span>
          </h1>
          <p className="text-text-secondary">
            Manage your account preferences
          </p>
        </div>
        
        <div className="space-y-6">
          {/* Notifications Settings */}
          <Card variant="glass" className="p-6">
            <h2 className="text-xl font-display font-bold mb-4">Notifications</h2>
            
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Order Updates</h3>
                  <p className="text-sm text-text-secondary">Get notified about status changes to your orders</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.orderUpdates} 
                    onChange={() => handleToggleChange('notifications', 'orderUpdates')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Promotions & Discounts</h3>
                  <p className="text-sm text-text-secondary">Receive notifications about deals and offers</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.promotions} 
                    onChange={() => handleToggleChange('notifications', 'promotions')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Delivery Alerts</h3>
                  <p className="text-sm text-text-secondary">Get real-time updates about your delivery status</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.deliveryAlerts} 
                    onChange={() => handleToggleChange('notifications', 'deliveryAlerts')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">New Arrivals</h3>
                  <p className="text-sm text-text-secondary">Stay updated on new products and collections</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.newArrivals} 
                    onChange={() => handleToggleChange('notifications', 'newArrivals')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Personalized Recommendations</h3>
                  <p className="text-sm text-text-secondary">Get product suggestions based on your preferences</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.notifications.recommendations} 
                    onChange={() => handleToggleChange('notifications', 'recommendations')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
            </div>
          </Card>
          
          {/* Privacy Settings */}
          <Card variant="glass" className="p-6">
            <h2 className="text-xl font-display font-bold mb-4">Privacy</h2>
            
            <div className="space-y-4">
              <div>
                <h3 className="font-medium mb-2">Profile Visibility</h3>
                <p className="text-sm text-text-secondary mb-3">Control who can see your profile information</p>
                
                <div className="flex gap-2">
                  <Button
                    variant={settings.privacy.profileVisibility === 'public' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'profileVisibility', 'public')}
                  >
                    Public
                  </Button>
                  <Button
                    variant={settings.privacy.profileVisibility === 'friends' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'profileVisibility', 'friends')}
                  >
                    Friends Only
                  </Button>
                  <Button
                    variant={settings.privacy.profileVisibility === 'private' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'profileVisibility', 'private')}
                  >
                    Private
                  </Button>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Activity Sharing</h3>
                  <p className="text-sm text-text-secondary">Share your shopping activity and reviews</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.privacy.activitySharing} 
                    onChange={() => handleToggleChange('privacy', 'activitySharing')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Data Collection</h3>
                <p className="text-sm text-text-secondary mb-3">Manage how we collect data to personalize your experience</p>
                
                <div className="flex gap-2">
                  <Button
                    variant={settings.privacy.dataCollection === 'full' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'dataCollection', 'full')}
                  >
                    Full Access
                  </Button>
                  <Button
                    variant={settings.privacy.dataCollection === 'limited' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'dataCollection', 'limited')}
                  >
                    Limited
                  </Button>
                  <Button
                    variant={settings.privacy.dataCollection === 'minimal' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('privacy', 'dataCollection', 'minimal')}
                  >
                    Minimal
                  </Button>
                </div>
              </div>
            </div>
          </Card>
          
          {/* Appearance Settings */}
          <Card variant="glass" className="p-6">
            <h2 className="text-xl font-display font-bold mb-4">Appearance</h2>
            
            <div className="space-y-4">
              <div>
                <h3 className="font-medium mb-2">Theme</h3>
                <div className="flex gap-2">
                  <Button
                    variant={settings.appearance.theme === 'light' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'theme', 'light')}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                    </svg>
                    Light
                  </Button>
                  <Button
                    variant={settings.appearance.theme === 'dark' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'theme', 'dark')}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                    </svg>
                    Dark
                  </Button>
                  <Button
                    variant={settings.appearance.theme === 'system' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'theme', 'system')}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                    System
                  </Button>
                </div>
              </div>
              
              <div>
                <h3 className="font-medium mb-2">Font Size</h3>
                <div className="flex gap-2">
                  <Button
                    variant={settings.appearance.fontSize === 'small' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'fontSize', 'small')}
                  >
                    Small
                  </Button>
                  <Button
                    variant={settings.appearance.fontSize === 'medium' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'fontSize', 'medium')}
                  >
                    Medium
                  </Button>
                  <Button
                    variant={settings.appearance.fontSize === 'large' ? 'primary' : 'glass'}
                    size="sm"
                    onClick={() => handleSelectChange('appearance', 'fontSize', 'large')}
                  >
                    Large
                  </Button>
                </div>
              </div>
              
              <div className="flex justify-between items-center">
                <div>
                  <h3 className="font-medium">Enable Animations</h3>
                  <p className="text-sm text-text-secondary">Toggle UI animations and transitions</p>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input 
                    type="checkbox" 
                    checked={settings.appearance.animationsEnabled} 
                    onChange={() => handleToggleChange('appearance', 'animationsEnabled')}
                    className="sr-only peer"
                  />
                  <div className="w-11 h-6 bg-gray-700 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-purple-500"></div>
                </label>
              </div>
            </div>
          </Card>
          
          {/* Account Settings */}
          <Card variant="glass" className="p-6">
            <h2 className="text-xl font-display font-bold mb-4">Account</h2>
            
            <div className="space-y-4">
              <div>
                <Button 
                  variant="glass" 
                  className="w-full md:w-auto flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                  Change Password
                </Button>
              </div>
              
              <div>
                <Button 
                  variant="glass" 
                  className="w-full md:w-auto flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                  </svg>
                  Two-Factor Authentication
                </Button>
              </div>
              
              <div>
                <Button 
                  variant="glass" 
                  className="w-full md:w-auto text-red-500 flex items-center"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                  Delete Account
                </Button>
              </div>
            </div>
          </Card>
        </div>
        
        <div className="flex justify-end gap-4 mt-6">
          <Button 
            variant="glass"
            onClick={handleCancel}
          >
            Cancel
          </Button>
          
          <Button 
            variant="primary"
            onClick={handleSave}
          >
            Save Changes
          </Button>
        </div>
      </Container>
    </>
  );
}


================================================
File: src/components/profile/WishlistPanel.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import Badge from '@/components/ui/Badge';

const WishlistPanel = () => {
  // Mock wishlist data
  const [wishlistItems, setWishlistItems] = useState([
    {
      id: 1,
      name: 'Floral Print Maxi Dress',
      price: 3599,
      originalPrice: 4999,
      store: 'Mango',
      deliveryTime: '45 min',
      rating: 4.5,
      inStock: true,
      image: '/api/placeholder/400/320',
    },
    {
      id: 2,
      name: 'Chunky Platform Sneakers',
      price: 4999,
      store: 'Nike',
      deliveryTime: '35 min',
      rating: 4.8,
      inStock: true,
      image: '/api/placeholder/400/320',
    },
    {
      id: 3,
      name: 'Oversized Denim Jacket',
      price: 2999,
      originalPrice: 3999,
      store: 'Zara',
      deliveryTime: '25 min',
      rating: 4.7,
      inStock: true,
      image: '/api/placeholder/400/320',
    },
    {
      id: 4,
      name: 'Knitted Cardigan',
      price: 1899,
      store: 'H&M',
      deliveryTime: '30 min',
      rating: 4.2,
      inStock: false,
      image: '/api/placeholder/400/320',
    },
  ]);
  
  // Handle remove from wishlist
  const removeFromWishlist = (itemId) => {
    setWishlistItems(wishlistItems.filter(item => item.id !== itemId));
  };
  
  // Handle add to cart
  const addToCart = (itemId) => {
    // This would normally make an API call to add to cart
    console.log(`Added item #${itemId} to cart`);
  };
  
  // Format currency
  const formatPrice = (price) => {
    return `₹${price.toFixed(2)}`;
  };
  
  // Calculate discount percentage
  const calculateDiscount = (item) => {
    if (!item.originalPrice) return null;
    const discount = ((item.originalPrice - item.price) / item.originalPrice) * 100;
    return Math.round(discount);
  };
  
  return (
    <div>
      {wishlistItems.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {wishlistItems.map((item) => {
            const discountPercent = calculateDiscount(item);
            
            return (
              <Card
                key={item.id}
                variant="glass"
                className="overflow-hidden transition-all duration-300 hover:-translate-y-1"
              >
                <div className="relative h-48 bg-cover bg-center"
                  style={{ backgroundImage: `url(${item.image})` }}>
                  {discountPercent && (
                    <div className="absolute top-2 right-2">
                      <Badge variant="accent" size="sm">{discountPercent}% OFF</Badge>
                    </div>
                  )}
                  
                  {!item.inStock && (
                    <div className="absolute inset-0 bg-black/60 flex items-center justify-center">
                      <Badge variant="glass" size="md" className="bg-white/20">Out of Stock</Badge>
                    </div>
                  )}
                  
                  <div className="absolute bottom-0 left-0 right-0 glass p-2 flex justify-between items-center text-xs">
                    <div className="flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-yellow-400 mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                      <span>{item.rating}</span>
                    </div>
                    <span>{item.store}</span>
                  </div>
                </div>
                
                <div className="p-4">
                  <h3 className="font-medium line-clamp-1">{item.name}</h3>
                  <div className="flex justify-between items-end mt-2">
                    <div className="flex items-end">
                      <span className="font-bold text-primary">{formatPrice(item.price)}</span>
                      {item.originalPrice && (
                        <span className="text-xs text-text-secondary line-through ml-1">
                          {formatPrice(item.originalPrice)}
                        </span>
                      )}
                    </div>
                    <span className="text-xs text-text-secondary">{item.deliveryTime}</span>
                  </div>
                  
                  <div className="flex gap-2 mt-4">
                    <Button 
                      variant="glass" 
                      size="sm"
                      className="text-red-400 flex-grow"
                      onClick={() => removeFromWishlist(item.id)}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                      Remove
                    </Button>
                    
                    <Button 
                      variant="primary" 
                      size="sm"
                      className="flex-grow"
                      onClick={() => addToCart(item.id)}
                      disabled={!item.inStock}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                      </svg>
                      {item.inStock ? 'Add to Cart' : 'Out of Stock'}
                    </Button>
                  </div>
                </div>
              </Card>
            );
          })}
        </div>
      ) : (
        <div className="text-center py-12">
          <div className="w-16 h-16 glass rounded-full flex items-center justify-center mx-auto mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-text-secondary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
          </div>
          <h3 className="text-lg font-bold mb-2">Your wishlist is empty</h3>
          <p className="text-text-secondary mb-6">Save items you like to your wishlist</p>
          <Button variant="primary">
            Browse Products
          </Button>
        </div>
      )}
      
      {wishlistItems.length > 0 && (
        <div className="mt-8 text-center">
          <Button variant="primary" size="lg" className="px-10">
            Add All to Cart
          </Button>
        </div>
      )}
    </div>
  );
};

export default WishlistPanel;


================================================
File: src/components/reels/ReelCard.js
================================================
'use client';

import { useState, useRef, useEffect } from 'react';
import { useSwipeable } from 'react-swipeable';
import Card from '@/components/ui/Card';
import Badge from '@/components/ui/Badge';
import Button from '@/components/ui/Button';
import { useReelStore } from './ReelStore';

const ReelCard = ({ 
  reel, 
  onSwipe, 
  showInstructions = false,
  onInstructionsShown = () => {},
  isTransitioning = false // Add transitioning prop with default
}) => {
  const { isInWishlist } = useReelStore();
  const [isMuted, setIsMuted] = useState(true);
  const [isPlaying, setIsPlaying] = useState(true);
  const [progress, setProgress] = useState(0);
  const [showControls, setShowControls] = useState(false);
  const videoRef = useRef(null);
  const progressIntervalRef = useRef(null);
  
  // Hide instructions after delay and notify parent
  useEffect(() => {
    if (showInstructions) {
      const timer = setTimeout(() => {
        onInstructionsShown(); // Call the callback to notify parent
      }, 3000);
      
      return () => clearTimeout(timer);
    }
  }, [showInstructions, onInstructionsShown]);
  
  // Set up swipe handlers
  const swipeHandlers = useSwipeable({
    onSwipedLeft: () => !isTransitioning && onSwipe('left'),  // Reject, only if not transitioning
    onSwipedRight: () => !isTransitioning && onSwipe('right'), // Like, only if not transitioning
    trackMouse: true,
    preventDefaultTouchmoveEvent: true,
  });
  
  // Initialize video playback and progress tracking
  useEffect(() => {
    const videoElement = videoRef.current;
    
    if (videoElement) {
      videoElement.muted = isMuted;
      
      if (isPlaying && !isTransitioning) {
        const playPromise = videoElement.play();
        
        // Handle play promise properly to avoid the error
        if (playPromise !== undefined) {
          playPromise.catch(error => {
            // Auto-play was prevented, handle silently
            console.log("Auto-play prevented:", error);
          });
        }
        
        // Set up progress tracking
        progressIntervalRef.current = setInterval(() => {
          if (videoElement.duration) {
            setProgress((videoElement.currentTime / videoElement.duration) * 100);
          }
        }, 100);
      } else {
        // Pause video during transitions to prevent errors
        try {
          videoElement.pause();
        } catch (e) {
          // Ignore pause errors
        }
        clearInterval(progressIntervalRef.current);
      }
    }
    
    return () => {
      clearInterval(progressIntervalRef.current);
      // Ensure video is properly cleaned up on component unmount
      if (videoRef.current) {
        try {
          videoRef.current.pause();
          videoRef.current.src = ""; // Clear the source
        } catch (e) {
          // Ignore errors during cleanup
        }
      }
    };
  }, [isPlaying, isMuted, reel.id, isTransitioning]);
  
  // Toggle video play/pause
  const togglePlay = (e) => {
    e.stopPropagation();
    if (!isTransitioning) {
      setIsPlaying(!isPlaying);
    }
  };
  
  // Toggle mute/unmute
  const toggleMute = (e) => {
    e.stopPropagation();
    if (!isTransitioning) {
      setIsMuted(!isMuted);
    }
  };
  
  // Format numbers for display (e.g., 1.2k)
  const formatNumber = (num) => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + 'M';
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + 'k';
    }
    return num.toString();
  };
  
  // Format price with currency
  const formatPrice = (price) => {
    return `₹${price.toFixed(2)}`;
  };
  
  // Calculate discount percentage
  const calculateDiscount = () => {
    if (!reel.product.originalPrice) return null;
    const discount = ((reel.product.originalPrice - reel.product.price) / reel.product.originalPrice) * 100;
    return Math.round(discount);
  };
  
  // Handle like action
  const handleLike = (e) => {
    e.stopPropagation();
    if (!isTransitioning) {
      onSwipe('right');
    }
  };
  
  // Handle reject action
  const handleReject = (e) => {
    e.stopPropagation();
    if (!isTransitioning) {
      onSwipe('left');
    }
  };
  
  const discountPercent = calculateDiscount();
  const inWishlist = isInWishlist(reel.id);
  
  return (
    <Card 
      variant="glass" 
      className="w-full h-full relative overflow-hidden"
      {...swipeHandlers}
      onMouseEnter={() => setShowControls(true)}
      onMouseLeave={() => setShowControls(false)}
    >
      {/* Video element */}
      <div className="absolute inset-0 bg-gray-900">
        <video
          ref={videoRef}
          className="w-full h-full object-cover"
          poster={reel.posterUrl}
          loop
          playsInline
          onClick={togglePlay}
          preload="metadata"
        >
          <source src={reel.videoUrl} type="video/mp4" />
          Your browser does not support the video tag.
        </video>
      </div>
      
      {/* Progress bar */}
      <div className="absolute top-0 left-0 right-0 h-1 bg-white/10">
        <div 
          className="h-full bg-gradient-to-r from-purple-500 to-cyan-400" 
          style={{ width: `${progress}%` }}
        />
      </div>
      
      {/* Top controls */}
      <div className="absolute top-4 right-4 flex items-center gap-2 z-20">
        <button 
          className="w-10 h-10 glass rounded-full flex items-center justify-center opacity-80 hover:opacity-100"
          onClick={toggleMute}
        >
          {isMuted ? (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM12.293 7.293a1 1 0 011.414 0L15 8.586l1.293-1.293a1 1 0 111.414 1.414L16.414 10l1.293 1.293a1 1 0 01-1.414 1.414L15 11.414l-1.293 1.293a1 1 0 01-1.414-1.414L13.586 10l-1.293-1.293a1 1 0 010-1.414z" clipRule="evenodd" />
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217zM14.657 2.929a1 1 0 011.414 0A9.972 9.972 0 0119 10a9.972 9.972 0 01-2.929 7.071 1 1 0 01-1.414-1.414A7.971 7.971 0 0017 10c0-2.21-.894-4.208-2.343-5.657a1 1 0 010-1.414zm-2.829 2.828a1 1 0 011.415 0A5.983 5.983 0 0115 10a5.984 5.984 0 01-1.757 4.243 1 1 0 01-1.415-1.415A3.984 3.984 0 0013 10a3.983 3.983 0 00-1.172-2.828 1 1 0 010-1.415z" clipRule="evenodd" />
            </svg>
          )}
        </button>
        
        <button 
          className={`w-10 h-10 glass rounded-full flex items-center justify-center opacity-80 hover:opacity-100 ${!isPlaying ? 'bg-purple-500/50' : ''}`}
          onClick={togglePlay}
        >
          {isPlaying ? (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
          ) : (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
            </svg>
          )}
        </button>
      </div>
      
      {/* User info */}
      <div className="absolute top-4 left-4 flex items-center">
        <div className="w-10 h-10 rounded-full overflow-hidden border-2 border-purple-500">
          <div className="w-full h-full bg-gradient-to-br from-purple-500 to-cyan-400 flex items-center justify-center text-white font-bold">
            {reel.user.name.charAt(0)}
          </div>
        </div>
        <div className="ml-2">
          <div className="text-white font-medium text-sm">{reel.user.name}</div>
          <div className="text-white/70 text-xs">{reel.views} views</div>
        </div>
      </div>
      
      {/* Discount badge if available */}
      {discountPercent && (
        <div className="absolute top-16 right-4 z-10">
          <Badge variant="accent" size="md" className="font-display font-bold">
            {discountPercent}% OFF
          </Badge>
        </div>
      )}
      
      {/* Bottom information overlay */}
      <div className="absolute bottom-0 left-0 right-0 glass p-4 backdrop-blur-sm">
        <h3 className="text-lg font-bold text-white mb-1">{reel.title}</h3>
        
        <div className="flex justify-between items-center mb-2">
          <div className="text-white text-sm font-medium">{reel.product.name}</div>
          <div className="text-purple-400 font-bold">{formatPrice(reel.product.price)}</div>
        </div>
        
        <div className="flex justify-between items-center text-xs text-white/70 mb-4">
          <div>{reel.product.store}</div>
          <div>Delivery in {reel.product.deliveryTime}</div>
        </div>
        
        <div className="flex flex-wrap gap-2">
          {reel.tags.map((tag, index) => (
            <span 
              key={index}
              className="glass px-2 py-1 rounded-full text-xs"
            >
              #{tag}
            </span>
          ))}
        </div>
        
        <div className="mt-4 flex items-center justify-between">
          <div className="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-pink-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            <span className="ml-1 text-sm">{formatNumber(reel.likes)}</span>
          </div>
          
          <Button 
            variant={inWishlist ? "accent" : "primary"}
            size="sm"
            className="py-1 px-3"
            onClick={handleLike}
            disabled={isTransitioning}
          >
            {inWishlist ? 'In Wishlist' : 'Shop now'}
          </Button>
        </div>
      </div>
      
      {/* Left/Right action buttons */}
      <div 
        className={`absolute top-1/2 left-4 transform -translate-y-1/2 transition-opacity duration-300 ${
          showControls ? 'opacity-100' : 'opacity-0'
        }`}
      >
        <button 
          className="w-12 h-12 glass rounded-full flex items-center justify-center text-white/90 backdrop-blur-md border border-red-500/30 hover:bg-red-500/20 transition-all hover:scale-110"
          onClick={handleReject}
          disabled={isTransitioning}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div 
        className={`absolute top-1/2 right-4 transform -translate-y-1/2 transition-opacity duration-300 ${
          showControls ? 'opacity-100' : 'opacity-0'
        }`}
      >
        <button 
          className="w-12 h-12 glass rounded-full flex items-center justify-center text-white/90 backdrop-blur-md border border-green-500/30 hover:bg-green-500/20 transition-all hover:scale-110"
          onClick={handleLike}
          disabled={isTransitioning}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
          </svg>
        </button>
      </div>
      
      {/* Swipe instructions overlay (only shown initially) */}
      {showInstructions && (
        <div className="absolute inset-0 pointer-events-none flex items-center justify-center">
          <div className="text-white text-center glass px-6 py-4 rounded-xl animate-fadeInOut">
            <div className="flex justify-between items-center gap-8 mb-2">
              <span>← Swipe left to reject</span>
              <span>Swipe right to like →</span>
            </div>
            <div className="text-xs text-white/70">Tap to pause/play</div>
          </div>
        </div>
      )}
      
      {/* Overlay during transition to prevent user interaction */}
      {isTransitioning && (
        <div className="absolute inset-0 z-30 bg-transparent"></div>
      )}
    </Card>
  );
};

export default ReelCard;


================================================
File: src/components/reels/ReelStore.js
================================================
'use client';

import { createContext, useContext, useState, useEffect } from 'react';

// Create context
const ReelStoreContext = createContext();

// Mock data for reels
const mockReels = [
  {
    id: 1,
    videoUrl: '/videos/reel-1.mp4',
    posterUrl: '/images/demo-products/reel-1.jpg',
    title: 'Summer Essentials Collection',
    product: {
      id: 101,
      name: 'Oversized Cotton Tee',
      price: 1299,
      originalPrice: 1999,
      store: 'Zara',
      deliveryTime: '25 min',
    },
    user: {
      name: 'FashionDaily',
      avatar: '/images/demo-products/avatar-1.jpg',
    },
    tags: ['SummerStyle', 'Minimalist', 'Casual'],
    likes: 4258,
    views: '23.8k',
  },
  {
    id: 2,
    videoUrl: '/videos/reel-2.mp4',
    posterUrl: '/images/demo-products/reel-2.jpg',
    title: 'Street Style Lookbook 2025',
    product: {
      id: 102,
      name: 'Cargo Pants - Olive',
      price: 2499,
      originalPrice: 3499,
      store: 'H&M',
      deliveryTime: '30 min',
    },
    user: {
      name: 'StyleCraze',
      avatar: '/images/demo-products/avatar-2.jpg',
    },
    tags: ['StreetStyle', 'UrbanFashion', 'Trending'],
    likes: 8921,
    views: '51.3k',
  },
  {
    id: 3,
    videoUrl: '/videos/reel-3.mp4',
    posterUrl: '/images/demo-products/reel-3.jpg',
    title: 'Office Wear Inspiration',
    product: {
      id: 103,
      name: 'Linen Blend Blazer',
      price: 4999,
      store: 'Mango',
      deliveryTime: '45 min',
    },
    user: {
      name: 'WorkChic',
      avatar: '/images/demo-products/avatar-3.jpg',
    },
    tags: ['OfficeLook', 'Professional', 'Elegant'],
    likes: 5127,
    views: '32.4k',
  },
  {
    id: 4,
    videoUrl: '/videos/reel-4.mp4',
    posterUrl: '/images/demo-products/reel-4.jpg',
    title: 'Weekend Casual Outfits',
    product: {
      id: 104,
      name: 'Distressed Denim Jeans',
      price: 3299,
      store: 'Levi\'s',
      deliveryTime: '30 min',
    },
    user: {
      name: 'TrendHunter',
      avatar: '/images/demo-products/avatar-4.jpg',
    },
    tags: ['WeekendStyle', 'Casual', 'Denim'],
    likes: 7435,
    views: '41.9k',
  },
  {
    id: 5,
    videoUrl: '/videos/reel-5.mp4',
    posterUrl: '/images/demo-products/reel-5.jpg',
    title: 'Accessorize Like a Pro',
    product: {
      id: 105,
      name: 'Minimalist Gold Necklace',
      price: 1499,
      store: 'Accessorize',
      deliveryTime: '35 min',
    },
    user: {
      name: 'GlamGuide',
      avatar: '/images/demo-products/avatar-5.jpg',
    },
    tags: ['Accessories', 'Jewelry', 'Minimalist'],
    likes: 6512,
    views: '37.2k',
  },
  {
    id: 6,
    videoUrl: '/videos/reel-6.mp4',
    posterUrl: '/images/demo-products/reel-2.jpg',
    title: 'Party Ready Outfits',
    product: {
      id: 106,
      name: 'Sequin Mini Dress',
      price: 4999,
      store: 'Zara',
      deliveryTime: '25 min',
    },
    user: {
      name: 'NightlifeStyle',
      avatar: '/images/demo-products/avatar-1.jpg',
    },
    tags: ['PartyWear', 'NightOut', 'Glam'],
    likes: 8765,
    views: '48.6k',
  },
  {
    id: 7,
    videoUrl: '/videos/reel-7.mp4',
    posterUrl: '/images/demo-products/reel-3.jpg',
    title: 'Athleisure Outfit Ideas',
    product: {
      id: 107,
      name: 'Performance Leggings',
      price: 2799,
      originalPrice: 3499,
      store: 'Nike',
      deliveryTime: '35 min',
    },
    user: {
      name: 'FitFashion',
      avatar: '/images/demo-products/avatar-4.jpg',
    },
    tags: ['Athleisure', 'SportyChic', 'Comfortable'],
    likes: 5932,
    views: '29.6k',
  },
  {
    id: 8,
    videoUrl: '/videos/reel-8.mp4',
    posterUrl: '/images/demo-products/reel-4.jpg',
    title: 'Beach Vacation Essentials',
    product: {
      id: 108,
      name: 'Linen Beach Shirt',
      price: 1899,
      store: 'H&M',
      deliveryTime: '30 min',
    },
    user: {
      name: 'TravelChic',
      avatar: '/images/demo-products/avatar-5.jpg',
    },
    tags: ['BeachWear', 'Vacation', 'Summer'],
    likes: 7124,
    views: '33.9k',
  }
];

// Provider component
export function ReelStoreProvider({ children }) {
  const [reels, setReels] = useState(mockReels);
  const [wishlist, setWishlist] = useState([]);
  const [viewedReels, setViewedReels] = useState([]);
  
  // Add to wishlist
  const addToWishlist = (reelId) => {
    const reel = reels.find(r => r.id === reelId);
    if (reel && !wishlist.some(item => item.id === reelId)) {
      setWishlist([...wishlist, reel]);
      
      // Store in local storage
      try {
        const storedWishlist = JSON.parse(localStorage.getItem('trendzo-wishlist') || '[]');
        localStorage.setItem('trendzo-wishlist', JSON.stringify([...storedWishlist, reelId]));
      } catch (error) {
        console.error('Failed to save wishlist to localStorage:', error);
      }
    }
  };
  
  // Remove from wishlist
  const removeFromWishlist = (reelId) => {
    setWishlist(wishlist.filter(item => item.id !== reelId));
    
    // Update local storage
    try {
      const storedWishlist = JSON.parse(localStorage.getItem('trendzo-wishlist') || '[]');
      localStorage.setItem('trendzo-wishlist', 
        JSON.stringify(storedWishlist.filter(id => id !== reelId)));
    } catch (error) {
      console.error('Failed to update wishlist in localStorage:', error);
    }
  };
  
  // Mark reel as viewed
  const markAsViewed = (reelId) => {
    if (!viewedReels.includes(reelId)) {
      setViewedReels([...viewedReels, reelId]);
    }
  };
  
  // Check if reel is in wishlist
  const isInWishlist = (reelId) => {
    return wishlist.some(item => item.id === reelId);
  };
  
  // Fetch wishlist from local storage on mount
  useEffect(() => {
    try {
      const storedWishlist = JSON.parse(localStorage.getItem('trendzo-wishlist') || '[]');
      if (storedWishlist.length > 0) {
        const wishlistItems = reels.filter(reel => storedWishlist.includes(reel.id));
        setWishlist(wishlistItems);
      }
    } catch (error) {
      console.error('Failed to load wishlist from localStorage:', error);
    }
  }, []);
  
  // Values to be provided by context
  const value = {
    reels,
    wishlist,
    viewedReels,
    addToWishlist,
    removeFromWishlist,
    markAsViewed,
    isInWishlist
  };
  
  return (
    <ReelStoreContext.Provider value={value}>
      {children}
    </ReelStoreContext.Provider>
  );
}

// Custom hook to use the store
export function useReelStore() {
  const context = useContext(ReelStoreContext);
  if (context === undefined) {
    throw new Error('useReelStore must be used within a ReelStoreProvider');
  }
  return context;
}


================================================
File: src/components/reels/ReelsCategories.js
================================================
'use client';

import { useState, useRef } from 'react';
import Card from '@/components/ui/Card';

const ReelsCategories = () => {
  const [activeCategory, setActiveCategory] = useState('all');
  const scrollRef = useRef(null);
  
  // Mock categories
  const categories = [
    { id: 'all', name: 'All', count: 265 },
    { id: 'trending', name: 'Trending', count: 124, isHot: true },
    { id: 'summer', name: 'Summer', count: 87 },
    { id: 'casual', name: 'Casual', count: 95 },
    { id: 'formal', name: 'Formal', count: 42 },
    { id: 'office', name: 'Office Wear', count: 55 },
    { id: 'party', name: 'Party', count: 63 },
    { id: 'beach', name: 'Beach Wear', count: 37 },
    { id: 'accessories', name: 'Accessories', count: 76 },
    { id: 'shoes', name: 'Shoes', count: 54 },
  ];
  
  // Handle scroll for categories
  const scroll = (direction) => {
    if (scrollRef.current) {
      const { current } = scrollRef;
      const scrollAmount = direction === 'left' ? -200 : 200;
      current.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };
  
  return (
    <div className="relative mb-6">
      <div 
        className="flex items-center gap-3 overflow-x-auto scrollbar-none pb-1" 
        ref={scrollRef}
      >
        {categories.map((category) => (
          <div 
            key={category.id}
            className={`glass rounded-xl py-3 px-4 min-w-32 flex-shrink-0 transition-all cursor-pointer ${
              activeCategory === category.id 
                ? 'bg-gradient-to-r from-purple-500/20 to-cyan-400/20 border-purple-500/30 transform -translate-y-1' 
                : 'hover:-translate-y-1'
            }`}
            onClick={() => setActiveCategory(category.id)}
          >
            <div className="flex flex-col items-center text-center">
              <div className="flex items-center">
                <span className={`font-bold ${activeCategory === category.id ? 'text-purple-500' : ''}`}>
                  {category.name}
                </span>
                {category.isHot && (
                  <div className="ml-1 w-2 h-2 rounded-full bg-red-500 animate-pulse"></div>
                )}
              </div>
              <span className="text-xs text-text-secondary mt-1">
                {category.count} reels
              </span>
            </div>
          </div>
        ))}
      </div>
      
      <button 
        className="absolute left-0 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center z-10 opacity-80 hover:opacity-100"
        onClick={() => scroll('left')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
        </svg>
      </button>
      
      <button 
        className="absolute right-0 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center z-10 opacity-80 hover:opacity-100"
        onClick={() => scroll('right')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
        </svg>
      </button>
    </div>
  );
};

export default ReelsCategories;


================================================
File: src/components/reels/ReelsViewer.js
================================================
'use client';

import { useState, useRef, useEffect } from 'react';
import ReelCard from './ReelCard';
import { motion, AnimatePresence } from 'framer-motion';
import Button from '@/components/ui/Button';
import Badge from '@/components/ui/Badge';
import Card from '@/components/ui/Card';
import { useReelStore } from './ReelStore';
import WishlistDrawer from './WishlistDrawer';

const ReelsViewer = () => {
  const { reels, wishlist, addToWishlist, markAsViewed } = useReelStore();
  const [currentReelIndex, setCurrentReelIndex] = useState(0);
  const [reelHistory, setReelHistory] = useState([]);
  const [showLikeEffect, setShowLikeEffect] = useState(false);
  const [showRejectEffect, setShowRejectEffect] = useState(false);
  const [swipeAnimation, setSwipeAnimation] = useState(null);
  const [isWishlistOpen, setIsWishlistOpen] = useState(false);
  const [hasShownInstructions, setHasShownInstructions] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false); // New state to track transitions
  const reelsContainerRef = useRef(null);
  
  // Handle swipe gesture (using mobile-friendly navigation)
  const handleSwipe = (direction) => {
    if (isTransitioning) return; // Prevent multiple swipes during transition
    
    if (direction === 'left') {
      // Reject (skip to next)
      handleReject();
    } else if (direction === 'right') {
      // Like/add to wishlist
      handleLike();
    }
  };
  
  // Function to handle like/add to wishlist
  const handleLike = () => {
    if (isTransitioning) return; // Prevent action during transition
    setIsTransitioning(true); // Start transition
    
    // Add current reel to wishlist
    const currentReel = reels[currentReelIndex];
    addToWishlist(currentReel.id);
    
    // Show success animation
    setShowLikeEffect(true);
    setSwipeAnimation('right');
    
    // Reset animation after a delay
    setTimeout(() => {
      setShowLikeEffect(false);
      setSwipeAnimation(null);
      
      // Move to next reel
      moveToNextReel();
      
      // End transition after animation completes
      setTimeout(() => {
        setIsTransitioning(false);
      }, 300);
    }, 500);
  };
  
  // Function to handle reject
  const handleReject = () => {
    if (isTransitioning) return; // Prevent action during transition
    setIsTransitioning(true); // Start transition
    
    // Show reject animation
    setShowRejectEffect(true);
    setSwipeAnimation('left');
    
    // Reset animation after a delay
    setTimeout(() => {
      setShowRejectEffect(false);
      setSwipeAnimation(null);
      
      // Move to next reel
      moveToNextReel();
      
      // End transition after animation completes
      setTimeout(() => {
        setIsTransitioning(false);
      }, 300);
    }, 500);
  };
  
  // Move to next reel
  const moveToNextReel = () => {
    // Mark current reel as viewed
    markAsViewed(reels[currentReelIndex].id);
    
    // Add current index to history
    setReelHistory([...reelHistory, currentReelIndex]);
    
    // Go to next reel (cycle back to start if at end)
    setCurrentReelIndex((prev) => (prev + 1) % reels.length);
  };
  
  // Go back to previous reel
  const goToPreviousReel = () => {
    if (isTransitioning) return; // Prevent action during transition
    
    if (reelHistory.length > 0) {
      setIsTransitioning(true); // Start transition
      
      // Pop the last item from history
      const newHistory = [...reelHistory];
      const previousIndex = newHistory.pop();
      
      // Update state
      setReelHistory(newHistory);
      setCurrentReelIndex(previousIndex);
      
      // End transition after animation completes
      setTimeout(() => {
        setIsTransitioning(false);
      }, 300);
    }
  };
  
  // Toggle wishlist drawer
  const toggleWishlist = () => {
    setIsWishlistOpen(!isWishlistOpen);
  };
  
  // Current reel
  const currentReel = reels[currentReelIndex];
  
  return (
    <div className="flex flex-col items-center">
      {/* Main reels viewer */}
      <div 
        ref={reelsContainerRef}
        className="w-full max-w-md relative h-[80vh] rounded-2xl overflow-hidden"
      >
        <AnimatePresence mode="wait">
          <motion.div
            key={currentReel.id}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.3 }}
            className={`w-full h-full ${swipeAnimation === 'right' ? 'animate-swipe-right' : swipeAnimation === 'left' ? 'animate-swipe-left' : ''}`}
          >
            <ReelCard 
              reel={currentReel} 
              onSwipe={handleSwipe}
              showInstructions={!hasShownInstructions}
              onInstructionsShown={() => setHasShownInstructions(true)}
              isTransitioning={isTransitioning} // Pass transitioning state to ReelCard
            />
          </motion.div>
        </AnimatePresence>
        
        {/* Like effect overlay */}
        {showLikeEffect && (
          <div className="absolute inset-0 z-20 pointer-events-none flex items-center justify-center">
            <div className="animate-float-up">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-green-500" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
              </svg>
            </div>
          </div>
        )}
        
        {/* Reject effect overlay */}
        {showRejectEffect && (
          <div className="absolute inset-0 z-20 pointer-events-none flex items-center justify-center">
            <div className="animate-float-up">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-red-500" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </div>
          </div>
        )}
      </div>
      
      {/* Action buttons */}
      <div className="mt-6 w-full max-w-md flex justify-between">
        <Button 
          variant="glass" 
          size="lg"
          className="flex items-center"
          onClick={goToPreviousReel}
          disabled={reelHistory.length === 0 || isTransitioning}
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 19l-7-7 7-7m8 14l-7-7 7-7" />
          </svg>
          Previous
        </Button>
        
        <Button 
          variant="glass" 
          size="lg"
          className="flex items-center"
          onClick={() => handleSwipe('left')}
          disabled={isTransitioning}
        >
          Skip
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 5l7 7-7 7M5 5l7 7-7 7" />
          </svg>
        </Button>
      </div>
      
      {/* Wishlist counter and button */}
      {wishlist.length > 0 && (
        <div className="mt-4 w-full max-w-md flex justify-center">
          <Button 
            variant="primary" 
            size="md"
            className="flex items-center px-6"
            onClick={toggleWishlist}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
            <span className="font-medium">View Wishlist</span>
            <Badge 
              variant="accent" 
              size="sm" 
              className="ml-2"
            >
              {wishlist.length}
            </Badge>
          </Button>
        </div>
      )}
      
      {/* Wishlist Drawer */}
      <WishlistDrawer 
        isOpen={isWishlistOpen} 
        onClose={() => setIsWishlistOpen(false)} 
      />
    </div>
  );
};

export default ReelsViewer;


================================================
File: src/components/reels/WishlistDrawer.js
================================================
'use client';

import { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { useReelStore } from './ReelStore';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';

const WishlistDrawer = ({ isOpen, onClose }) => {
  const { wishlist, removeFromWishlist } = useReelStore();
  const overlayRef = useRef(null);
  
  // Handle click outside to close
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (overlayRef.current && !overlayRef.current.contains(e.target)) {
        onClose();
      }
    };
    
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen, onClose]);
  
  // Handle escape key to close
  useEffect(() => {
    const handleEsc = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };
    
    if (isOpen) {
      document.addEventListener('keydown', handleEsc);
    }
    
    return () => {
      document.removeEventListener('keydown', handleEsc);
    };
  }, [isOpen, onClose]);
  
  // Format price with currency
  const formatPrice = (price) => {
    return `₹${price.toFixed(2)}`;
  };
  
  // Portal component only runs on client
  if (typeof window === 'undefined') return null;
  
  return createPortal(
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50">
          {/* Backdrop */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black/70 backdrop-blur-sm"
          />
          
          {/* Drawer */}
          <motion.div
            initial={{ y: '100%' }}
            animate={{ y: 0 }}
            exit={{ y: '100%' }}
            transition={{ type: 'spring', damping: 25, stiffness: 300 }}
            className="fixed bottom-0 left-0 right-0 glass max-h-[85vh] overflow-y-auto rounded-t-2xl"
            ref={overlayRef}
          >
            <div className="sticky top-0 left-0 right-0 glass py-4 px-6 backdrop-blur-md z-10 border-b border-white/10">
              <div className="flex justify-between items-center">
                <h3 className="text-xl font-bold font-display">
                  Wishlist <span className="text-purple-500">({wishlist.length})</span>
                </h3>
                
                <button
                  onClick={onClose}
                  className="rounded-full p-1.5 hover:bg-white/10"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <div className="w-12 h-1 rounded-full bg-white/20 mx-auto mt-2" />
            </div>
            
            <div className="px-4 py-6">
              {wishlist.length === 0 ? (
                <div className="text-center py-8">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mx-auto text-text-secondary mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                  </svg>
                  <h4 className="text-lg font-medium mb-2">Your wishlist is empty</h4>
                  <p className="text-text-secondary mb-6">Swipe right on reels to add items to your wishlist</p>
                  <Button variant="primary" onClick={onClose}>
                    Continue Browsing
                  </Button>
                </div>
              ) : (
                <>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {wishlist.map((item) => (
                      <Card 
                        key={item.id} 
                        variant="glass" 
                        className="relative overflow-hidden"
                      >
                        <div className="flex">
                          <div 
                            className="h-24 w-24 bg-cover bg-center"
                            style={{ backgroundImage: `url(${item.posterUrl})` }}
                          />
                          
                          <div className="flex-1 p-3">
                            <div className="text-xs text-text-secondary">{item.product.store}</div>
                            <h4 className="font-medium text-sm line-clamp-1">{item.product.name}</h4>
                            
                            <div className="flex justify-between items-end mt-1">
                              <div>
                                <div className="font-bold text-purple-500">{formatPrice(item.product.price)}</div>
                                {item.product.originalPrice && (
                                  <div className="text-xs text-text-secondary line-through">
                                    {formatPrice(item.product.originalPrice)}
                                  </div>
                                )}
                              </div>
                              
                              <div className="text-xs text-text-secondary">
                                {item.product.deliveryTime}
                              </div>
                            </div>
                          </div>
                        </div>
                        
                        <div className="absolute top-2 right-2">
                          <button 
                            className="w-6 h-6 glass rounded-full flex items-center justify-center"
                            onClick={() => removeFromWishlist(item.id)}
                          >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      </Card>
                    ))}
                  </div>
                  
                  <div className="mt-6 flex flex-col md:flex-row justify-between gap-4">
                    <Button 
                      variant="glass" 
                      className="flex-1"
                      onClick={onClose}
                    >
                      Continue Browsing
                    </Button>
                    
                    <Button 
                      variant="primary" 
                      className="flex-1"
                    >
                      Add All to Cart
                    </Button>
                  </div>
                </>
              )}
            </div>
          </motion.div>
        </div>
      )}
    </AnimatePresence>,
    document.body
  );
};

export default WishlistDrawer;


================================================
File: src/components/search/SearchOverlay.jsx
================================================
'use client';

import { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import Badge from '@/components/ui/Badge';

const SearchOverlay = ({ isOpen, onClose }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearching, setIsSearching] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [recentSearches, setRecentSearches] = useState([
    'Summer dress', 'Nike sneakers', 'Denim jacket', 'Linen shirts'
  ]);
  const searchInputRef = useRef(null);
  const searchContentRef = useRef(null);
  
  // Categories for quick search
  const searchCategories = [
    { id: 'women', name: 'Women', icon: '👗' },
    { id: 'men', name: 'Men', icon: '👔' },
    { id: 'kids', name: 'Kids', icon: '🧸' },
    { id: 'shoes', name: 'Shoes', icon: '👟' },
    { id: 'accessories', name: 'Accessories', icon: '👜' },
    { id: 'beauty', name: 'Beauty', icon: '💄' },
  ];
  
  // Popular search terms
  const popularSearches = [
    'Floral dresses', 'Cargo pants', 'Linen shirts', 'Summer collection',
    'Nike Air Max', 'Adidas Originals', 'Oversized t-shirts', 'Maxi skirts'
  ];
  
  // Focus input when overlay opens
  useEffect(() => {
    if (isOpen && searchInputRef.current) {
      setTimeout(() => {
        searchInputRef.current.focus();
      }, 100);
    }
  }, [isOpen]);
  
  // Handle clicks outside to close
  useEffect(() => {
    const handleClickOutside = (e) => {
      if (searchContentRef.current && !searchContentRef.current.contains(e.target)) {
        onClose();
      }
    };
    
    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen, onClose]);
  
  // Handle escape key to close
  useEffect(() => {
    const handleEscKey = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };
    
    if (isOpen) {
      document.addEventListener('keydown', handleEscKey);
    }
    
    return () => {
      document.removeEventListener('keydown', handleEscKey);
    };
  }, [isOpen, onClose]);
  
  // Handle search input
  const handleSearchInput = (e) => {
    const value = e.target.value;
    setSearchQuery(value);
    
    if (value.length > 0) {
      // Show loading state
      setIsSearching(true);
      
      // Simulate search results after delay
      setTimeout(() => {
        // Mock search results based on query
        const results = [
          { id: 1, type: 'product', name: `${value} T-shirt`, store: 'Zara', price: 1299 },
          { id: 2, type: 'product', name: `${value} Jeans`, store: 'H&M', price: 2499 },
          { id: 3, type: 'store', name: value, deliveryTime: '30 min' },
          { id: 4, type: 'category', name: value }
        ];
        
        setSearchResults(results);
        setIsSearching(false);
      }, 600);
    } else {
      setIsSearching(false);
      setSearchResults([]);
    }
  };
  
  // Add to recent searches
  const addToRecentSearches = (term) => {
    if (!recentSearches.includes(term)) {
      setRecentSearches(prev => [term, ...prev.slice(0, 4)]);
    }
  };
  
  // Format price with currency
  const formatPrice = (price) => {
    return `₹${price.toFixed(2)}`;
  };
  
  // Handle search submission
  const handleSearchSubmit = (e) => {
    e.preventDefault();
    
    if (searchQuery.trim()) {
      addToRecentSearches(searchQuery);
      // Handle search submission - in a real app would navigate to results page
      console.log(`Searching for: ${searchQuery}`);
    }
  };
  
  // Use term for search
  const useSearchTerm = (term) => {
    setSearchQuery(term);
    addToRecentSearches(term);
    
    // Trigger search with the selected term
    setIsSearching(true);
    
    setTimeout(() => {
      // Mock search results based on term
      const results = [
        { id: 1, type: 'product', name: `${term} T-shirt`, store: 'Zara', price: 1299 },
        { id: 2, type: 'product', name: `${term} Jeans`, store: 'H&M', price: 2499 },
        { id: 3, type: 'store', name: term, deliveryTime: '30 min' },
        { id: 4, type: 'category', name: term }
      ];
      
      setSearchResults(results);
      setIsSearching(false);
    }, 600);
  };
  
  // Clear search
  const clearSearch = () => {
    setSearchQuery('');
    setSearchResults([]);
    setIsSearching(false);
    if (searchInputRef.current) {
      searchInputRef.current.focus();
    }
  };
  
  if (!isOpen) return null;
  
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="fixed inset-0 z-50 flex items-start justify-center pt-20 px-4"
      style={{ backgroundColor: 'rgba(15, 15, 26, 0.7)' }}
    >
      <motion.div
        ref={searchContentRef}
        initial={{ y: -20, opacity: 0 }}
        animate={{ y: 0, opacity: 1 }}
        exit={{ y: -20, opacity: 0 }}
        transition={{ type: 'spring', damping: 25, stiffness: 500 }}
        className="w-full max-w-2xl glass rounded-xl shadow-2xl overflow-hidden border border-white/10"
      >
        {/* Search input */}
        <div className="px-4 py-3 border-b border-white/10">
          <form onSubmit={handleSearchSubmit} className="relative">
            <input
              ref={searchInputRef}
              type="text"
              value={searchQuery}
              onChange={handleSearchInput}
              placeholder="Search for products, brands, stores..."
              className="w-full bg-transparent text-lg focus:outline-none pl-7"
              autoComplete="off"
            />
            
            <div className="absolute left-0 top-1/2 -translate-y-1/2">
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                className={`h-5 w-5 ${isSearching ? 'text-purple-500 animate-pulse' : 'text-text-secondary'}`}
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={2} 
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" 
                />
              </svg>
            </div>
            
            {searchQuery && (
              <button 
                type="button"
                className="absolute right-0 top-1/2 -translate-y-1/2"
                onClick={clearSearch}
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-text-secondary hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            )}
          </form>
          
          {/* Loading shimmer */}
          {isSearching && (
            <div className="absolute top-0 left-0 right-0 h-0.5 overflow-hidden">
              <div className="h-full w-full bg-gradient-to-r from-purple-600 via-cyan-400 to-purple-600 animate-shimmer"></div>
            </div>
          )}
        </div>
        
        {/* Search content */}
        <div className="max-h-[70vh] overflow-y-auto">
          {/* Search results */}
          {searchQuery && searchResults.length > 0 ? (
            <div className="p-4">
              <h3 className="text-sm font-semibold text-text-secondary mb-2">
                {isSearching ? 'Searching...' : 'Search Results'}
              </h3>
              
              <div className="divide-y divide-white/5">
                {searchResults.map(result => (
                  <div 
                    key={result.id}
                    className="py-3 transition-all hover:glass hover:-translate-y-1 px-2 rounded-lg cursor-pointer"
                  >
                    {result.type === 'product' && (
                      <div className="flex items-center">
                        <div className="w-12 h-12 glass rounded-lg flex items-center justify-center mr-3">
                          <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-purple-500/30 to-cyan-400/30"></div>
                        </div>
                        <div className="flex-1">
                          <div className="font-medium">{result.name}</div>
                          <div className="flex justify-between text-sm text-text-secondary">
                            <span>{result.store}</span>
                            <span className="font-semibold text-purple-500">{formatPrice(result.price)}</span>
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {result.type === 'store' && (
                      <div className="flex items-center">
                        <div className="w-12 h-12 glass rounded-full flex items-center justify-center mr-3">
                          <div className="w-10 h-10 rounded-full bg-gradient-to-br from-teal-500/30 to-blue-400/30 flex items-center justify-center font-bold text-white">
                            {result.name.charAt(0)}
                          </div>
                        </div>
                        <div className="flex-1">
                          <div className="font-medium">{result.name}</div>
                          <div className="text-sm text-text-secondary">
                            Store • {result.deliveryTime}
                          </div>
                        </div>
                      </div>
                    )}
                    
                    {result.type === 'category' && (
                      <div className="flex items-center">
                        <div className="w-12 h-12 glass rounded-lg flex items-center justify-center mr-3">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-pink-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                          </svg>
                        </div>
                        <div className="flex-1">
                          <div className="font-medium">{result.name}</div>
                          <div className="text-sm text-text-secondary">
                            Category
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="p-4">
              {/* Recent searches */}
              {recentSearches.length > 0 && (
                <div className="mb-6">
                  <h3 className="text-sm font-semibold text-text-secondary mb-2">
                    Recent Searches
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    {recentSearches.map((term, index) => (
                      <div 
                        key={index}
                        className="glass py-1.5 px-3 rounded-full text-sm cursor-pointer hover:bg-purple-500/10 transition-all"
                        onClick={() => useSearchTerm(term)}
                      >
                        {term}
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Quick categories */}
              <div className="mb-6">
                <h3 className="text-sm font-semibold text-text-secondary mb-2">
                  Shop by Category
                </h3>
                <div className="grid grid-cols-3 sm:grid-cols-6 gap-3">
                  {searchCategories.map(category => (
                    <div 
                      key={category.id}
                      className="glass py-3 px-2 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:-translate-y-1 transition-all"
                      onClick={() => useSearchTerm(category.name)}
                    >
                      <div className="text-2xl mb-1">{category.icon}</div>
                      <div className="text-xs">{category.name}</div>
                    </div>
                  ))}
                </div>
              </div>
              
              {/* Popular searches */}
              <div>
                <h3 className="text-sm font-semibold text-text-secondary mb-2">
                  Popular Searches
                </h3>
                <div className="grid grid-cols-2 gap-2">
                  {popularSearches.map((term, index) => (
                    <div 
                      key={index}
                      className="glass p-2 rounded-lg flex items-center cursor-pointer hover:-translate-y-1 transition-all"
                      onClick={() => useSearchTerm(term)}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-purple-500 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
                      </svg>
                      <span className="text-sm">{term}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      </motion.div>
    </motion.div>
  );
};

export default SearchOverlay;


================================================
File: src/components/trending/TrendingCategories.js
================================================
'use client';

import { useRef } from 'react';

const TrendingCategories = () => {
  const scrollRef = useRef(null);
  
  // Mock data
  const categories = [
    { id: 'all', name: 'All' },
    { id: 'summer', name: 'Summer', count: '3.2k' },
    { id: 'casual', name: 'Casual', count: '2.8k' },
    { id: 'formal', name: 'Formal', count: '1.4k' },
    { id: 'sporty', name: 'Sporty', count: '2.0k' },
    { id: 'party', name: 'Party', count: '1.9k' },
    { id: 'ethnic', name: 'Ethnic', count: '1.2k' },
    { id: 'accessories', name: 'Accessories', count: '2.5k' },
    { id: 'footwear', name: 'Footwear', count: '1.8k' },
  ];
  
  const scroll = (direction) => {
    if (scrollRef.current) {
      const { current } = scrollRef;
      const scrollAmount = direction === 'left' ? -200 : 200;
      current.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };
  
  return (
    <div className="relative my-6">
      <div 
        className="flex items-center gap-3 overflow-x-auto scrollbar-none pb-1" 
        ref={scrollRef}
      >
        {categories.map((category, index) => (
          <div 
            key={category.id}
            className={`glass rounded-xl py-3 px-4 min-w-32 flex-shrink-0 transition-transform hover:-translate-y-1 cursor-pointer ${
              index === 0 ? 'bg-gradient-to-r from-purple-500/20 to-cyan-400/20 border-purple-500/30' : ''
            }`}
          >
            <div className="flex flex-col items-center text-center">
              <span className={`font-bold ${index === 0 ? 'text-purple-500' : ''}`}>
                {category.name}
              </span>
              {category.count && (
                <span className="text-xs text-text-secondary mt-1">
                  {category.count} items
                </span>
              )}
            </div>
          </div>
        ))}
      </div>
      
      <button 
        className="absolute left-0 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center z-10 opacity-80 hover:opacity-100"
        onClick={() => scroll('left')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
        </svg>
      </button>
      
      <button 
        className="absolute right-0 top-1/2 -translate-y-1/2 w-8 h-8 glass rounded-full flex items-center justify-center z-10 opacity-80 hover:opacity-100"
        onClick={() => scroll('right')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
        </svg>
      </button>
    </div>
  );
};

export default TrendingCategories;


================================================
File: src/components/trending/TrendingGrid.js
================================================
'use client';

import { useState } from 'react';
import TrendingItem from './TrendingItem';
import Button from '@/components/ui/Button';

const TrendingGrid = () => {
  const [visibleItems, setVisibleItems] = useState(8);
  const [isLoading, setIsLoading] = useState(false);
  
  // Function to load more items
  const loadMore = () => {
    setIsLoading(true);
    // Simulate loading delay
    setTimeout(() => {
      setVisibleItems(prev => Math.min(prev + 4, trendingItems.length));
      setIsLoading(false);
    }, 800);
  };
  
  // Mock data
  const trendingItems = [
    {
      id: 1,
      rank: 1,
      name: 'Oversized Cotton Tee',
      store: 'Zara',
      price: 1299,
      originalPrice: 1999,
      rating: 4.7,
      likes: 842,
      comments: 56,
      deliveryTime: '25 min',
      image: '/api/placeholder/400/320',
      tags: ['OversizedTee', 'SummerOutfit'],
    },
    {
      id: 2,
      rank: 2,
      name: 'Cargo Pants - Olive Green',
      store: 'H&M',
      price: 2499,
      originalPrice: 3499,
      rating: 4.5,
      likes: 756,
      comments: 43,
      deliveryTime: '30 min',
      image: '/api/placeholder/400/320',
      tags: ['CargoPants', 'StreetStyle'],
    },
    {
      id: 3,
      rank: 3,
      name: 'Chunky Platform Sneakers',
      store: 'Nike',
      price: 6999,
      rating: 4.8,
      likes: 689,
      comments: 38,
      deliveryTime: '35 min',
      image: '/api/placeholder/400/320',
      tags: ['ChunkySneakers', 'Footwear'],
    },
    {
      id: 4,
      rank: 4,
      name: 'Floral Maxi Dress',
      store: 'Mango',
      price: 3599,
      originalPrice: 4999,
      rating: 4.6,
      likes: 623,
      comments: 41,
      deliveryTime: '45 min',
      image: '/api/placeholder/400/320',
      tags: ['MaxiDress', 'FloralPrint'],
    },
    {
      id: 5,
      rank: 5,
      name: 'Linen Blend Shirt',
      store: 'Uniqlo',
      price: 1999,
      rating: 4.4,
      likes: 589,
      comments: 29,
      deliveryTime: '40 min',
      image: '/api/placeholder/400/320',
      tags: ['LinenShirt', 'SummerOutfit'],
    },
    {
      id: 6,
      rank: 6,
      name: 'High-Waist Mom Jeans',
      store: 'Levi\'s',
      price: 3499,
      originalPrice: 4299,
      rating: 4.7,
      likes: 547,
      comments: 34,
      deliveryTime: '30 min',
      image: '/api/placeholder/400/320',
      tags: ['MomJeans', 'DenimStyle'],
    },
    {
      id: 7,
      rank: 7,
      name: 'Bucket Hat',
      store: 'H&M',
      price: 899,
      originalPrice: 1299,
      rating: 4.3,
      likes: 498,
      comments: 22,
      deliveryTime: '30 min',
      image: '/api/placeholder/400/320',
      tags: ['BucketHat', 'Accessories'],
    },
    {
      id: 8,
      rank: 8,
      name: 'Tie-Dye Sweatshirt',
      store: 'Zara',
      price: 1899,
      rating: 4.5,
      likes: 456,
      comments: 31,
      deliveryTime: '25 min',
      image: '/api/placeholder/400/320',
      tags: ['TieDye', 'Sweatshirt'],
    },
    {
      id: 9,
      rank: 9,
      name: 'Leather Cross-body Bag',
      store: 'Mango',
      price: 2499,
      originalPrice: 3499,
      rating: 4.8,
      likes: 423,
      comments: 28,
      deliveryTime: '45 min',
      image: '/api/placeholder/400/320',
      tags: ['CrossBodyBag', 'Accessories'],
    },
    {
      id: 10,
      rank: 10,
      name: 'Wide Leg Trousers',
      store: 'Uniqlo',
      price: 2799,
      rating: 4.6,
      likes: 402,
      comments: 25,
      deliveryTime: '40 min',
      image: '/api/placeholder/400/320',
      tags: ['WideLeg', 'OfficeLook'],
    },
    {
      id: 11,
      rank: 11,
      name: 'Canvas Slip-on Shoes',
      store: 'Vans',
      price: 3999,
      rating: 4.7,
      likes: 387,
      comments: 19,
      deliveryTime: '35 min',
      image: '/api/placeholder/400/320',
      tags: ['SlipOn', 'Footwear'],
    },
    {
      id: 12,
      rank: 12,
      name: 'Printed Kimono',
      store: 'FabIndia',
      price: 1899,
      originalPrice: 2499,
      rating: 4.4,
      likes: 362,
      comments: 21,
      deliveryTime: '50 min',
      image: '/api/placeholder/400/320',
      tags: ['Kimono', 'Ethnic'],
    },
  ];
  
  return (
    <div>
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {trendingItems.slice(0, visibleItems).map((item) => (
          <TrendingItem key={item.id} item={item} />
        ))}
      </div>
      
      {visibleItems < trendingItems.length && (
        <div className="mt-8 text-center">
          <Button 
            variant="glass" 
            size="lg" 
            className="px-8"
            onClick={loadMore}
            disabled={isLoading}
          >
            {isLoading ? (
              <div className="flex items-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Loading...
              </div>
            ) : (
              'Load More'
            )}
          </Button>
        </div>
      )}
      
      {/* Floating action button to scroll to top */}
      <button 
        className="fixed bottom-20 right-4 w-12 h-12 glass rounded-full flex items-center justify-center z-10 animate-bounce"
        onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 10l7-7m0 0l7 7m-7-7v18" />
        </svg>
      </button>
    </div>
  );
};

export default TrendingGrid;


================================================
File: src/components/trending/TrendingHashtags.js
================================================
'use client';

import { useRef } from 'react';
import Badge from '@/components/ui/Badge';

const TrendingHashtags = () => {
  const scrollRef = useRef(null);
  
  // Mock data
  const hashtags = [
    { id: 1, tag: 'SummerOutfits', count: '4.2k posts', isHot: true },
    { id: 2, tag: 'StreetStyle', count: '3.8k posts' },
    { id: 3, tag: 'MinimalistFashion', count: '2.9k posts' },
    { id: 4, tag: 'CasualChic', count: '2.5k posts' },
    { id: 5, tag: 'OfficeLook', count: '2.3k posts', isHot: true },
    { id: 6, tag: 'DenimOnDenim', count: '1.9k posts' },
    { id: 7, tag: 'SustainableFashion', count: '1.7k posts' },
    { id: 8, tag: 'VintageVibes', count: '1.5k posts' },
    { id: 9, tag: 'PatternMixing', count: '1.3k posts' },
    { id: 10, tag: 'AccessoryGame', count: '1.2k posts' },
  ];
  
  const scroll = (direction) => {
    if (scrollRef.current) {
      const { current } = scrollRef;
      const scrollAmount = direction === 'left' ? -200 : 200;
      current.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    }
  };
  
  return (
    <div className="relative my-6">
      <h2 className="text-xl font-display font-bold mb-4">Trending Hashtags</h2>
      
      <div 
        className="flex items-center gap-3 overflow-x-auto scrollbar-none pb-1" 
        ref={scrollRef}
      >
        {hashtags.map((item) => (
          <div 
            key={item.id}
            className="glass rounded-xl py-2 px-4 min-w-40 flex-shrink-0 transition-all hover:-translate-y-1 cursor-pointer"
          >
            <div className="flex items-center justify-between">
              <div>
                <div className="flex items-center">
                  <span className="font-bold text-purple-500">#</span>
                  <span className="font-bold ml-1">{item.tag}</span>
                  {item.isHot && (
                    <div className="ml-2">
                      <Badge variant="accent" size="sm" className="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M12.395 2.553a1 1 0 00-1.45-.385c-.345.23-.614.558-.822.88-.214.33-.403.713-.57 1.116-.334.804-.614 1.768-.84 2.734a31.365 31.365 0 00-.613 3.58 2.64 2.64 0 01-.945-1.067c-.328-.68-.398-1.534-.398-2.654A1 1 0 005.05 6.05 6.981 6.981 0 003 11a7 7 0 1011.95-4.95c-.592-.591-.98-.985-1.348-1.467-.363-.476-.724-1.063-1.207-2.03zM12.12 15.12A3 3 0 017 13s.879.5 2.5.5c0-1 .5-4 1.25-4.5.5 1 .786 1.293 1.371 1.879A2.99 2.99 0 0113 13a2.99 2.99 0 01-.879 2.121z" clipRule="evenodd" />
                        </svg>
                        Hot
                      </Badge>
                    </div>
                  )}
                </div>
                <div className="text-xs text-text-secondary mt-1">
                  {item.count}
                </div>
              </div>
              
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-text-secondary" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </div>
          </div>
        ))}
      </div>
      
      <button 
        className="absolute -left-2 top-1/2 -translate-y-1/2 mt-2 w-8 h-8 glass rounded-full flex items-center justify-center z-10 opacity-80 hover:opacity-100"
        onClick={() => scroll('left')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
        </svg>
      </button>
      
      <button 
        className="absolute -right-2 top-1/2 -translate-y-1/2 mt-2 w-8 h-8 glass rounded-full flex items-center justify-center z-10 opacity-80 hover:opacity-100"
        onClick={() => scroll('right')}
      >
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
        </svg>
      </button>
    </div>
  );
};

export default TrendingHashtags;


================================================
File: src/components/trending/TrendingHeader.js
================================================
'use client';

import { useState } from 'react';
import SearchBar from '@/components/ui/SearchBar';

const TrendingHeader = () => {
  const [activeFilter, setActiveFilter] = useState('all');

  const filters = [
    { id: 'all', label: 'All' },
    { id: 'popular', label: 'Popular' },
    { id: 'recent', label: 'Recent' },
    { id: 'rising', label: 'Rising' }
  ];

  return (
    <div className="my-6">
      <h1 className="text-3xl font-display font-bold mb-6">
        <span className="text-transparent bg-clip-text bg-gradient-to-r from-purple-500 to-cyan-400">
          #TrendingNow
        </span>
      </h1>
      
      <div className="mb-6">
        <SearchBar 
          className="w-full" 
          variant="glass"
          placeholder="Search trending items..."
        />
      </div>
      
      <div className="flex items-center overflow-x-auto scrollbar-none pb-2">
        <div className="glass rounded-full px-1 py-1 flex items-center">
          {filters.map((filter) => (
            <button
              key={filter.id}
              className={`text-sm font-medium px-4 py-2 rounded-full transition-all ${
                activeFilter === filter.id
                ? 'bg-white/90 text-gray-900 dark:text-gray-900'
                : 'hover:text-white/80'
              }`}
              onClick={() => setActiveFilter(filter.id)}
            >
              {filter.label}
            </button>
          ))}
        </div>
        
        <button className="ml-4 flex items-center glass rounded-full px-4 py-2">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
          </svg>
          <span className="text-sm">Filter</span>
        </button>
      </div>
      
      <div className="flex justify-between items-center mt-6 mb-2">
        <div className="text-text-secondary text-sm">
          Showing <span className="font-medium text-text-primary">852</span> trending items
        </div>
        
        <div className="flex items-center glass rounded-full px-3 py-1">
          <span className="text-sm mr-2">Sort by:</span>
          <select className="bg-transparent border-none text-sm focus:outline-none appearance-none pr-6 cursor-pointer">
            <option>Popularity</option>
            <option>Recent</option>
            <option>Price: Low to High</option>
            <option>Price: High to Low</option>
          </select>
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 -ml-5 pointer-events-none" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
          </svg>
        </div>
      </div>
    </div>
  );
};

export default TrendingHeader;


================================================
File: src/components/trending/TrendingItem.js
================================================
'use client';

import { useState } from 'react';
import Card from '@/components/ui/Card';
import Badge from '@/components/ui/Badge';

const TrendingItem = ({ item }) => {
  const [isHovered, setIsHovered] = useState(false);
  
  // Format currency
  const formatPrice = (price) => {
    return `₹${price.toFixed(2)}`;
  };
  
  // Calculate discount percentage
  const calculateDiscount = () => {
    if (!item.originalPrice) return null;
    const discount = ((item.originalPrice - item.price) / item.originalPrice) * 100;
    return Math.round(discount);
  };
  
  const discountPercent = calculateDiscount();
  
  return (
    <Card 
      variant="glass" 
      className="transition-all duration-300 hover:-translate-y-2 overflow-hidden"
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div className="relative">
        {/* Image with overlay for trending rank */}
        <div 
          className="relative h-64 bg-cover bg-center"
          style={{ backgroundImage: `url(${item.image})` }}
        >
          {/* Trending rank badge */}
          <div className="absolute top-3 left-3 z-10">
            <Badge variant="primary" size="md" className="font-display font-bold">
              #{item.rank}
            </Badge>
          </div>
          
          {/* Discount badge if available */}
          {discountPercent && (
            <div className="absolute top-3 right-3 z-10">
              <Badge variant="accent" size="md" className="font-display font-bold">
                {discountPercent}% OFF
              </Badge>
            </div>
          )}
          
          {/* Stats overlay */}
          <div className="absolute bottom-0 left-0 right-0 glass p-2 flex justify-between items-center">
            <div className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
              <span className="text-xs ml-1">{item.rating}</span>
            </div>
            
            <div className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-pink-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
              </svg>
              <span className="text-xs ml-1">{item.likes}</span>
            </div>
            
            <div className="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-cyan-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
              </svg>
              <span className="text-xs ml-1">{item.comments}</span>
            </div>
          </div>
          
          {/* Quick actions overlay (visible on hover) */}
          {isHovered && (
            <div className="absolute inset-0 bg-black/40 flex items-center justify-center gap-3 transition-opacity duration-300">
              <button className="w-10 h-10 glass rounded-full flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
              </button>
              
              <button className="w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                </svg>
              </button>
              
              <button className="w-10 h-10 glass rounded-full flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
              </button>
            </div>
          )}
        </div>
        
        {/* Product info */}
        <div className="p-4">
          <div className="flex items-center justify-between mb-1">
            <span className="text-xs text-text-secondary">{item.store}</span>
            <span className="text-xs text-text-secondary">{item.deliveryTime}</span>
          </div>
          
          <h3 className="font-medium line-clamp-1">{item.name}</h3>
          
          <div className="flex items-end mt-2">
            <span className="font-bold text-purple-500">{formatPrice(item.price)}</span>
            {item.originalPrice && (
              <span className="text-xs text-text-secondary line-through ml-2">
                {formatPrice(item.originalPrice)}
              </span>
            )}
          </div>
          
          {/* Trending tags */}
          <div className="flex flex-wrap gap-2 mt-3">
            {item.tags.map((tag, index) => (
              <span 
                key={index}
                className="glass text-xs px-2 py-1 rounded-full"
              >
                #{tag}
              </span>
            ))}
          </div>
        </div>
      </div>
    </Card>
  );
};

export default TrendingItem;


================================================
File: src/components/ui/Badge.js
================================================
const Badge = ({ 
    children, 
    variant = 'primary', 
    size = 'md',
    className = '', 
    ...props 
  }) => {
    const variants = {
      primary: "bg-primary text-white",
      secondary: "bg-secondary text-white",
      accent: "bg-accent text-white",
      success: "bg-success text-white",
      warning: "bg-warning text-white",
      info: "bg-info text-white",
      glass: "glass text-white",
    };
    
    const sizes = {
      sm: "text-xs px-2 py-0.5",
      md: "text-sm px-2.5 py-1",
      lg: "text-base px-3 py-1.5",
    };
    
    return (
      <span 
        className={`inline-flex items-center justify-center rounded-full font-medium ${variants[variant]} ${sizes[size]} ${className}`}
        {...props}
      >
        {children}
      </span>
    );
  };
  
  export default Badge;


================================================
File: src/components/ui/Button.js
================================================
'use client';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  className = '', 
  onClick,
  fullWidth = false,
  isNeomorphic = false,
  ...props 
}) => {
  const baseClasses = "inline-flex items-center justify-center rounded-lg font-medium transition-all duration-200 focus:outline-none";
  
  const variants = {
    primary: "bg-primary hover:bg-primary-hover text-white",
    secondary: "bg-secondary hover:bg-secondary-hover text-white",
    accent: "bg-accent hover:bg-accent-hover text-white",
    glass: "glass text-white hover:bg-opacity-80",
    outline: "border-2 border-primary text-primary hover:bg-primary hover:text-white",
    ghost: "bg-transparent hover:bg-white/10 text-text-primary",
  };
  
  const sizes = {
    sm: "text-xs py-1.5 px-3",
    md: "text-sm py-2 px-4",
    lg: "text-base py-2.5 px-5",
    xl: "text-lg py-3 px-6",
  };
  
  const neomorphClasses = isNeomorphic 
    ? "neomorph active:shadow-neomorph-inner" 
    : "";
  
  const widthClass = fullWidth ? "w-full" : "";
  
  return (
    <button
      className={`${baseClasses} ${variants[variant]} ${sizes[size]} ${widthClass} ${neomorphClasses} ${className}`}
      onClick={onClick}
      {...props}
    >
      {children}
    </button>
  );
};

export default Button;


================================================
File: src/components/ui/Card.js
================================================
const Card = ({
  children,
  className = "",
  variant = "glass",
  hover = false,
  ...props
}) => {
  const variants = {
    glass: "glass",
    neomorph: "neomorph",
    flat: "bg-gray-900",
  };

  const hoverEffect = hover
    ? "transition-transform duration-300 hover:-translate-y-1"
    : "";

  return (
    <div
      className={`rounded-xl overflow-hidden ${variants[variant]} ${hoverEffect} ${className}`}
      {...props}
    >
      {children}
    </div>
  );
};

export default Card;



================================================
File: src/components/ui/SearchBar.js
================================================
'use client';

import { useState, useRef, useEffect } from 'react';

const SearchBar = ({ 
  className = '', 
  variant = 'glass', 
  onSearch = () => {},
  autoFocus = false,
  ...props 
}) => {
  const [isFocused, setIsFocused] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const [searchValue, setSearchValue] = useState('');
  const inputRef = useRef(null);
  
  const variants = {
    glass: "glass",
    neomorph: isFocused ? "neomorph-inset" : "neomorph",
    flat: "bg-background-card",
  };
  
  useEffect(() => {
    if (autoFocus && inputRef.current) {
      inputRef.current.focus();
    }
  }, [autoFocus]);
  
  const handleSearch = (e) => {
    const value = e.target.value;
    setSearchValue(value);
    
    if (value.trim().length > 0) {
      // Show loading state
      setIsSearching(true);
      
      // Debounce search to avoid excessive API calls
      const timer = setTimeout(() => {
        onSearch(value);
        setIsSearching(false);
      }, 500);
      
      return () => clearTimeout(timer);
    } else {
      setIsSearching(false);
    }
  };
  
  const clearSearch = () => {
    setSearchValue('');
    setIsSearching(false);
    if (inputRef.current) {
      inputRef.current.focus();
    }
    onSearch('');
  };
  
  return (
    <div className={`relative ${className}`}>
      <div className={`flex items-center ${variants[variant]} rounded-full pl-4 pr-2 py-2 `}>
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          className={`h-5 w-5 ${isSearching ? 'text-purple-500 animate-pulse' : 'text-text-secondary'}`}
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path 
            strokeLinecap="round" 
            strokeLinejoin="round" 
            strokeWidth={2} 
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" 
          />
        </svg>
        <input
          ref={inputRef}
          type="text"
          value={searchValue}
          onChange={handleSearch}
          placeholder="Search for stores, products, brands..."
          className="bg-transparent border-none text-text-primary placeholder-text-secondary w-full ml-2 focus:outline-none"
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          {...props}
        />
        
        {isSearching && (
          <div className="mr-2 flex items-center">
            <div className="h-4 w-4 relative">
              <div className="absolute inset-0 rounded-full border-2 border-purple-500 border-t-transparent animate-spin"></div>
            </div>
          </div>
        )}
        
        {searchValue && (
          <button 
            className="p-1 rounded-full hover:bg-white/10"
            onClick={clearSearch}
          >
            <svg 
              xmlns="http://www.w3.org/2000/svg" 
              className="h-5 w-5 text-text-secondary" 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth={2} 
                d="M6 18L18 6M6 6l12 12" 
              />
            </svg>
          </button>
        )}
      </div>
      
      {/* Loading indicator shimmer effect */}
      {isSearching && (
        <div className="absolute top-0 left-0 right-0 h-1 overflow-hidden">
          <div className="h-full w-[95%] mx-auto bg-gradient-to-r from-purple-600 via-cyan-400 to-purple-600 animate-shimmer"></div>
        </div>
      )}
    </div>
  );
};

export default SearchBar;


================================================
File: src/components/ui/ThemeToggle.js
================================================
'use client';

import { useTheme } from '@/context/ThemeProvider';

const ThemeToggle = () => {
  const { theme, toggleTheme } = useTheme();

  return (
    <button 
      onClick={toggleTheme}
      className="neomorph p-2 rounded-full transition-all duration-300"
      aria-label={`Switch to ${theme === 'dark' ? 'light' : 'dark'} mode`}
    >
      {theme === 'dark' ? (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          className="h-5 w-5 text-yellow-300" 
          viewBox="0 0 20 20" 
          fill="currentColor"
        >
          <path 
            fillRule="evenodd" 
            d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" 
            clipRule="evenodd" 
          />
        </svg>
      ) : (
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          className="h-5 w-5 text-purple-700" 
          viewBox="0 0 20 20" 
          fill="currentColor"
        >
          <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
        </svg>
      )}
    </button>
  );
};

export default ThemeToggle;


================================================
File: src/context/ThemeProvider.js
================================================
'use client';

import { createContext, useContext, useEffect, useState } from 'react';

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('dark');

  // Check for saved theme preference or set based on user's system preference
  useEffect(() => {
    const savedTheme = localStorage.getItem('trendzo-theme');
    
    if (savedTheme) {
      setTheme(savedTheme);
    } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) {
      setTheme('light');
    }
  }, []);

  // Apply theme class to HTML element
  useEffect(() => {
    const root = document.documentElement;
    root.classList.remove('dark', 'light');
    root.classList.add(theme);
    localStorage.setItem('trendzo-theme', theme);
  }, [theme]);

  const toggleTheme = () => {
    setTheme(prevTheme => prevTheme === 'dark' ? 'light' : 'dark');
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};

